openapi: 3.0.0
info:
  title: Nylas API
  version: '2.2'
  description: >-
    The API is designed around the
    [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer)
    ideology, providing simple and predictable URIs to access and modify
    objects. Requests support [standard HTTP
    methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) like GET,
    PUT, POST, and DELETE and [standard status
    codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html). Response
    bodies are always UTF-8 encoded JSON objects, unless explicitly documented
    otherwise.


    # Get Your API Keys


    Follow our [guide](/docs/the-basics/get-your-developer-keys/) to get your
    `access_token`.



    # Using the API Reference


    We use an `access_token` for most requests. Some
    [requests](/docs/the-basics/authentication/authorizing-api-requests/)
    require a `client_id` and `client_secret`.


    After getting your developer key, you can enter your `access_token` or
    `client_id` and `client_secret` under [Authentication](/docs/api/#auth) to
    make browser requests.


    You can leave most request headers blank. We've already added the required
    types. If something doesn't work, leave us feedback.


    <br>

    <div style="padding:24px; background-color:#F0F3FF; border: 1px solid
    #002DB4; color: #161717"><p><strong>Large Requests</strong></p><p>We
    recommend using a tool like Postman for large requests, such as Message and
    Threads. If the request is too large there might be a slight delay or
    timeout.</p></div>




    # Filters


    Filters allow you to narrow a request based on specific parameters. In
    general, the more specific you can make the requests, the faster they
    perform. For this reason it is important to use filters whenever possible.


    Filters may be appended to API requests on:


    - [Threads](/docs/api/#tag--Threads)

    - [Messages](/docs/api/#tag--Messages)

    - [Files](/docs/api/#tag--Files)

    - [Events](/docs/api/#tag--Events)

    - [Contacts](/docs/api/#tag--Contacts) - limited support

    - [Deltas](/docs/api/#tag--Deltas) - limited support


    > Values must use
    [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding) (also
    known as URL encoding). See the specific endpoint documentation for details
    on exact syntax and supported parameters.


    Filters do not currently support wildcards, such as `from=*@expedia.com`.
    Providing multiple values for a single filter is also unsupported. If you
    require more generalized parameter matching, see the
    [Search](/docs/api/#tag--Search) APIs.



    # Views


    Instead of returning all data about an object, the following views allow you
    to customize the response for any endpoint. They can be combined with
    filters.  Check each endpoint for the type of views supported. The following
    endpoints support view parameters:


    - [Threads](/docs/api/#tag--Threads)

    - [Messages](/docs/api/#tag--Messages)

    - [Drafts](/docs/api/#tag--Drafts)

    - [Folders](/docs/api/#tag--Folders)

    - [Labels](/docs/api/#tag--Labels)

    - [Files](/docs/api/#tag--Files)

    - [Calendars](/docs/api/#tag--Files)

    - [Events](/docs/api/#tag--Events)

    - [Contacts](/docs/api/#tag--Contacts)

    - [Deltas](/docs/api/#tag--Deltas) - Expanded View Only



    ## ID View


    Return only the IDs of objects.



    ```bash

    curl
    https://api.nylas.com/messages?thread_id=aqb0llc2ioo0bclh7uxkim9z6&view=ids

    ```


    ```json

    [
      "f594seo6izjks2s7qxjbwquol",
      "3a95fq0askqgj7mnh6i281ahz",
      "4vfg8p1om177q2cfx9sselkea"
    ]

    ```


    ## Count View


    Returns the number of objects in the collection being queried.


    ```bash

    curl https://api.nylas.com/threads?in=inbox&view=count

    ```


    ```json

    {
      "count": 386
    }

    ```


    ## Expanded View


    Expands the `threads` responses to contain message/draft sub-objects. Adding
    `view=expanded` will remove `message_ids` and `draft_ids`, and include
    `messages` and `drafts`.


    > The message and draft sub-objects do not include a`body` parameter.


    Message objects are expanded to include several additional RFC2822 headers.
    For more information, see the [Expanded Message
    View](/docs/api/#tag--Messages--message-views).


    # Pagination


    Using both the limit and offset parameters allows you to easily paginate
    through a large number of objects.


    | Query Parameter | Type | Description |

    | ----------|--|------- |

    | `limit` | integer  | The number of objects to return. This value often
    defaults to 100. If set too high, requests may fail to prevent excessively
    large response bodies. |

    | `offset` | integer  | A zero-based offset from the default object sorting.
    |


    > If a request returns fewer objects than the `limit` parameter, there are
    no more items available to return.


    # Versioning


    **We are on version 2.2.**


    To learn about versioning, see
    [Versioning](/docs/developer-tools/api/versioning/).
  contact:
    url: 'https://www.nylas.com/'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: ''
servers:
  - url: 'https://api.nylas.com'
    description: US
  - description: Canada
    url: 'https://canada.api.nylas.com'
  - url: 'https://ireland.api.nylas.com '
    description: EU
paths:
  /folders:
    get:
      tags:
        - Folders
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
              examples:
                ReturnAllFoldersResponse:
                  value:
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Archive
                      id: ajs4ef7xu74vns6o5ufsu69m7
                      name: archive
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Conversation History
                      id: etmvbqwqo64vlm73qvyfj2tet
                      name: string
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Deleted Items
                      id: blrfzbz4r066ip8x1bh8k8g1y
                      name: trash
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Drafts
                      id: a6vnuwv9gjj1xidxkhyzxeke1
                      name: drafts
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Inbox
                      id: b8un1ec0syrv94153fg3p61ci
                      name: inbox
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Junk Email
                      id: 8tqebvw8t0aky7f2or1oagwt8
                      name: spam
                      object: folder
                    - account_id: 79xcak1h10r1tmm5ogavx28lb
                      display_name: Sent Items
                      id: clzqp0nsim0138aohwzha34vk
                      name: sent
                      object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - ACCESS_TOKEN: []
      operationId: get-folders
      summary: Return All Folders
      description: Returns all folders.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            # Return all folders found in the user's inbox
            curl -X GET 'https://api.nylas.com/folders' \
            -H 'Authorization: Bearer ACCESS_TOKEN'

            # Use offset, and limit to paginate the results
            curl -X GET 'https://api.nylas.com/folders?limit=2&offset=4' \
            -H 'Authorization: Bearer ACCESS_TOKEN
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all folders found in the user's inbox
            nylas.folders.all()

            # Use offset, and limit to paginate the results
            nylas.folders.where(limit=2, offset=4)

            # Return the first folder
            folder = nylas.folders.first()

            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id'
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Return all folders found in the user's inbox
            nylas.folders

            # Use offset, and limit to paginate the results
            nylas.folders.limit(2).offset(4)

            # Return the last folder
            nylas.folders.last

            # Return the first folder
            folder = nylas.folders.first

            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: js
          label: Node.js SDK
          source: >-
            // Return all folders found in the user's inbox

            nylas.folders.list().then(folders => console.log(folders));


            // Use offset, and limit to paginate the results

            nylas.folders.list({limit: 2, offset: 4}).then(folders =>
            console.log(folders))


            // Return the first folder

            nylas.folders.first().then(folder => console.log(folder));


            // The following attributes are available for the folder object

            folder.id

            folder.object

            folder.accountId

            folder.name

            folder.displayName
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.FolderQuery;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void getFoldersExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Return all folders found in the user's inbox
                    folders.list();

                    // Use offset, and limit to control pagination
                    folders.list(new FolderQuery().limit(2).offset(4));

                    // Return the first folder
                    Folder folder = folders.list(new FolderQuery().limit(1)).get(0);

                    // The following attributes are available for the folder object
                    folder.getDisplayName();
                    folder.getName();
                    folder.getObject();
                    folder.getId();
                    folder.getAccountId();
                    }
            }
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderCreateUpdate'
            examples:
              CreateAFolderRequest:
                value:
                  display_name: My Renamed Folder
      tags:
        - Folders
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
              examples:
                CreateAFolderResponse:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - ACCESS_TOKEN: []
      operationId: post-folders
      summary: Create a folder
      description: >-
        Creates a new folder.


        - Nylas folder names are case insensitive. This means, when creating
        folder names, `myfoldername` is the same as `MYFOLDERNAME`.

        - When creating a child folder, the parent folder must exist.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            # Create a new folder
            curl -X POST 'https://api.nylas.com/folders' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "display_name": "My New Folder"
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Create a new folder

            folder = nylas.folders.create()


            # The following attributes can be set for a new folder object

            folder.display_name = "My Custom Folder"


            # Save the folder to Nylas and the 3rd party provider

            # Note: folder.display_name must be assigned a value before you can
            save the folder

            folder.save()
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Create a new folder

            folder = nylas.folders.create(display_name: 'My Custom Folder')


            # The following attributes can be set for a new folder object

            folder.display_name = "My Custom Folder"


            # Save the folder to Nylas and the 3rd party provider

            # Note: folder.display_name must be assigned a value before you can
            save the folder

            folder.save
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void postFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Create a new folder with the provided display name
                    Folder folder = folders.create("My Custom Folder");
                    }
            }
  '/folders/{id}':
    get:
      tags:
        - Folders
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
              examples:
                ReturnAFolderResponse:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - ACCESS_TOKEN: []
      operationId: get-folders-id
      summary: Return a folder
      description: Returns a folder by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Replace {id} with the appropriate folder id
            folder = nylas.folders.get('{id}')


            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} with the appropriate folder id
            folder = nylas.folders.find('{id}')


            # The following attributes are available for the folder object
            folder.display_name
            folder.name
            folder.object
            folder.account_id
            folder.id
        - lang: js
          label: Node.js SDK
          source: |-
            # Replace {id} with the appropriate folder id
            nylas.folders.find('{id}').then(folder => console.log(folder));


            # The following attributes are available for the folder object
            folder.id
            folder.object
            folder.accountId
            folder.name
            folder.displayName
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folder;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void getFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Replace {id} with the appropriate folder id
                    Folder folder = folders.get("{id}");

                    // The following attributes are available for the folder object
                    folder.getDisplayName();
                    folder.getName();
                    folder.getId();
                    folder.getAccountId();
                    folder.getObject();
                    }
            }
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderCreateUpdate'
            examples:
              UpdateAFolderRequest:
                value:
                  display_name: My Renamed Folder
                  name: renamed-folder
        description: ''
      tags:
        - Folders
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
              examples:
                UpdateAFolderResponse:
                  value:
                    account_id: 79xcak1h10r1tmm5ogavx28lb
                    display_name: Archive
                    id: ajs4ef7xu74vns6o5ufsu69m7
                    name: archive
                    object: folder
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - ACCESS_TOKEN: []
      operationId: put-folders-id
      summary: Update a folder
      description: >-
        Updates a folder by ID.


        Nylas folder names are case insensitive. This means, when updating
        folder names, `myfoldername` is the same as `MYFOLDERNAME`.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            # Replace {id} to get a specific folder
            curl -X PUT 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "display_name": "My New Folder Renamed"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Replace {id} to get a specific folder
            folder = nylas.folders.get('{id}')

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save folder changes to Nylas and the 3rd party provider
            # display_name must be set before calling this function
            folder.save()
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} to get a specific folder
            folder = nylas.folders.find('{id}')

            # The following attributes can be set for a new folder object
            folder.display_name = "My Custom Folder"

            # Save folder changes to Nylas and the 3rd party provider
            folder.save
        - lang: js
          label: Node.js SDK
          source: |-
            // Replace {id} to get a specific folder
            let folder;
            nylas.folders.find('{id}').then(res => folder = res);

            // The following attributes can be set for a new folder object
            folder.displayName = 'My Custom Folder';

            // Save folder changes to Nylas and the 3rd party provider
            folder.save();
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void putFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Update a folder's display name by passing the folder ID and the new name.
                    folders.setDisplayName("{folder_id}", "My Custom Label");
                    }
            }
    delete:
      tags:
        - Folders
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - ACCESS_TOKEN: []
      operationId: delete-folders-id
      summary: Delete a folder
      description: Deletes a folder.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE 'https://api.nylas.com/folders/{folder_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Delete folders by specifying the appropriate id
            nylas.folders.delete('{id}')
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} to get a specific folder
            folder = nylas.folders.find('{id}')

            # Delete folder
            folder.destroy
        - lang: js
          label: Node.js SDK
          source: |-
            // Delete folders by specifying the appropriate id
            nylas.folders.delete('{id}');
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Folders;

            public class NylasExamples {
                public static void deleteFolderExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Folders folders = account.folders();

                    // Delete folders by specifying the appropriate id
                    folders.delete("{folder_id}");
                    }
            }
    parameters:
      - name: id
        description: The ID of the folder.
        schema:
          type: string
        in: path
        required: true
  /oauth/authorize:
    get:
      tags:
        - Hosted Authentication
      parameters:
        - $ref: '#/components/parameters/client_id'
        - $ref: '#/components/parameters/redirect_uri'
        - $ref: '#/components/parameters/response_type'
        - $ref: '#/components/parameters/scopes'
        - $ref: '#/components/parameters/login_hint'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
              examples:
                AuthenticateUserResponse:
                  value:
                    code: string
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - BASIC_AUTH: []
      operationId: get-oauth-authorize
      summary: Authenticate User
      description: >
        Authenticate your user using Hosted Authentication.



        **Scopes**


        Before making your request make sure you have the correct <a
        href="/docs/the-basics/authentication/authentication-scopes/">Nylas
        Scopes</a></p>
      x-code-samples:
        - lang: bash
          label: cURL
          source: >
            curl -G \
              --url 'https://api.nylas.com/oauth/authorize' \
              -H 'Authorization: Basic ENCODED_CLIENT_SECRET' \
              -d 'client_id=nylas_client_id' \
              -d 'redirect_uri=http://example.com/nylas_callback' \
              -d 'response_type=code' \
              -d 'scopes=email.read_only,calendar.read_only,contacts.read_only' \
              -d 'login_hint=my_email@example.com' \
              -d 'state=MyCustomStateString'
              
            # After your user authenticates, Nylas will return a unique,
            one-time-use code.

            # This code can be used to create an access token that grants access
            to the user account.
        - lang: py
          label: Python SDK
          source: >
            from nylas import APIClient



            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )

            auth_url = nylas.authentication_url(
                "http://example.com/login_callback", # Required
                login_hint="your_email@example.com",  # Optional
                state="unique_identifier",  # Optional
                scopes='email, calendar, contacts' # Optional - Default is all scopes

            )


            # This is the URL you need to send the user to to authenticate their
            account.

            print(auth_url)


            # After your user authenticates, Nylas will return a unique,
            one-time-use code.

            # This code can be used to create an access token that grants access
            to the user account.
        - lang: ruby
          label: Ruby SDK
          source: |-
            use OmniAuth::Builder do
                provider :google_oauth2, ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'],
                  { name: 'google', access_type: :offline, approval_prompt: "force", prompt: 'consent',
                    scope: ['email', 'profile', 'https://mail.google.com/',
                            'https://www.google.com/m8/feeds/',
                            'calendar'].join(', ') }
              end
              get "/" do
                '<a href="/auth/google">Authenticate a Google Account</a>'
              end
              
              get "/auth/failure" do
                params[:message]
              end
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');

            Nylas.config({
              clientId: CLIENT_ID,
              clientSecret: CLIENT_SECRET,
            });

            options = {
              loginHint: 'you_email@example.com',
              redirectURI: 'https://localhost/callback',
              scopes: ['email.read_only', 'email.send'],
            };

            // Redirect your user to the auth_url
            auth_url = Nylas.urlForAuthentication(options);
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.HostedAuthentication;
            import com.nylas.Scope;

            public class NylasExamples {
                public static void hostedAuthExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");

                    HostedAuthentication authentication = application.hostedAuthentication();
                    String hostedAuthUrl = authentication.urlBuilder()
                        .redirectUri("https://example.com/redirect")
                        .responseType("code") // Use token for client-side apps
                        .scopes(Scope.EMAIL, Scope.CALENDAR, Scope.CONTACTS)
                        .loginHint("nyla@nylas.com")
                        .state("example_csrf_token")
                        .buildUrl();
                    
                    // This is the URL you need to send the user to to authenticate their account.
                    System.out.println(hostedAuthUrl);

                    // After your user authenticates, Nylas will return a unique, one-time-use code.
                    // This code can be used to create an access token that grants access to the user account.
                    
                }
            }
  /oauth/token:
    post:
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostedAuth-SendAuthCode'
            examples:
              SendAccessTokenRequest:
                value:
                  client_id: string
                  client_secret: string
                  grant_type: string
                  code: string
      tags:
        - Hosted Authentication
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostedAuthenticationToken'
              examples:
                Send Authorization Code Example:
                  value:
                    access_token: aec7cad*************
                    account_id: d920**********
                    email_address: swag@nylas.com
                    provider: eas
                    token_type: bearer
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - BASIC_AUTH: []
      operationId: post-oauth-token
      summary: Send Authorization Code
      description: >-
        Send authorization code. An access token will return as part of the
        response.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST \
              https://api.nylas.com/oauth/token \
              -H 'Authorization: Basic ENCODED_CLIENT_SECRET' \
              -d '{
                "client_id": "CLIENT_ID",
                "client_secret": "CLIENT_SECRET",
                "grant_type": "authorization_code",
                "code": "AUTHORIZATION_CODE"
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient


            # Create a client that has access to your Nylas app.

            nylas_app = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )


            # Get an access token that grants access to user data and
            functionality.

            # You need to generate a one-time-use code via Nylas to pass to this
            function.


            ACCESS_TOKEN = nylas_app.token_for_code('{code_from_nylas}')


            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Now you have a Nylas client object that has access to user data
            and functionality

            print(nylas.account)
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas_token = api.authenticate(
              name: auth_hash[:info][:name],
              email_address: auth_hash[:info][:email],
              provider: :gmail,
              settings: { 
                google_client_id: ENV['GOOGLE_CLIENT_ID'],
                google_client_secret: ENV['GOOGLE_CLIENT_SECRET'],
                google_refresh_token: auth_hash[:credentials][:refresh_token] 
              }
            )
        - lang: js
          label: Node.js SDK
          source: >-
            const Nylas = require('nylas');


            // Pass credentials to the Nylas client to manage authentication

            Nylas.config({

            clientId: CLIENT_ID,

            clientSecret: CLIENT_SECRET,

            });


            // Get an access token that grants access to user data and
            functionality.

            // You need to generate a one-time-use code via Nylas to pass to
            this function.

            let access_token;

            Nylas.exchangeCodeForToken(NYLAS_CODE).then(resp => access_token =
            resp);


            // Pass access_token to the Nylas client

            const nylas = Nylas.with(access_token);


            // Now your Nylas client object has access to user data and
            functionality

            nylas.calendars.list();
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.NylasAccount;
            import com.nylas.HostedAuthentication;

            public class NylasExamples {
                public static void hostedTokenExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();

                    // Create a client that has access to your Nylas app.
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    HostedAuthentication authentication = application.hostedAuthentication();

                    // Get an access token that grants access to user data and functionality.
                    // You need to generate a one-time-use code via Nylas to pass to this function.

                    String accessToken = authentication.fetchToken("{code}").getAccessToken();

                    // Now you have a Nylas client object that has access to user data and functionality
                    NylasAccount account = nylas.account(accessToken);
                }        
            }
  /oauth/revoke:
    post:
      tags:
        - Hosted Authentication
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - BASIC_AUTH: []
      operationId: post-oauth-revoke
      summary: Revoke Access Tokens
      description: >-
        Revoke access tokens.


        Include the to-be-revoked access token as the HTTP Basic Auth username.


        ```bash

        curl -X POST https://api.nylas.com/oauth/revoke --user
        ACCESS_TOKEN_TO_REVOKE

        ```


        A 200 status code response with a body of `{ "success": True }`
        signifies that the token has been successfully revoked and can no longer
        be used.


        If needed, you can also revoke all active access tokens by using the
        [Account
        Management](0/docs/api/#post-/a/-client_id-/accounts/-id-/revoke-all)
        endpoints.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl -X POST https://api.nylas.com/oauth/revoke --user
            ACCESS_TOKEN_TO_REVOKE:
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient


            # Pass the access token to the Nylas client to manage the account's
            tokens

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Revoke the access token that was passed to the Nylas client.

            nylas.revoke_token()


            # Revoke all access tokens for the user account.

            nylas.revoke_all_tokens()


            # You can also revoke all tokens except for one.

            nylas.revoke_all_tokens(keep_access_token='{ACCESS_TOKEN}')
        - lang: ruby
          label: Ruby SDK
          source: |2-
                # Revoke the nylas access token so it cannot be used in the future (you probably don't want to do this
                # unless people deactivate their account with your software)
                api.revoke(nylas_token)
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');

            // Pass credentials to the Nylas client to manage authentication
            Nylas.config({
            clientId: CLIENT_ID,
            clientSecret: CLIENT_SECRET,
            });

            // Get the user account
            let account;
            Nylas.accounts.find(ACCOUNT_ID).then(resp => account = resp);

            // Revoke all access tokens for the user account.
            account.revokeAll();

            // You can also revoke all tokens except for one.
            nylas.revokeAll(ACCESS_TOKEN);
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Accounts;

            public class NylasExamples {
                public static void revokeTokensExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    Accounts accounts = application.accounts();

                    // Revoke all tokens for an account by providing its ID
                    accounts.revokeAllTokensForAccount("{accountId}", null);

                    // Pass an optional access token to revoke all tokens except for one.
                    accounts.revokeAllTokensForAccount("{accountId}", "{ACCESS_TOKEN}");
                    }
            }
  /connect/authorize:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NativeAuthPost'
            examples:
              Google Service Account:
                $ref: '#/components/examples/Google_Service_Accounts'
              Office 365:
                $ref: '#/components/examples/Office_365'
              Exchange:
                $ref: '#/components/examples/Exchange'
              Virtual Calendar:
                $ref: '#/components/examples/Virtual_Calendar'
              Gmail:
                $ref: '#/components/examples/Gmail'
              IMAP:
                $ref: '#/components/examples/GenericImap'
              Known Imap:
                $ref: '#/components/examples/KnownImap'
              Outlook:
                $ref: '#/components/examples/Outlook'
              Exchange Service Accounts With OAuth:
                $ref: '#/components/examples/Exchange_Service_Account_OAuth'
              Exchange Service Account with a Password:
                $ref: '#/components/examples/Exchange_Service_Accounts_Password'
        description: ''
      tags:
        - Native Authentication
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
              examples:
                Native Auth Response Code:
                  $ref: '#/components/examples/NativeAuthCode'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value:
                    message: Please include the missing fields
                    type: auth_error
                    missing_fields:
                      - provider
                    error: Missing fields.
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
        '403':
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value:
                    message: Please include the missing fields
                    type: auth_error
                    missing_fields:
                      - provider
                    error: Missing fields.
          description: Forbidden
      operationId: post-connect-authorize
      summary: Send Authorization
      description: >-
        A successful authentication will return your application a JSON encoded
        body with a single code parameter. In the next step, your server backend
        should exchange this code for an access token, which can then be used to
        make API requests.


        Each provider requires different settings. Review the [Provider Specific
        Settings](/docs/the-basics/provider-guides/) for more information.


        **Related Guides**


        - [Native
        Authentication](/docs/the-basics/authentication/native-authentication/)

        - [Authentication
        Scopes](/docs/the-basics/authentication/hosted-authentication/)


        **Scopes**


        Before making your request make sure you have the correct [Nylas
        scopes](/docs/the-basics/authentication/authentication-scopes/)
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            # The following examples will return a one-time-use code.

            # This code can be exchanged for an account access token that grants
            full access to user account functionality.


            # Authenticate Google Accounts

            curl -X POST https://api.nylas.com/connect/authorize -d '{ 
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "gmail",
                "settings": {
                    "google_client_id": "{google_api_client_id}",
                    "google_client_secret": "{geoogle_api_client_secret}",
                    "google_refresh_token": "{google_api_refresh_token}"
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'


            # Authenticate Google Account using a Service Account

            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@gmail.com", # Account to be authenticated
                "provider": "gmail",
                "settings": {
                    "service_account_json": { # Service account credentials
                    "type": "service_account",
                    "project_id": "my-google-app-123456",
                    "private_key_id": "68915b4e55baac9191dd32e0be784687c6873b14",
                    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIE....fZ1F8=\n-----END PRIVATE KEY-----\n",
                    "client_email": "test-service-account@my-google-app-123456.iam.gserviceaccount.com",
                    "client_id": "10569134234239528168761",
                    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                    "token_uri": "https://oauth2.googleapis.com/token",
                    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test-service-account%40my-google-app-123456.iam.gserviceaccount.com"
                },
                "scopes": "calendar"
            }'


            # Authenticate Office365 Accounts

            curl -X POST https://api.nylas.com/connect/authorize -d '{ 
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "office365",
                "settings":{
                    "microsoft_client_id":     "{microsoft_client_id}",
                    "microsoft_client_secret": "{microsoft_client_secret}",
                    "microsoft_refresh_token": "{microsoft_refresh_token}",
                    "redirect_uri":            "https://example.com/redirect", # Redirect URI that the was originally used to get the refresh token        
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'


            # Authenticate Exchange Accounts

            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "exchange",
                "settings": {
                    "username": "nyla@nylas.com",
                    "password": "MakeEmailSuckLess",
                    "exchange_server_host": "exchange.nylas.com"
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'


            # Authenticate Exchange Account using a Service Account via Password

            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com", # Account to authenticate
                "provider": "exchange",
                "settings": {
                    "username": "username", # Service account username
                    "password": "password", # Service account password
                    "service_account": true
                },
                "scopes": "calendar.read_only"
            }'


            # Authenticate Exchange Account using a Service Account via OAuth

            curl -X POST https://api.nylas.com/connect/authorize -d '{ 
                "client_id":     "nylas_client_id",
                "name":          "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",   # Account to authenticate
                "provider":      "exchange",
                "settings": {
                    "microsoft_client_id":     "{microsoft_client_id}",
                    "microsoft_client_secret": "{microsoft_client_secret}",
                    "microsoft_refresh_token": "{microsoft_refresh_token}", # Service account refresh token!
                    "redirect_uri":            "https://example.com/redirect",
                    "service_account": true
                },
                "scopes": "calendar"
            }'


            # Authenticate Outlook Accounts

            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@outlook.com",
                "provider": "outlook",
                "settings": {
                    "username": "nyla@outlook.com",
                    "password": "MakeEmailSuckLess",
                    "exchange_server_host": "eas.outlook.com"
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'


            # Authenticate known IMAP providers

            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@aol.com",
                "provider": "aol",
                "settings": {
                    "password": "MakeEmailSuckLess"
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'


            # Authenticate a generic IMAP provider

            curl -X POST https://api.nylas.com/connect/authorize -d '{
                "client_id": "nylas_client_id",
                "name": "Nyla the Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "imap",
                "settings": {
                    "imap_host": "imap.nylas.com",
                    "imap_port": 993,
                    "imap_username": "nyla",
                    "imap_password": "MakeEmailSuckLess",
                    "smtp_host": "smtp.nylas.net",
                    "smtp_port": 587,
                    "smtp_username": "nyla",
                    "smtp_password": "MakeEmailSuckLess",
                    "ssl_required": true
                },
                "scopes": "email.read_only,calendar.read_only,contacts.read_only"
            }'


            # Virtual Calendars


            curl --location --request POST
            'https://api.nylas.com/connect/authorize' \
                --data-raw '{
                "client_id": "9df4ff17888f4729ad4e1463d2547d",
                "provider": "nylas",
                "scopes": "calendar", 
                "email": "virtual_account_unique_id",
                "name": "Virtual Calendar",
                "settings": {}
                }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            import requests


            # Create a client that has access to your Nylas app.

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )


            # Authenticate Gmail Accounts

            gmail_authentication = {
                # Example: https://github.com/nylas/nylas-python/tree/master/examples/native-authentication-gmail
                "client_id": CLIENT_ID,
                "name":          "Nyla The Cheetah",
                "email_address": "nyla@nylas.com",
                "provider":      "gmail",
                "settings":      {  # See the Example above to learn more about these values
                  "google_client_id":     "{google_api_client_id}",
                  "google_client_secret": "{google_api_client_secret}",
                  "google_refresh_token": "{google_api_refresh_token}"
                },
                "scopes": "email,calendar,contacts"
            }


            # Post the authentication payload to Nylas.

            nylas_authorization = requests.post(
                    "https://api.nylas.com/connect/authorize", json=gmail_authentication
            )


            # This code can be exchanged for an account access token

            nylas_code = nylas_authorization.json()["code"]


            # -------------------------------------------

            # The remainder contains examples of how to authenticate other types
            of accounts


            # Authenticate Exchange Accounts

            exchange_authentication = {
                # Example: https://github.com/nylas/nylas-python/tree/master/examples/native-authentication-exchange
                "client_id": CLIENT_ID,
                "name":          "Nyla The Cheetah",
                "email_address": "nyla@nylas.com",
                "provider":      "exchange",
                "settings": {
                    "username": "nyla@exchange_server.com",
                    "password": "MakeEmailSuckLess",
                    "eas_server_host": "exchange.your_server.com"
                },
                "scopes": "email,calendar,contacts"
            }


            # Authenticate an Outlook Account

            outlook_authentication = {
                "client_id": CLIENT_ID,
                "name":          "Nyla The Cheetah",
                "email_address": "nyla@outlook.com",
                "provider": "outlook",
                "settings": { # Uses the same format as Exchange Servers
                    "username": "nyla@outlook.com",
                    "password": "MakeEmailSuckLess",
                    "eas_server_host": "outlook.com"

                },
                "scopes": "email,calendar,contacts"
            }


            # Authenticate an account from a known IMAP provider

            known_imap_authentication = {
                "client_id": CLIENT_ID,
                "name":          "Nyla The Cheetah",
                "email_address": "nyla@yahoo.com",
                "provider": "yahoo",  # can also be aol, icloud, or hotmail
                "settings": {
                    "password": "MakeEmailSuckLess"
                },
                "scopes": "email,calendar,contacts"
            }


            # Authenticate any other IMAP account

            generic_imap_authentication = {
                "client_id": CLIENT_ID,
                "name": "Nyla The Cheetah",
                "email_address": "nyla@nylas.com",
                "provider": "imap",
                "settings":      {
                    "imap_host":     "imap.nylas.com",
                    "imap_port":     12345,
                    "imap_username": "nyla",
                    "imap_password": "MakeEmailSuckLess",
                    "smtp_host":     "smtp.nylas.net",
                    "smtp_port":     12346,
                    "smtp_username": "nyla",
                    "smtp_password": "MakeEmailSuckLess",
                    "ssl_required":  'true'
                },
                "scopes": "email,calendar,contacts"
            }
        - lang: rb
          label: Ruby SDK
          source: |-
            nylas_token = api.authenticate(
              name: auth_hash[:info][:name], 
              email_address: auth_hash[:info][:email],
              provider: :gmail,
              settings: {
                google_client_id: ENV['GOOGLE_CLIENT_ID'],
                google_client_secret: ENV['GOOGLE_CLIENT_SECRET'],
                google_refresh_token: auth_hash[:credentials][:refresh_token] 
              }
            )
        - lang: JS
          label: Node.js SDK
          source: "// The following examples will return a Promise, which resolves to a one-time-use code.\n// This code can be exchanged for an account access token that grants full access to user account functionality.\n\nconst Nylas = require('nylas');\n\nNylas.config({\n  clientId: CLIENT_ID,\n  clientSecret: CLIENT_SECRET,\n});\n\n// Authenticate Google Accounts\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@gmail.com',\n  provider: 'gmail',\n  settings: {\n    google_client_id: '{google_api_client_id}',\n    google_client_secret: '{google_api_client_secret}',\n    google_refresh_token: '{google_api_refresh_token}',\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate Office365 Accounts\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@nylas.com',\n  provider: 'office365',\n  settings: {\n    microsoft_client_id: '{microsoft_client_id}',\n    microsoft_client_secret: '{microsoft_client_secret}',\n    microsoft_refresh_token: '{microsoft_refresh_token}',\n    redirect_uri: 'https://example.com/redirect', // Redirect URI that the was originally used to get the refresh token\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate Exchange Accounts\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@nylas.com',\n  provider: 'exchange',\n  settings: {\n    username: 'nyla@nylas.com',\n    password: 'MakeEmailSuckLess'\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate Outlook Accounts\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@outlook.com',\n  provider: 'outlook',\n  settings: {\n    username: 'nyla@outlook.com',\n    password: 'MakeEmailSuckLess',\n    eas_server_host: \"outlook.com\"\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate known IMAP providers\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@aol.com',\n  provider: 'aol',\n  settings: {\n  \tpassword: 'MakeEmailSuckLess',\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});\n\n// Authenticate a generic IMAP provider\nNylas.connect.authorize({\n  name: 'Nyla The Cheetah',\n  email_address: 'nyla@nylas.com',\n  provider: 'imap',\n  settings: {\n    imap_host: 'imap.nylas.com',\n    imap_port: 993,\n    imap_username: 'nyla',\n    imap_password: 'MakeEmailSuckLess',\n    smtp_host: 'smtp.nylas.com',\n    smtp_port: 465,\n    smtp_username: 'nyla',\n    smtp_password: 'MakeEmailSuckLess',\n    ssl_required: true\n  },\n  scopes: 'email.read_only,calendar.read_only,contacts.read_only'\n});"
        - lang: java
          label: Java SDK
          source: "import java.io.IOException;\nimport com.nylas.RequestFailedException;\nimport com.nylas.NylasApplication;\nimport com.nylas.NylasClient;\nimport com.nylas.Scope;\nimport com.nylas.NativeAuthentication;\nimport com.nylas.NativeAuthentication.AuthRequestBuilder;\n\nimport com.nylas.GoogleProviderSettings;\nimport com.nylas.ImapProviderSettings;\n\n\npublic class NylasExamples {\n    public static void nativeAuthExample() throws IOException, RequestFailedException {\n        NylasClient nylas = new NylasClient();\n        NylasApplication application = nylas.application(\"{CLIENT_ID}\", \"{CLIENT_SECRET}\");\n        NativeAuthentication authentication = application.nativeAuthentication();\n\n        ImapProviderSettings settings = new ImapProviderSettings()\n            .imapHost(\"imap.nylas.com\")\n            .imapPort(1234)\n            .imapUsername(\"nyla\")\n            .imapPassword(\"MakeEmailSuckLess\")\n            .smtpHost(\"smtp.nylas.com\")\n            .smtpPort(2345)\n            .smtpUsername(\"nyla\")\n            .smtpPassword(\"MakeEmailSuckLess\")\n            .sslRequired(true)\n            ;\n\n        AuthRequestBuilder authRequest = authentication.authRequest()\n            .name(\"Nyla The Cheetah\")\n            .emailAddress(\"nyla@nylas.com\")\n            .providerSettings(settings)\n            .scopes(Scope.EMAIL, Scope.CALENDAR, Scope.CONTACTS);\n                                \n        System.out.println(\"Making a native authentication request.\");\n        String authorizationCode = authRequest.execute();\n        System.out.println(\"Success! Authorization code: \" + authorizationCode);\n\n\t\t\t\t// --------------------------------------------------------\n        // The remainder contains examples of how to authenticate other types of accounts\n        \n        // Authenticate Google Accounts\n        GoogleProviderSettings googleSettings = new GoogleProviderSettings()\n            .googleClientId(\"google.api.client.id\")\n            .googleClientSecret(\"google.api.client.secret\")\n            .googleRefreshToken(\"google.refresh.token\")\n            ;\n\n        ProviderSettings office365Auth = new MicrosoftOffice365ProviderSettings()\n                .microsoftClientId(\"{MS_CLIENT_ID}\")\n                .microsoftClientSecret(\"{MS_CLIENT_SECRET}\")\n                .microsoftRefreshToken(\"{MS_REFRESH_TOKEN}\")\n                .redirectUri(\"example.com/nylas-redirect\")\n                ;\n        \n        ProviderSettings exchangeAuth = new MicrosoftExchangeProviderSettings()\n                .username(\"nyla@exchange_server.com\")\n                .password(\"MakeEmailSuckLess\")\n                .easServerHost(\"exchange.your_server.com\")\n                ;\n        \n        ProviderSettings knownImapAuth = new KnownImapProviderSettings(\n                \"yahoo\")\n                .password(\"MakeEmailSuckLess\")\n                ;\n    }\n}"
      security:
        - BASIC_AUTH: []
  /account:
    get:
      tags:
        - Accounts
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountGet'
              examples:
                ReturnAccountDetails:
                  value:
                    id: awa6ltos76vz5hvphkp8k17nt
                    object: account
                    account_id: awa6ltos76vz5hvphkp8k17nt
                    name: Dorothy Vaughan
                    provider: gmail
                    organization_unit: label
                    sync_state: running
                    linked_at: 1470231381
                    email_address: dorothy@spacetech.com
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      security:
        - ACCESS_TOKEN: []
      operationId: get-account
      summary: Return Account Details
      description: Returns account details.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --location --request GET 'https://api.nylas.com/account' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Basic <YOUR-TOKEN-STRING>'
        - lang: py
          label: Python SDK
          source: "nylas = APIClient(\n    CLIENT_ID,\n    CLIENT_SECRET,\n  \tACCESS_TOKEN\n)\naccount = nylas.account\n\n# The following attributes are available for the Account object\naccount.id\naccount.account_id\naccount.object\naccount.name\naccount.email_address\naccount.provider\naccount.organization_unit\naccount.sync_state\naccount.linked_at"
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas = Nylas::API.new(
                app_id: APP_ID,
                app_secret: APP_SECRET,
                access_token: ACCESS_TOKEN
            )

            account = nylas.current_account

            # The following attributes are available for the Account object
            account.id
            account.account_id
            account.object
            account.name
            account.email_address
            account.provider
            account.organization_unit
            account.sync_state
            account.linked_at
        - lang: js
          label: Node.js SDK
          source: |-
            nylas.account.get().then(account => console.log(account));

            // The following attributes are available for the Account object
            account.id
            account.accountId
            account.object
            account.name
            account.emailAddress
            account.provider
            account.organizationUnit
            account.syncState
            account.linkedAt
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.AccountDetail;
            import com.nylas.NylasClient;

            public class DocExamples {
                public static void getAccountExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    AccountDetail account = nylas.account("{ACCESS_TOKEN}").fetchAccountByAccessToken();
                    
                    // The following attributes are available for the account object
                    account.getId();
                    account.getName();
                    account.getEmailAddress();
                    account.getProvider();
                    account.getOrganizationUnit();
                    account.getSyncState();
                    account.getLinkedAt();
                    }
            }
  /connect/token:
    post:
      summary: Exchange the Token
      tags:
        - Native Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NativeAuthToken'
              examples:
                ExchangeTokenResponse:
                  value:
                    access_token: token
                    account_id: account-id
                    billing_state: paid
                    email_address: nyla@nylas.com
                    id: id
                    linked_at: 1563496685
                    name: Nyla The Cheeta
                    object: account
                    organization_unit: label
                    provider: google
                    sync_state: running
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-connect-token
      description: >
        This endpoint is where your application exchanges the code received from
        `/connect/authorize` and receives an access token. This associates


        A successful response from this will be an account object with an
        `access_token attribute`. Once you’ve obtained a token, you include it
        with Nylas API requests as the HTTP Basic Auth Username.


        You can remove this account from your Nylas Cloud app in the Nylas API
        console.



        **Never send your client secret to a browser**


        This request should be made from your server. It's important that you
        never send your client secret to a browser. In order to do this, your
        browser JavaScript code should securely send the received code in the
        previous step to your web app, which in turn makes the request to
        `/connect/token`
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST "https://api.nylas.com/connect/token" -d '{
              "client_id": "{client-id}",
              "client_secret": "{client-secret}",
              "code": "{nylas_code}"
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient


            # Create a client that has access to your Nylas app.

            nylas_app = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )


            # Get an access token that grants access to user data and
            functionality.

            # You need to generate a one-time-use code via Nylas to pass to this
            function.

            ACCESS_TOKEN = nylas_app.token_for_code('{code_from_nylas}')


            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Now you have a Nylas client object that has access to user data
            and functionality

            print(nylas.account)
        - lang: rb
          label: Ruby SDK
          source: "auth_hash = env['omniauth.auth']\n\nnylas_token = api.authenticate(name: auth_hash[:info][:name], \n  \temail_address: auth_hash[:info][:email], \n    provider: :gmail, settings:\n    { \n      google_client_id: ENV['GOOGLE_CLIENT_ID'],\n      google_client_secret: ENV['GOOGLE_CLIENT_SECRET'],\n      google_refresh_token: auth_hash[:credentials][:refresh_token] })\n\napi_as_user = api.as(nylas_token)"
        - lang: js
          label: Node.js SDK
          source: >-
            // The following examples will return a Promise, which resolves to a
            Nylas account, complete with account id and access token.

            // This access token grants full access to user account
            functionality.


            const Nylas = require('nylas');


            Nylas.config({
              clientId: CLIENT_ID,
              clientSecret: CLIENT_SECRET,
            });


            // First, you need to generate a one-time-use code via Nylas


            let access_code;


            Nylas.connect.authorize({
              name: 'Nyla The Cheetah',
              email_address: 'nyla@gmail.com',
              provider: 'gmail',
              settings: {
                google_client_id: '{google_api_client_id}',
                google_client_secret: '{google_api_client_secret}',
                google_refresh_token: '{google_api_refresh_token}',
              },
              scopes: 'email.read_only,calendar.read_only,contacts.read_only'
            }).then(resp => access_code = resp.code);


            // Use this code to connect the account to your Nylas Application

            let account;

            Nylas.connect.token(access_code).then(resp => account = resp);


            // Use the account's access token to get a Nylas client with access
            to the account's data and functionality

            const nylas = Nylas.with(account.access_token);

            nylas.calendars.list().then(resp => console.log(resp));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.NylasAccount;
            import com.nylas.NativeAuthentication;


            public class NylasExamples {
                public static void nativeTokenExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    // Create a client that has access to your Nylas app.
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    NativeAuthentication authentication = application.nativeAuthentication();

                    // Get an access token that grants access to user data and functionality.
                    // You need to generate a one-time-use code via Nylas to pass to this function.

                    String accessToken = authentication.fetchToken("{code}").getAccessToken();

                    // Now you have a Nylas client object that has access to user data and functionality
                    NylasAccount account = nylas.account(accessToken);
                }
            }
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: Your client ID from the Nylas Developer console.
                client_secret:
                  type: string
                  description: Your client secret from the Nylas Developer console.
                code:
                  type: string
                  description: The value returned from calling `/connect/authorize`.
              required:
                - client_id
                - client_secret
                - code
            examples:
              ExchangeTokenRequest:
                value:
                  client_id: string
                  client_secret: string
                  code: string
        description: ''
  '/a/{client_id}/accounts':
    get:
      summary: Return All Accounts
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountReturnAll'
              examples:
                Return All Accounts:
                  $ref: '#/components/examples/Return_All_Accounts'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-a-client_id-accounts
      description: Returns a list of all accounts.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl -X GET \\\n  https://api.nylas.com/a/{client_id}/accounts/ \\\n\t-H 'Authorization: Basic ENCODED_SECRET'"
        - lang: py
          label: Python SDK
          source: >-
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )


            # Return a list of dictionary objects that represent all accounts
            connected to an app

            accounts = nylas.accounts.all()


            # Return an account specified by a specific id

            account = nylas.accounts.get('{id}')


            # Return the first account

            account = nylas.accounts.first()


            # The following attributes are available for the account object

            account.email

            account.id

            account.sync_state

            account.billing_state

            account.trial
        - lang: ruby
          label: Ruby SDK
          source: >-
            nylas = Nylas::API.new(
                app_id: CLIENT_ID,
                app_secret: CLIENT_SECRET
            )


            # Return a list of dictionary objects that represent all accounts
            connected to an app

            accounts = nylas.accounts


            # Return an account specified by a specific id

            account = nylas.accounts.find('{id}')


            # Return the first account

            account = nylas.accounts.first


            # The following attributes are available for the account object

            account.email

            account.id

            account.sync_state

            account.billing_state

            account.trial
        - lang: js
          label: Node.js SDK
          source: >-
            const Nylas = require('nylas');

            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});


            Nylas.accounts.list().then(accounts => console.log(accounts));


            // Get an account specified by a specific id

            Nylas.accounts.find('accountId').then(account =>
            console.log(account));


            // Get the first account

            Nylas.accounts.first().then(account => console.log(account));


            // The following attributes are available for the Account object

            account.id

            account.accountId

            account.billingState

            account.emailAddress

            account.provider

            account.syncState

            account.trial

            account.clientId
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Account;
            import com.nylas.Accounts;

            public class NylasExamples {
                public static void getAccountsExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    Accounts accounts = application.accounts();
                    
                    // Return all accounts connected to your Nylas app
                    accounts.list();

                    // Return an account by specifying its ID
                    Account account = accounts.get("{accountId}");
                    
                    // The following attributes are available for the account object
                    account.getBillingState();
                    account.getEmail();
                    account.getProvider();
                    account.getSyncState();
                    account.getTrial();
                    }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client ID of your Nylas developer application.
  '/a/{client_id}/accounts/{id}':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the account.
    get:
      summary: Return a Account
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountReturnAll'
              examples:
                ReturnAnAccount:
                  value:
                    account_id: 123rvgm1iccsgnjj7nn6jwu1
                    billing_state: paid
                    email: example@example.com
                    id: 123rvgm1iccsgnjj7nn6jwu1
                    provider: gmail
                    sync_state: running
                    trial: false
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-a-client_id-accounts-id
      description: Returns details from a single account.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/a/{client_id}/accounts/{id} \
              -H 'Authorization: Basic ENCODED_SECRET'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )

            # Return an account specified by a specific id
            account = nylas.accounts.get('{id}')

            # Return the first account
            account = nylas.accounts.first()

            # The following attributes are available for the account object
            account.email
            account.id
            account.sync_state
            account.billing_state
            account.trial
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas = Nylas::API.new(
                app_id: APP_ID,
                app_secret: APP_SECRET
            )
        - lang: js
          label: Node.js SDK
          source: >-
            const Nylas = require('nylas');

            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'})


            // Get an account specified by a specific id

            Nylas.accounts.find('accountId').then(account =>
            console.log(account));


            // Get the first account

            Nylas.accounts.first().then(account => console.log(account));


            // The following attributes are available for the Account object

            account.id

            account.accountId

            account.billingState

            account.emailAddress

            account.provider

            account.syncState

            account.trial

            account.clientId
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;

            import com.nylas.Account;
            import com.nylas.Accounts;

            public class NylasExamples {
                public static void getAccountExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    Accounts accounts = application.accounts();

                    // Return an account by specifying its ID
                    Account account = accounts.get("{accountId}");
                    
                    // The following attributes are available for the account object
                    account.getBillingState();
                    account.getEmail();
                    account.getProvider();
                    account.getSyncState();
                    account.getTrial();
                    }
            }
      parameters:
        - $ref: '#/components/parameters/Accept'
      security:
        - BASIC_AUTH: []
    delete:
      summary: Delete an Account
      operationId: delete-a-client_id-accounts-id
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Error-401'
      description: >-
        Deletes an account. Accounts deleted using this method are immediately
        unavailable.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location -g --request DELETE
            'https://api.nylas.com/a/{client_id}/accounts/{id}' \

            --header 'Authorization: Basic <NYLAS_CLIENT_SECRET>'
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      tags:
        - Account Management
  '/a/{client_id}/accounts/{id}/downgrade':
    post:
      summary: Cancel an Account
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: string
                    minLength: 1
                required:
                  - success
              examples:
                CreateAnAccount:
                  $ref: '#/components/examples/CancelAnAccount'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-a-client_id-accounts-id-downgrade
      description: >-
        Cancels a paid Nylas account. Accounts that are cancelled instead of
        deleted, can be recovered within 3 days.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST \
              https://api.nylas.com/a/{client_id}/accounts/{id}/downgrade \
              -H 'Authorization: Basic ENCODED_SECRET'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )
            # Cancel an account, replace {id} with the appropriate account id
            account = nylas.accounts.get('{id}')
            account.downgrade()
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas = Nylas::API.new(
                app_id: APP_ID,
                app_secret: APP_SECRET
            )
            # Cancel an account, replace {id} with the appropriate account id
            account = nylas.accounts.find('{id}')
            account.downgrade
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');
            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});

            // Cancel an account, replace {id} with the appropriate account id
            Nylas.accounts
              .find('{id}')
              .then(account => account.downgrade())
              .then(response => console.log(response));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Accounts;

            public class NylasExamples {
              public static void cancelAccountExample() throws IOException, RequestFailedException {
                NylasClient nylas = new NylasClient();
                NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                Accounts accounts = application.accounts();
                // Cancel an account by providing its ID
                accounts.downgrade("{accountId}");

              }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the account to cancel.
  '/a/{client_id}/accounts/{id}/upgrade':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the account to reactivate.
    post:
      summary: Reactivate an Account
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: string
                    minLength: 1
                required:
                  - success
              examples:
                ReactivateAnAccount:
                  value:
                    success: 'true'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-a-client_id-accounts-id-upgrade
      description: Reactivate a cancelled account.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST \
              https://api.nylas.com/a/{client_id}/accounts/{id}/upgrade \
              -H 'Authorization: Basic ENCODED_SECRET'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET
            )
            account = nylas.accounts.get('{id}')
            account.upgrade()
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas = Nylas::API.new(
                app_id: APP_ID,
                app_secret: APP_SECRET
            )

            account = nylas.accounts.find('{id}')
            account.upgrade
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');
            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});

            Nylas.accounts
            .find('{id}')
            .then(account => account.upgrade());
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Accounts;

            public class NylasExamples {
              public static void upgradeAccountExample() throws IOException, RequestFailedException {
                NylasClient nylas = new NylasClient();
                NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                Accounts accounts = application.accounts();

                // Reactivate an account by providing its ID
                accounts.upgrade("{accountId}");

              }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  '/a/{client_id}/accounts/{id}/revoke-all':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of an account for which to revoke all tokens.
    post:
      summary: Revoke All Tokens
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: string
                    minLength: 1
                required:
                  - success
              examples:
                RevokeAllTokensResponse:
                  value:
                    success: 'true'
        '401':
          $ref: '#/components/responses/Error-401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                  type:
                    type: string
                    minLength: 1
                required:
                  - message
                  - type
              examples:
                example-1:
                  value:
                    message: No tokens found for that account id
                    type: api_error
      operationId: post-a-client_id-accounts-id-revoke-all
      description: >-
        Revoke all access tokens for an account.


        There are two ways to use this endpoint, you can revoke all access
        tokens, or pass in a access token you want to keep.


        To revoke all access tokens, pass an empty body.


        To keep access tokens, pass in an access token.


        ```json

        {
            "keep_access_token": "ACCESS_TOKEN"
        }

        ```
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl -X POST \
              https://api.nylas.com/a/{client_id}/accounts/{id}/revoke-all \
              -H 'Authorization: Basic ENCODED_SECRET'

            # Alternatively, pass an access token to revoke all except the
            provided token

            curl -X POST \
              https://api.nylas.com/a/{client_id}/accounts/{id}/revoke-all \
              -H 'Authorization: Basic ENCODED_SECRET' \
              -d '{
                "keep_access_token": "ACCESS_TOKEN"
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Revoke all tokens
            nylas.revoke_all_tokens()

            # Revoke all tokens except for one
            nylas.revoke_all_tokens(keep_access_token=ACCESS_TOKEN)
        - lang: ruby
          label: Ruby SDK
          source: |-
            nylas = Nylas::API.new(
                app_id: APP_ID,
                app_secret: APP_SECRET,
                access_token: ACCESS_TOKEN
            )

            account = nylas.accounts.find('{id}')

            # Revoke all tokens
            account.revoke_all

            # Revoke all tokens except for one
            account.revoke_all(keep_access_token: ACCESS_TOKEN)
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');
            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});

            // Revoke all tokens
            Nylas.accounts
            .find('accountId')
            .then(account => account.revokeAll());

            // Revoke all tokens except for one
            Nylas.accounts
            .find('accountId')
            .then(account => account.revokeAll('kept_access_token'));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Accounts;

            public class NylasExamples {
                public static void revokeTokensExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    Accounts accounts = application.accounts();

                    // Revoke all tokens for an account by providing its ID
                    accounts.revokeAllTokensForAccount("{accountId}", null);

                    // Pass an optional access token to revoke all tokens except for one.
                    accounts.revokeAllTokensForAccount("{accountId}", "{ACCESS_TOKEN}");
                    }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                keep_access_token:
                  type: string
                  minLength: 1
                  description: >-
                    Use this to keep an existing access token instead of
                    deleting them all
            examples:
              RevokeAllTokensRequest:
                value:
                  keep_access_token: string
        description: ''
  '/a/{client_id}/ip_addresses':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client ID of your Nylas developer application.
    get:
      summary: Return Application IP Addresses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  ip_addresses:
                    type: array
                    items: {}
                  updated_at:
                    type: number
                required:
                  - ip_addresses
                  - updated_at
              examples:
                ReturnApplicationIPAddressesResponse:
                  value:
                    ip_addresses:
                      - 52.25.153.17
                      - 52.26.120.161
                      - 52.39.252.208
                      - 54.71.62.98
                      - 34.208.138.149
                      - 52.88.199.110
                      - 54.69.11.122
                      - 54.149.110.158
                    updated_at: 1544658529
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-a-client_id-ip_addresses
      description: |-
        Return application IP addresses.


        **Dynamic IP**
        The IP adddress are dynamic and can change at anytime.

        **Rate Limits**

        Up to 10 requests per endpoint per hour.

        **Paid Applications**

        This endpoint can only be accessed by paid applications.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/a/{client_id}/ip_addresses \
              -H 'Authorization: Basic ENCODED_SECRET'
        - lang: py
          label: Python SDK
          source: print(nylas.ip_addresses())
        - lang: ruby
          label: Ruby SDK
          source: puts api.ip_addresses
        - lang: js
          label: Node.js SDK
          source: |-
            Nylas.accounts.first()
              .then(account => account.ipAddresses())
              .then(response => console.log(response));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.IPAddressWhitelist;

            public class NylasExamples {
                public static void ipAddressesExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");

                    IPAddressWhitelist ipAddresses = application.fetchIpAddressWhitelist();

                    // The following attributes are available for the IPAddressWhitelist object
                    ipAddresses.getIpAddresses();
                    ipAddresses.getUpdatedAt();
                    }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      tags:
        - Application Management
  '/a/{client_id}/accounts/{id}/token-info':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client_id of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The id of the account for which to return information.
    post:
      summary: Return Token Information
      tags:
        - Account Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  created_at:
                    type: number
                    description: Timestamp indicating when the access_token was created.
                    example: 1563496685
                  scopes:
                    type: string
                    minLength: 1
                    description: >-
                      Which authentications scopes are allowed with this token.
                      See authentication scopes for a list of possible scopes
                      values.
                    example: 'calendar,email,contacts'
                  state:
                    type: string
                    minLength: 1
                    description: >-
                      Can be valid or inactive. Using an inactive token will
                      return an authorization error.
                    enum:
                      - invalid
                      - valid
                    example: valid
                  updated_at:
                    type: number
                    description: >-
                      Timestamp indicating when the token object was updated,
                      typically reflecting a change in the token's state.
                    example: 1563496685
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: No access_token passed.
                    type: api_error
        '401':
          $ref: '#/components/responses/Error-401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: No such token found for that account
                    type: api_error
      operationId: post-a-client_id-accounts-id-token-info
      description: Return information about an accounts access token.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl -X POST https://api.nylas.com/a/{client_id}/accounts/{id}/token-info \\\n  -H 'Authorization: Basic ENCODED_SECRET' \\\n  -d '{\n\t\"access_token\": \"{access_token}\"\n}'"
        - lang: js
          label: Node.js SDK
          source: |-
            Nylas.accounts
              .first()
              .then(account => account.tokenInfo())
              .then(response => console.log(response));
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                'CLIENT_ID',
                'CLIENT_SECRET',
                'ACCESS_TOKEN'
            )
            token = nylas.token_info()
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Accounts;
            import com.nylas.TokenInfo;

            public class NylasExamples {
                public static void tokenInfoExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    Accounts accounts = application.accounts();
                    TokenInfo tokenInfo = accounts.tokenInfo("{accountId}", "{ACCESS_TOKEN}");

                    // The following attributes are available for the TokenInfo object
                    tokenInfo.getCreatedAt();
                    tokenInfo.getScopes();
                    tokenInfo.getState();
                    tokenInfo.getUpdatedAt();
                    }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                access_token:
                  type: string
                  minLength: 1
                  description: >-
                    The account's access_token value that is returned during
                    authentication.
              required:
                - access_token
            examples:
              ReturnTokenInformationResponse:
                value:
                  access_token: string
  '/a/{client_id}':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client_id of your Nylas developer application.
    get:
      summary: Return Application Details
      tags:
        - Application Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetailsGet'
              examples:
                ReturnApplicationDetailsResponse:
                  value:
                    application_name: Moon Indigo ✨
                    icon_url: >-
                      https://inbox-developer-resources.s3.amazonaws.com/icons/da5b3a1c-448c-11e7-872b-0625ca014fd6
                    redirect_uris:
                      - 'http://localhost:5555/login_callback'
                      - localhost
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-a-client_id
      description: Return information about a Nylas application.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request GET 'https://api.nylas.com/a/{client_id}'
            \

            --header 'Content-Type: application/json' \

            --header 'Authorization: Basic <CLIENT_SECRET>'
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');

            Nylas.config({
              clientId: CLIENT_ID,
              clientSecret: CLIENT_SECRET,
            });

            // list application details
            Nylas.application().then(resp => console.log(resp));
        - lang: java
          label: Java SDK
          source: "import java.io.IOException;\nimport com.nylas.RequestFailedException;\nimport com.nylas.ApplicationDetail;\nimport com.nylas.NylasClient;\nimport com.nylas.NylasApplication;\n\npublic class NylasExamples {\n    public static void getApplicationDetails() throws IOException, RequestFailedException {\n        NylasClient client = new NylasClient();\n        NylasApplication application = client.application(\n                \"{CLIENT_ID}\", \n                \"{CLIENT_SECRET}\");\n        ApplicationDetail detail = application.getApplicationDetail();\n\n\t\t\t\t// The following attributes are available for the ApplicationDetail Class\n        detail.getName();\n        detail.getRedirectUris();\n        detail.getIconUrl();\n\n    }\n}"
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    post:
      summary: Update Application Details
      operationId: post-a-client_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetailsGet'
              examples:
                Update Application Details Response:
                  value:
                    application_name: string
                    icon_url: >-
                      https://inbox-developer-resources.s3.amazonaws.com/icons/da5b3a1c-448c-11e7-872b-0625ca014fd6
                    redirect_uris:
                      - string
        '401':
          $ref: '#/components/responses/Error-401'
      description: Update application details.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl -X PUT \"https://api.nylas.com/a/{client_id}\" \\\n-H \"Authorization: Basic mysUp3RS3crEtCl1EntS3crET=\" \\\n-d '{\n    \"application_name\": \"My New App Name\",\n    \"redirect_uris\": [\n\t    \"http://localhost:5555/login_callback\",\n\t    \"localhost\",\n      \"https://customerA.myapplication.com/login_callback\"\n\t]\n}'"
        - lang: js
          label: Node.js SDK
          source: "const Nylas = require('nylas');\n\nNylas.config({\n  clientId: CLIENT_ID,\n  clientSecret: CLIENT_SECRET,\n});\n\n// update application details\nNylas.application(\n  {\n    \tapplicationName: 'Updated name', \n    \tredirectUris: [\n      \t\"http://localhost:5555/login_callback\",\n\t    \t\"localhost\",\n      \t\"https://customerA.myapplication.com/login_callback\"\n      ]\n  }).then(response => console.log(response))"
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.ApplicationDetail;
            import com.nylas.NylasClient;
            import com.nylas.NylasApplication;

            public class NylasExamples {
              public static void updateApplicationDetails() throws IOException, RequestFailedException {
                NylasClient client = new NylasClient();
                NylasApplication application = client.application(
                  "{CLIENT_ID}", 
                  "{CLIENT_SECRET}");      

                application.setName("My Nylas APP");
                application.addRedirectUri("https://example.com/my_redirect");
                application.removeRedirectUri("https://example.com/my_redirect");
              }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                application_name:
                  type: string
                  minLength: 1
                redirect_uris:
                  type: array
                  items:
                    type: string
              required:
                - application_name
                - redirect_uris
            examples:
              Update Application Details:
                value:
                  application_name: My New App Name
                  redirect_uris:
                    - 'http://localhost:5555/login_callback'
                    - localhost
                    - 'https://customerA.myapplication.com/login_callback'
        description: ''
      tags:
        - Application Management
  /threads:
    get:
      summary: Returns All Threads
      tags:
        - Threads
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Threads'
              examples:
                ReturnAllThreadsResponse:
                  value:
                    - account_id: '{account_id}'
                      draft_ids:
                        - string
                      first_message_timestamp: 1557950729
                      folders:
                        - display_name: Inbox
                          id: '{folder_id}'
                          name: inbox
                      has_attachments: true
                      id: '{thread_id}'
                      last_message_received_timestamp: 1557950729
                      last_message_sent_timestamp: 0
                      last_message_timestamp: 1557950729
                      message_ids:
                        - string
                      object: thread
                      participants:
                        - email: no-reply@cc.yahoo-inc.com
                          name: Yahoo
                      snippet: 'Hi James, welcome.'
                      starred: true
                      subject: Security settings changed on your Yahoo account
                      unread: true
                      version: 1
                      labels:
                        - string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-threads
      description: >-
        Returns one or more threads that match the filter specified by the query
        parameters. Threads return with the most recently modified first.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url 'https://api.nylas.com/threads' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <ACCESS_TOKEN>' \
              --header 'Content-Type: application/json'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Return all threads found in the user's inbox

            nylas.threads.all()


            # Return threads that are filtered by specified arguments

            nylas.threads.where(to='swag@nylas.com')

            # Available filters: subject, to, from_, cc, bcc, in_, unread,

            # starred, filename, last_message_before, last_message_after,
            started_before, started_after


            # Use offset, and limit to control pagination

            nylas.threads.where(limit=10, offset=5)


            # Return all threads that meet a specified search criteria

            nylas.threads.search('swag@nylas.com')


            # Return the most recent thread

            thread = nylas.threads.first()


            # The following attributes are available for the thread object

            thread.subject

            thread.message_ids

            thread.unread

            thread.labels # Gmail accounts only

            thread.folders # All providers other than Gmail

            thread.last_message_timestamp

            thread.last_message_received_timestamp

            thread.account_id

            thread.object

            thread.first_message_at

            thread.id

            thread.snippet

            thread.participants

            thread.draft_ids

            thread.last_message_received_at

            thread.version

            thread.last_message_at

            thread.first_message_timestamp

            thread.starred

            thread.has_attachments
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Return all threads found in the user's inbox

            nylas.threads


            # Return threads that are filtered by specified arguments

            nylas.threads.where(to: 'swag@nylas.com')

            # Available filters: subject, to, from, cc, bcc, in, unread,

            # starred, filename, last_message_before, last_message_after,
            started_before, started_after


            # Use offset, and limit to control pagination

            nylas.threads.limit(10).offset(5)


            # Return all threads that meet a specified search criteria

            nylas.threads.search('swag@nylas.com')


            # Return the most recent thread

            thread = nylas.threads.first


            # The following attributes are available for the thread object

            thread.subject

            thread.message_ids

            thread.unread

            thread.labels # Gmail accounts only

            thread.folders # All providers other than Gmail

            thread.last_message_timestamp

            thread.last_message_received_timestamp

            thread.account_id

            thread.object

            thread.first_message_timestamp

            thread.id

            thread.snippet

            thread.participants

            thread.draft_ids

            thread.last_message_received_timestamp

            thread.version

            thread.last_message_timestamp

            thread.starred
        - lang: js
          label: Node.js SDK
          source: >-
            // Get all threads found in the user's inbox

            nylas.threads.list().then(threads => console.log(threads))


            // Get threads that are filtered by specified arguments

            nylas.threads.list({to: 'swag@nylas.com'}).then(resp =>
            console.log(resp));

            // Available filters: subject, to, from_, cc, bcc, in_, unread,

            // starred, filename, last_message_before, last_message_after,
            started_before, started_after


            // Use offset, and limit to control pagination

            nylas.threads.list({limit: 5}).then(threads => console.log(threads))


            // Get all threads that meet a specified search criteria

            nylas.threads.search('Debrief').then(threads =>
            console.log(threads));


            // Get the most recent thread

            nylas.threads.first().then(thread => console.log(thread));


            // The following attributes are available for the thread object

            thread.id

            thread.object

            thread.accountId

            thread.subject

            thread.participants

            thread.lastMessageTimestamp

            thread.lastMessageReceivedTimestamp

            thread.lastMessageSentTimestamp

            thread.firstMessageTimestamp

            thread.snippet

            thread.unread

            thread.starred

            thread.hasAttachments

            thread.version

            thread.labels

            thread.messageIds

            thread.draftIds
        - lang: java
          label: Java SDK
          source: "import java.io.IOException;\nimport com.nylas.RequestFailedException;\nimport com.nylas.NylasAccount;\nimport com.nylas.NylasClient;\nimport com.nylas.Thread;\nimport com.nylas.ThreadQuery;\nimport com.nylas.Threads;\n\npublic class NylasExamples {\n    public static void getThreadsExample() throws IOException, RequestFailedException {\n        NylasClient nylas = new NylasClient();\n        NylasAccount account = nylas.account(\"{ACCESS_TOKEN}\");\n        Threads threads = account.threads();\n        \n        // Return all threads found in the user's inbox \n        threads.list();\n        \n        // Return threads that are filtered by specified arguments\n        // Available filters: subject, to, from, cc, bcc, in, unread,\n        // starred, filename, lastMessageBefore, lastMessageAfter, startedBefore, startedAfter\n        threads.list(new ThreadQuery().to(\"swag@nylas.com\"));\n        \n        // Use offset, and limit to control pagination\n        threads.list(new ThreadQuery().limit(10).offset(10));\n        \n        // Return all threads that meet a specified search criteria\n        threads.search(\"swag@nylas.com\");\n        \n        // Return the most recent thread\n        Thread thread = threads.list(new ThreadQuery().limit(1)).get(0);\n        \n        // The following attributes are available for the thread object\n        thread.getSubject();\n        thread.getMessageIds();\n        thread.isUnread();\n        thread.getLabels(); // Gmail accounts only\n        thread.getFolders(); // All providers other than Gmail\n        thread.getFirstMessageTimestamp();\n        thread.getLastMessageTimestamp();\n        thread.getLastMessageReceivedTimestamp();\n        thread.getLastMessageSentTimestamp();\n        thread.getAccountId();\n        thread.getObjectType();\n      \tthread.hasAttachments();\n        thread.getId();\n        thread.getSnippet();\n        thread.getParticipants();\n        thread.getDraftIds();\n        thread.getVersion();\n        thread.isStarred();\n        }\n}"
      parameters:
        - $ref: '#/components/parameters/view'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/subject'
        - $ref: '#/components/parameters/any_email'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/cc'
        - $ref: '#/components/parameters/bcc'
        - $ref: '#/components/parameters/in'
        - $ref: '#/components/parameters/unread'
        - $ref: '#/components/parameters/starred'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/last_message_before'
        - $ref: '#/components/parameters/last_message_after'
        - $ref: '#/components/parameters/started_before'
        - $ref: '#/components/parameters/started_after'
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/not_in'
      security:
        - ACCESS_TOKEN: []
  '/threads/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the thread to return.
    get:
      summary: Returns a Thread
      tags:
        - Threads
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Threads'
              examples:
                ReturnAThreadResponse:
                  value:
                    account_id: '{account_id}'
                    draft_ids:
                      - string
                    first_message_timestamp: 1557950729
                    folders:
                      - display_name: Inbox
                        id: '{folder_id}'
                        name: inbox
                    has_attachments: true
                    id: '{thread_id}'
                    last_message_received_timestamp: 1557950729
                    last_message_sent_timestamp: 0
                    last_message_timestamp: 1557950729
                    message_ids:
                      - string
                    object: thread
                    participants:
                      - email: no-reply@cc.yahoo-inc.com
                        name: Yahoo
                    snippet: 'Hi James, welcome.'
                    starred: true
                    subject: Security settings changed on your Yahoo account
                    unread: true
                    version: 1
                    labels:
                      - string
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-threads-id
      description: Returns the thread by the specified thread ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url https://api.nylas.com/threads/{THREAD_ID} \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <ACCESS_TOKEN>' \
              --header 'Content-Type: application/json'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Return a single thread, replace {id} with the appropriate value
            nylas.threads.get('{id}')

            # The following attributes are available for the thread object
            thread.subject
            thread.message_ids
            thread.unread
            thread.labels # Gmail accounts only
            thread.folders # All providers other than Gmail
            thread.last_message_timestamp
            thread.last_message_received_timestamp
            thread.account_id
            thread.object
            thread.first_message_at
            thread.id
            thread.snippet
            thread.participants
            thread.draft_ids
            thread.last_message_received_at
            thread.version
            thread.last_message_at
            thread.first_message_timestamp
            thread.starred
            thread.has_attachments
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Return a single thread, replace {id} with the appropriate value
            nylas.threads.find('{id}')

            # The following attributes are available for the thread object
            thread.subject
            thread.message_ids
            thread.unread
            thread.labels # Gmail accounts only
            thread.folders # All providers other than Gmail
            thread.last_message_timestamp
            thread.last_message_received_timestamp
            thread.account_id
            thread.object
            thread.first_message_timestamp
            thread.id
            thread.snippet
            thread.participants
            thread.draft_ids
            thread.last_message_received_timestamp
            thread.version
            thread.last_message_timestamp
            thread.starred
        - lang: js
          label: Node.js SDK
          source: |-
            // Get a single thread, by its id
            nylas.threads.find('{id}').then(thread => console.log(thread));

            // The following attributes are available for the thread object
            thread.id
            thread.object
            thread.accountId
            thread.subject
            thread.participants
            thread.lastMessageTimestamp
            thread.lastMessageReceivedTimestamp
            thread.lastMessageSentTimestamp
            thread.firstMessageTimestamp
            thread.snippet
            thread.unread
            thread.starred
            thread.hasAttachments
            thread.version
            thread.labels
            thread.messageIds
            thread.draftIds
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Thread;
            import com.nylas.Threads;

            public class NylasExamples {
                public static void getThreadExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Threads threads = account.threads();
                    // Replace '{id}' with the appropriate value
                    Thread thread = threads.get("{id}");
                    
                    // The following attributes are available for the thread object
                    thread.getSubject();
                    thread.getMessageIds();
                    thread.isUnread();
                    thread.getLabels(); // Gmail accounts only
                    thread.getFolders(); // All providers other than Gmail
                    thread.getFirstMessageTimestamp();
                    thread.getLastMessageTimestamp();
                    thread.getLastMessageReceivedTimestamp();
                    thread.getLastMessageSentTimestamp();
                    thread.getAccountId();
                    thread.getObjectType();
                    thread.getId();
                    thread.getSnippet();
                    thread.getParticipants();
                    thread.getDraftIds();
                    thread.getVersion();
                    thread.isStarred();
                    }
            }
      parameters:
        - $ref: '#/components/parameters/Accept'
      security:
        - ACCESS_TOKEN: []
    put:
      summary: Update a Thread
      operationId: put-threads-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Threads'
              examples:
                UpdateAThreadResponse:
                  value:
                    account_id: '{account_id}'
                    draft_ids:
                      - string
                    first_message_timestamp: 1557950729
                    folders:
                      - display_name: Inbox
                        id: '{folder_id}'
                        name: inbox
                    has_attachments: true
                    id: '{thread_id}'
                    last_message_received_timestamp: 1557950729
                    last_message_sent_timestamp: 0
                    last_message_timestamp: 1557950729
                    message_ids:
                      - string
                    object: thread
                    participants:
                      - email: no-reply@cc.yahoo-inc.com
                        name: Yahoo
                    snippet: 'Hi James, welcome.'
                    starred: true
                    subject: Security settings changed on your Yahoo account
                    unread: true
                    version: 1
                    labels:
                      - string
        '401':
          $ref: '#/components/responses/Error-401'
      description: |-
        Update a thread by ID.

        When you update a thread, all message in a thread are updated.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request PUT \
              --url https://api.nylas.com/threads/<THREAD_ID>\
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <ACCESS_TOKEN>' \
              --header 'Content-Type: application/json' \
              --data '{
              "unread": true,
              "starred": false,
              "folder_id": "<FOLDER_ID>",
              "label_ids": [
                "<LABEL_ID>",
                "<LABEL_ID>"
              ]
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Replace '{id}' with the appropriate value
            thread = nylas.threads.get('{id}')

            # Mark thread read
            thread.mark_as_read()

            # Mark thread unread
            thread.mark_as_unread()

            # Star a thread
            thread.star()

            # Unstar a thread
            thread.unstar()

            # Add a new label to a thread (Gmail)
            thread.add_label('{label_id}')

            # Remove a label from a thread (Gmail)
            thread.remove_label('{label_id}')

            # Batch update labels on a thread (Gmail)
            thread.update_labels(['{label_id}', '{another_label_id}'])

            # Move a thread to a different folder (Non-Gmail)
            thread.update_folder('{folder_id}')
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace '{id}' with the appropriate value
            thread = client.threads.find('{id}')

            # Mark thread read
            thread.update(unread: false)

            # Mark thread unread
            thread.update(unread: true)

            # Star a thread
            thread.update(starred: true)

            # Unstar a thread
            thread.update(starred: false)

            # Batch update labels on a thread (Gmail)
            thread.update(label_ids: ['first-label-id'])
        - lang: js
          label: Node.js SDK
          source: |-
            // Get a single thread, by its id
            nylas.threads.find('{id}').then(thread => {
              
                // mark as unread (false for read)
                thread.unread = true;
                
                // mark as starred (false for unstarred)
                thread.starred = true;
                
                // add label
                const existingLabel = nylas.labels.build({displayName: 'Reminders', id: '<labelId>'});
                thread.labels.push(existingLabel);
                
                // remove label
                thread.labels = thread.labels.filter(function(value, index, arr){
                return value.displayName != 'Important';
                });
                
                // save updates
                thread.save();
              })
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import java.util.Arrays;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Threads;

            public class NylasExamples {
                public static void putThreadExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Threads threads = account.threads();
                
                    // Mark thread read
                    threads.setUnread("{thread_id}", false);
                
                    // Mark thread unread
                    threads.setUnread("{thread_id}", true);
                
                    // Star a thread
                    threads.setStarred("{thread_id}", true);
                
                    // Unstar a thread
                    threads.setStarred("{thread_id}", false);
                
                    // Update labels on a thread (Gmail)
                    threads.setLabelIds("{thread_id}", Arrays.asList("{label_id}", "{another_label_id}"));
                
                    // Move a thread to a different folder (Non-Gmail)
                    threads.setFolderId("{thread_id}", "{folder_id}");
                }
            }
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadCreateUpdate'
            examples:
              UpdateAThreadRequest:
                value:
                  unread: true
                  starred: true
                  folder_id: string
                  label_ids:
                    - string
      tags:
        - Threads
      security:
        - ACCESS_TOKEN: []
  /messages:
    get:
      summary: Return All Messages
      tags:
        - Messages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Messages'
              examples:
                ReturnAllMessageResponse:
                  value:
                    - account_id: '{account_id}'
                      bcc:
                        - email: Albert Einstein
                          name: al@particletech.com
                      body: >-
                        <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
                        type=\"text/css\">\n html {\n
                        -webkit-text-size-adjust:none;\n }\n body {\n
                        width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
                        width:280px;\n line-height: 16px;\n letter-spacing:
                        0.5px;\n }\n </style>\n <title>Welcome  ...  </html>
                      cc:
                        - email: George Washington Carver
                          name: carver@agritech.com
                      date: 1557950729
                      events:
                        - {}
                      files:
                        - content_disposition: attachment
                          content_type: image/jpeg
                          filename: image.jpeg
                          id: '{image_id}'
                          size: 2648890
                      folder:
                        display_name: string
                        id: string
                        name: string
                      from:
                        - name: Marie Curie
                          email: marie@radioactivity.com
                      id: string
                      object: message
                      reply_to:
                        - email: skwolek@fibers.com
                          name: Stephanie Kwolek
                      snippet: string
                      starred: true
                      subject: string
                      thread_id: string
                      to:
                        - email: dorothy@spacetech.com
                          name: Dorothy Vaughan
                      unread: true
                      labels:
                        - display_name: Important
                          id: '{label_id}'
                          name: important
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-messages
      description: >
        Returns all messages. Use the query parameters to filter the data.
        Messages return with the most recent message first.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |
            curl --request GET \
              --url 'https://api.nylas.com/messages' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <ACCESS_TOKEN>' \
              --header 'Content-Type: application/json'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Return all messages found in the user's inbox
            nylas.messages.all()

            # Return messages that are filtered by specified arguments
            nylas.messages.where(to='swag@nylas.com')
            # Available filters: subject, to, from_, cc, bcc, in_, unread,
            # starred, filename, thread_id, received_before, received_after

            # Use offset, and limit to paginate the results
            nylas.messages.where(limit=10, offset=5)

            # Expanded view returns additional header information (see below)
            nylas.messages.where(view='expanded')

            # Return all messages that meet a specified search criteria
            nylas.messages.search('swag@nylas.com')

            # Return the most recent message
            message = nylas.messages.first()


            # The following attributes are available for the message object
            message.id
            message.object
            message.account_id
            message.thread_id
            message.subject
            message.from_
            message.to
            message.cc
            message.bcc
            message.date
            message.unread
            message.starred
            message.snippet
            message.body
            message.files
            message.events
            message.folder
            message.labels
            message.received_at

            # These are available in expanded view only.
            message.headers['Message-Id']
            message.headers['References']
            message.headers['In-Reply-To']
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Return all messages found in the user's inbox
            nylas.messages

            # Return messages that are filtered by specified arguments
            nylas.messages.where(to: 'swag@nylas.com')
            # Available filters: subject, to, from, cc, bcc, in, unread,
            # starred, filename, thread_id, received_before, received_after

            # Use offset, and limit to paginate the results
            nylas.messages.limit(10).offset(5)

            # Expanded view returns additional header information (see below)
            nylas.messages.where(view: 'expanded')

            # Return all messages that meet a specified search criteria
            nylas.messages.search('swag@nylas.com')

            # Return the most recent message
            message = nylas.messages.first


            # The following attributes are available for the message object
            message.id
            message.object
            message.account_id
            message.thread_id
            message.subject
            message.from
            message.to
            message.cc
            message.bcc
            message.date
            message.unread
            message.starred
            message.snippet
            message.body
            message.files
            message.events
            message.folder
            message.labels
            message.received_date

            # These are available in expanded view only.
            message.headers.message_id
            message.headers.references
            message.headers.in_reply_to
        - lang: js
          label: Node.js SDK
          source: >-
            // Get all messages found in the user's inbox

            nylas.messages.list().then(messages => console.log(messages));


            // Get messages that are filtered by specified arguments

            nylas.messages.list({to: 'swag@nylas.com'}).then(resp =>
            console.log(resp));

            // Available filters: subject, to, from, cc, bcc, in, unread,

            // starred, filename, last_message_before, last_message_after,
            started_before, started_after


            // Use offset and limit to control pagination

            nylas.messages.list({limit: 5}).then(messages =>
            console.log(messages));


            // Expanded view returns additional header information (see below)

            nylas.messages.list({view: 'expanded'}).then(resp =>
            console.log(resp));


            // Get all messages that meet a specified search criteria

            nylas.messages.search('Debrief').then(messages =>
            console.log(messages));


            // The following attributes are available for the message object

            message.id

            message.object

            message.accountId

            message.threadId

            message.subject

            message.from

            message.to

            message.replyTo

            message.cc

            message.bcc

            message.date

            message.unread

            message.starred

            message.snippet

            message.body

            message.files

            message.events

            message.folder

            message.labels


            // These are available in expanded view only.

            message.headers['Message-Id']

            message.headers['References']

            message.headers['In-Reply-To']
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Message;
            import com.nylas.MessageQuery;
            import com.nylas.Messages;

            public class NylasExamples {
                public static void getMessagesExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Messages messages = account.messages();
                    
                    // Return all messages found in the user's inbox 
                    messages.list();
                    
                    // Return messages that are filtered by specified arguments
                    // Available Filters: anyEmail, bcc, cc, filename, 
                    // from, hasAttachment, in, receivedAfter, receivedBefore, 
                    // starred, subject, threadId, to, unread
                    messages.list(new MessageQuery().to("swag@nylas.com"));
                    
                    // Use offset, and limit to control pagination
                    messages.list(new MessageQuery().limit(10).offset(10));
                    
                    // Return all messages that meet a specified search criteria
                    messages.search("swag@nylas.com");
                    
                    // Return the most recent message
                    Message message = messages.list(new MessageQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the message object
                    message.getSubject();
                    message.getSnippet();
                    message.getBody();
                    message.getFiles();
                    message.getFrom();
                    message.getTo();
                    message.getCc();
                    message.getBcc();
                    message.getUnread();
                    message.getDate();
                    message.getLabels(); // Gmail accounts only
                    message.getFolder(); // All providers other than Gmail
                    message.getReplyTo();
                    message.getAccountId();
                    message.getObjectType();
                    message.getId();
                    message.getSnippet();
                    message.getStarred();
                    message.getThreadId();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/view'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/subject'
        - $ref: '#/components/parameters/any_email'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/cc'
        - $ref: '#/components/parameters/bcc'
        - $ref: '#/components/parameters/in'
        - $ref: '#/components/parameters/unread'
        - $ref: '#/components/parameters/starred'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/thread_id'
        - $ref: '#/components/parameters/recieved_before'
        - $ref: '#/components/parameters/recieved_after'
        - $ref: '#/components/parameters/has_attachment'
  '/messages/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of the message
    get:
      summary: Return a Message
      tags:
        - Messages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Messages'
                  - $ref: '#/components/schemas/Messages'
              examples:
                ReturnAMessageResponse:
                  $ref: '#/components/examples/Return_Message_Object'
                Multiple Messages Response:
                  $ref: '#/components/examples/Return_Messages_Array'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-messages-id
      security:
        - ACCESS_TOKEN: []
      parameters:
        - schema:
            type: string
            default: application/json
            enum:
              - message/rfc822
              - application/json
          in: header
          name: Accept
          description: >-
            Set the accept header to `message/rfc822`to return the raw message
            contents.
          required: true
      description: "Returns a message by ID.\n\n\n**Return Multiple Messages**\n\nThis endpoint also accepts a comma seperated list of multiple messages. \n\n```bash\ncurl --request GET \\\n  --url 'https://api.nylas.com/messages/<MESSAGE_ID>,<MESSAGE_ID>,<MESSAGE_ID>' \\\n  --header 'Accept: application/json' \\\n  --header 'authorization: Bearer <NYLAS_ACCESS_TOKEN>'\n```\n\n\n**Raw Message Contents**\n\nYou can also return the raw message content by setting the Accept header to `message/rfc822`. This will return the message in [RFC 2822 format](https://www.ietf.org/rfc/rfc2822.txt), including all MIME body subtypes and attachments.\n\n```bash\ncurl -X GET 'https://api.nylas.com/messages/<MESSAGE_ID>' \\\n-H 'Accept: message/rfc822' \\\n-H 'Authorization: Bearer <NYLAS_ACCESS_TOKEN>'\n```\n\n**Raw Message Contents Response**\n\n```\nX-Apparently-To: james****@yahoo.com; Wed, 15 May 2019 20:05:29 +0000\nReturn-Path: <accounts@returns.bulk.yahoo.com>\nReceived-SPF: pass (domain of returns.bulk.yahoo.com designates **.***.**.** as permitted sender)\nX-YMailISG: _O6mSNY****\nX-Originating-IP: [**.**.**.**]\nAuthentication-Results: ***.mail.ne1.yahoo.com \n header.i=@cc.yahoo-inc.com; header.s=fz2048; dkim=pass (ok)\nReceived: from 127.0.0.1  (EHLO ***.****.mail.gq1.yahoo.com) (**.***.**.**)\n  by ***.mail.ne1.yahoo.com with SMTPS; Wed, 15 May 2019 20:05:28 +0000\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cc.yahoo-inc.com; s=***; t=155****; bh=hXsR****; h=Date:From:Reply-To:To:Subject:From:Subject; b=LI39rKBTkhJNCz9Gl****A==\nReceived: from ****.***.mail.ne1.yahoo.com by ****.***.mail.gq1.yahoo.com with HTTP; Wed, 15 May 2019 20:05:27 +0000\nDate: Wed, 15 May 2019 20:05:23 +0000 (UTC)\nFrom: Yahoo <no-reply@cc.yahoo-inc.com>\nReply-To: Yahoo <no-reply@cc.yahoo-inc.com>\nTo: james****@yahoo.com\nMessage-ID: <1939****.****.15579****@****.member.gq1.yahoo.com>\nSubject: Welcome\nMIME-Version: 1.0\nContent-Type: text/html; charset=\"utf-8\"\nContent-Transfer-Encoding: 7bit\nContent-Length: 7282\n\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style type=\"text/css\">\n        html {\n        -webkit-text-size-adjust:none;\n        }\n        body {\n        width:100%;\n        margin:0 auto;\n        padding:0;\n        }\n        p {\n        width:280px;\n        line-height: 16px;\n        letter-spacing: 0.5px;\n        }\n    </style>\n    <title>Welcome</title>\n    </head>\n<body style=\"font-family:Helvetica Neue;\">\n\n\t...\n\n</body>\n</html>\n```"
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url https://api.nylas.com/messages/<MESSAGE_ID> \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <ACCESS_TOKEN>' \
              --header 'Content-Type: application/json'
              
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Replace {id} with the appropriate message id
            message = nylas.messages.get('{id}')

            # The following attributes are available for the message object
            message.id
            message.object
            message.account_id
            message.thread_id
            message.subject
            message.from_
            message.to
            message.cc
            message.bcc
            message.date
            message.unread
            message.starred
            message.snippet
            message.body
            message.files
            message.events
            message.folder
            message.labels
            message.received_at

            # These are available in expanded view only.
            message.headers['Message-Id']
            message.headers['References']
            message.headers['In-Reply-To']
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} with the appropriate message id
            message = nylas.messages.find('{id}')

            # The following attributes are available for the message object
            message.id
            message.object
            message.account_id
            message.thread_id
            message.subject
            message.from
            message.to
            message.cc
            message.bcc
            message.date
            message.unread
            message.starred
            message.snippet
            message.body
            message.files
            message.events
            message.folder
            message.labels
            message.received_date

            # These are available in expanded view only.
            message.headers.message_id
            message.headers.references
            message.headers.in_reply_to
        - lang: js
          label: Node.js SDK
          source: |-
            // Replace {id} with the appropriate message id
            nylas.messages.find('{id}').then(message =>{
                // The following attributes are available for the message object
                message.id
                message.object
                message.accountId
                message.threadId
                message.subject
                message.from
                message.to
                message.replyTo
                message.cc
                message.bcc
                message.date
                message.unread
                message.starred
                message.snippet
                message.body
                message.files
                message.events
                message.folder
                message.labels
              
                // These are available in expanded view only.
                message.headers['Message-Id']
                message.headers['References']
                message.headers['In-Reply-To']
              });
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Message;
            import com.nylas.Messages;

            public class NylasExamples {
                public static void getMessageExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Messages messages = account.messages();
                    
                    // Replace '{id}' with the appropriate value
                    Message message = messages.get("{id}");
                    
                    // The following attributes are available for the message object
                    message.getSubject();
                    message.getSnippet();
                    message.getBody();
                    message.getFiles();
                    message.getFrom();
                    message.getTo();
                    message.getCc();
                    message.getBcc();
                    message.getUnread();
                    message.getDate();
                    message.getLabels(); // Gmail accounts only
                    message.getFolder(); // All providers other than Gmail
                    message.getReplyTo();
                    message.getAccountId();
                    message.getObjectType();
                    message.getId();
                    message.getSnippet();
                    message.getStarred();
                    message.getThreadId();
                    }
            }
    put:
      summary: Update a Message
      tags:
        - Messages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
              examples:
                UpdateAMessageResponse:
                  value:
                    account_id: '{account_id}'
                    bcc:
                      - email: Albert Einstein
                        name: al@particletech.com
                    body: >-
                      <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
                      type=\"text/css\">\n html {\n
                      -webkit-text-size-adjust:none;\n }\n body {\n
                      width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
                      width:280px;\n line-height: 16px;\n letter-spacing:
                      0.5px;\n }\n </style>\n <title>Welcome  ...  </html>
                    cc:
                      - email: George Washington Carver
                        name: carver@agritech.com
                    date: 1557950729
                    events:
                      - {}
                    files:
                      - content_disposition: attachment
                        content_type: image/jpeg
                        filename: image.jpeg
                        id: '{image_id}'
                        size: 2648890
                    folder:
                      display_name: string
                      id: string
                      name: string
                    from:
                      - name: Marie Curie
                        email: marie@radioactivity.com
                    id: string
                    object: message
                    reply_to:
                      - email: skwolek@fibers.com
                        name: Stephanie Kwolek
                    snippet: string
                    starred: true
                    subject: string
                    thread_id: string
                    to:
                      - email: dorothy@spacetech.com
                        name: Dorothy Vaughan
                    unread: true
                    labels:
                      - display_name: Important
                        id: '{label_id}'
                        name: important
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-messages-id
      description: Update a message by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |
            curl --request PUT \
              --url https://api.nylas.com/messages/<MESSAGE_ID> \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <ACCESS_TOKEN>' \
              --header 'Content-Type: application/json' \
              --data '{
              "unread": true,
              "starred": true,
              "folder_id": "<FOLDER_ID>",
              "label_ids": [
                "<LABEL_ID>",
                "<LABEL_ID>"
              ]
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Replace '{id}' with the appropriate value

            message = nylas.messages.get('{id}')


            # Mark message read

            message.mark_as_read()


            # Mark message unread

            message.mark_as_unread()


            # Star a message

            message.star()


            # Unstar a message

            message.unstar()


            # Add a new label to a message (Gmail)

            message.add_label('{label_id}')


            # Remove a label from a message (Gmail)

            message.remove_label('{label_id}')


            # Batch update labels on a message (Gmail)

            message.update_labels(['{label_id}', '{another_label_id}'])


            # Move a message to a different folder (Non-Gmail)

            message.update_folder('{folder_id}')


            # All message changes must be saved to be synced to the third party
            provider

            message.save()
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Replace '{id}' with the appropriate value

            message = client.messages.find('{id}')


            # Mark message read

            message.update(unread: false)


            # Mark message unread

            message.update(unread: true)


            # Star a message

            message.update(starred: true)


            # Unstar a message

            message.update(starred: false)


            # Batch update labels on a message (Gmail)

            message.update(label_ids: ['label-id'])


            # All message changes must be saved to be synced to the third party
            provider

            message.save
        - lang: js
          label: Node.js SDK
          source: |-
            // Get a single message, by its id
            nylas.messages.find('{id}').then(message => {
              
                // mark as unread (false for read)
                message.unread = true;
                
                // mark as starred (false for unstarred)
                message.starred = true;
                
                // add a label to a message
                const existingLabel = nylas.labels.find('{labelId}');
                message.labels.push(existingLabel);
                
                // remove label
                message.labels = message.labels.filter(function(value, index, arr){
                return value.displayName != 'Important';
                });
                
                // save your updates to the email provider
                message.save();
              })
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import java.util.Arrays;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Messages;

            public class NylasExamples {
                public static void putMessageExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Messages messages = account.messages();
                
                    // Mark message read
                    messages.setUnread("{message_id}", false);
                
                    // Mark message unread
                    messages.setUnread("{message_id}", true);
                
                    // Star a message
                    messages.setStarred("{message_id}", true);
                
                    // Unstar a message
                    messages.setStarred("{message_id}", false);
                
                    // Update labels on a message (Gmail)
                    messages.setLabelIds("{message_id}", Arrays.asList("{label_id}", "{another_label_id}"));
                
                    // Move a message to a different folder (Non-Gmail)
                    messages.setFolderId("{message_id}", "{folder_id}");
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagesCreateUpdate'
            examples:
              UpdateAMessageRequest:
                value:
                  unread: true
                  starred: true
                  folder_id: string
                  label_ids:
                    - string
  /labels:
    get:
      summary: Return All Labels
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Labels'
              examples:
                ReturnAllLabelsResponse:
                  value:
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: All Mail
                      id: 12r72ur7rojisrmjp5xzau8xs
                      name: all
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Drafts
                      id: cqb6hnxsx4ihy864he04r5t38
                      name: drafts
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Spam
                      id: 93c69s6ekyqsnfq9ujiq9f63b
                      name: spam
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Important
                      id: 7x5r0j00n2ihffpdrg6kuh06h
                      name: important
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Inbox
                      id: 9jg5lbc2u95jeguxr0gxw1mp5
                      name: inbox
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Trash
                      id: 6p7mt7zoygqbgv0p6hnr3876o
                      name: trash
                      object: label
                    - account_id: aaz875kwuvxik6ku7pwkqp3ah
                      display_name: Sent Mail
                      id: ertg5obp5nvn43xtqe2e55en0
                      name: sent
                      object: label
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-labels
      description: Returns all labels.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            # Return all labels found in the user's inbox

            curl -X GET 'https://api.nylas.com/labels' \

            -H 'Authorization: Bearer ACCESS_TOKEN'


            # Use offset, and limit to paginate the results

            curl --location --request GET
            'https://api.nylas.com/labels?limit=2&offset=4' \

            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all labels found in the user's inbox
            nylas.labels.all()

            # Use offset, and limit to paginate the results
            nylas.labels.where(limit=2, offset=4)

            # Return the first label
            label = nylas.labels.first()

            # The following attributes are available for the label object
            label.display_name
            label.name
            label.object
            label.account_id
            label.id
        - lang: ruby
          label: Ruby SDK
          source: |-
            label = api.labels.last

            # Return all labels found in the user's inbox
            nylas.labels

            # Use offset, and limit to paginate the results
            nylas.labels.limit(2).offset(4)

            # Return the last label
            nylas.labels.last

            # Return the first label
            label = nylas.labels.first

            # The following attributes are available for the label object
            label.display_name
            label.name
            label.object
            label.account_id
            label.id
        - lang: js
          label: Node.js SDK
          source: >-
            // Return all labels found in the user's inbox

            nylas.labels.list().then(labels => console.log(labels));


            // Use offset, and limit to paginate the results

            nylas.labels.list({limit: 2, offset: 4}).then(labels =>
            console.log(labels));


            // Return the first label

            nylas.labels.first().then(label => console.log(label);


            // The following attributes are available for the label object

            label.displayName

            label.name

            label.object

            label.accountId

            label.id
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Label;
            import com.nylas.LabelQuery;
            import com.nylas.Labels;

            public class NylasExamples {
                public static void getLabelsExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Labels labels = account.labels();
                    
                    // Return all labels found in the user's inbox 
                    labels.list();
                    
                    // Use offset, and limit to control pagination
                    labels.list(new LabelQuery().limit(2).offset(4));
                    
                    // Return the first label
                    Label label = labels.list(new LabelQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the label object
                    label.getDisplayName();
                    label.getName();
                    label.getId();
                    label.getAccountId();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
    post:
      summary: Create a Label
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Labels'
              examples:
                CreateALabelResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    display_name: keep
                    id: eluc9ishugbda9egbmtkkc934
                    name: keep
                    object: label
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-labels
      description: Creates a new label.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST 'https://api.nylas.com/labels' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "display_name": "My New Label"
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Create a new label

            label = nylas.labels.create()


            # The following attributes can be set for a new label object

            label.display_name = "My Custom label"


            # Save the label to Nylas and the 3rd party provider

            # Note: label.display_name must be assigned a value before you can
            save the label

            label.save()
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Create a new label

            label = nylas.labels.create(display_name: "My Custom label")


            # The following attributes can be set for a new label object

            label.display_name = "My Custom label"


            # Save the label to Nylas and the 3rd party provider

            # Note: label.display_name must be assigned a value before you can
            save the label

            label.save
        - lang: js
          label: Node.js SDK
          source: >-
            // Create a new label

            label = nylas.labels.build();


            // The following attributes can be set for a new label object

            label.displayName = 'My Custom label';


            // Save the label to Nylas and the 3rd party provider

            // Note: label.displayName must be assigned a value before you can
            save the label

            label.save();
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Label;
            import com.nylas.LabelQuery;
            import com.nylas.Labels;

            public class NylasExamples {
                public static void postLabelExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Labels labels = account.labels();
                    
                    // Create a new label by specifying a display name
                    Label label = labels.create("My Custom Label");
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                display_name:
                  type: string
                  minLength: 1
              required:
                - display_name
            examples:
              CreateALabelRequest:
                value:
                  display_name: string
        description: ''
  '/labels/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Label ID
    get:
      summary: Return a Label
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Labels'
              examples:
                ReturnALabelResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    display_name: keep
                    id: eluc9ishugbda9egbmtkkc934
                    name: keep
                    object: label
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-labels-id
      description: Return a label by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/labels/{id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Replace {id} with the appropriate message id
            label = nylas.labels.get('{id}')


            # The following attributes are available for the label object
            label.display_name
            label.name
            label.object
            label.account_id
            label.id
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} with the appropriate message id
            label = nylas.labels.find('{id}')


            # The following attributes are available for the label object
            label.display_name
            label.name
            label.object
            label.account_id
            label.id
        - lang: js
          label: Node.js SDK
          source: |-
            // Replace {id} with the appropriate message id
            nylas.labels.find('{id}').then(label => console.log(label);

            // The following attributes are available for the label object
            label.displayName
            label.name
            label.object
            label.accountId
            label.id
        - lang: java
          label: Java SDK
          source: |-
            // Replace {id} with the appropriate message id
            nylas.labels.find('{id}').then(label => console.log(label);

            // The following attributes are available for the label object
            label.displayName
            label.name
            label.object
            label.accountId
            label.id
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    put:
      summary: Update a Label
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Labels'
              examples:
                UpdateALabelResponse:
                  value:
                    account_id: aaz875kwuvxik6ku7pwkqp3ah
                    display_name: keep
                    id: eluc9ishugbda9egbmtkkc934
                    name: keep
                    object: label
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-labels-id
      description: Updates an existing label.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X PUT 'https://api.nylas.com/labels/{label_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "display_name": "My New Label Renamed"
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Replace {id} with the appropriate message id

            label = nylas.labels.get('{id}')


            # The following attributes can be set for a new label object

            label.display_name = "My Custom label"


            # Save the label to Nylas and the 3rd party provider

            # Note: label.display_name must be assigned a value before you can
            save the label

            label.save()
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Replace {id} with the appropriate message id

            label = nylas.labels.find('{id}')


            # The following attributes can be set for a new label object

            label.display_name = "My Custom label"


            # Save the label to Nylas and the 3rd party provider

            # Note: label.display_name must be assigned a value before you can
            save the label

            label.save
        - lang: js
          label: Node.js SDK
          source: >-
            // Replace {id} with the appropriate message id

            let label;

            nylas.labels.find('{id}').then(res => label = res);


            // The following attributes can be set for a new label object

            label.displayName = "My Custom label"


            // Save the label to Nylas and the 3rd party provider

            // Note: label.displayName must be assigned a value before you can
            save the label

            label.save()
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Labels;

            public class NylasExamples {
                public static void putLabelExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Labels labels = account.labels();

                    // Update a label's display name by passing the label ID and the new display name.
                    labels.setDisplayName("{label_id}", "My Custom Label");
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                display_name:
                  type: string
                  minLength: 1
                  description: The human-readable name for the new label.
              required:
                - display_name
            examples:
              UpdateALabelRequest:
                value:
                  display_name: string
        description: ''
    delete:
      summary: Delete a Label
      tags:
        - Labels
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  job_status_id:
                    type: string
                    minLength: 1
                    description: >-
                      Use the ID to query the status of deleting the label. See
                      Job Status.
              examples:
                DeleteALabelResponse:
                  value:
                    job_status_id: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: delete-labels-id
      description: >-
        Deletes a label. A label can be deleted even if there are messages
        associated with the label.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE 'https://api.nylas.com/labels/{id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' 
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Delete labels by specifying the appropriate id
            nylas.labels.delete('{id}')
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} with the appropriate message id
            label = nylas.labels.find('{id}')

            # Delete label
            label.destroy
        - lang: js
          label: Node.js SDK
          source: |-
            // Delete labels by specifying the appropriate id
            nylas.labels.delete('{id}')
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Labels;

            public class NylasExamples {
                public static void deleteLabelsExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Labels labels = account.labels();

                    // Delete labels by specifying the appropriate id
                    labels.delete("{label_id}");
                    }
            }
      parameters:
        - $ref: '#/components/parameters/Accept'
  /drafts:
    get:
      summary: Return All Drafts
      tags:
        - Drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Drafts'
              examples:
                ReturnAllDraftsResponse:
                  $ref: '#/components/examples/Return_All_Drafts'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-drafts
      description: Returns all drafts.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/drafts/' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all drafts found for a user account
            nylas.drafts.all()

            # Use queries to filter results
            nylas.drafts.where(any_email="swag@nylas.com")
            # Available filters include to, cc, bcc, unread, starred, subject

            # Use offset, and limit to paginate the results
            nylas.drafts.where(limit=1, offset=2)

            draft = nylas.drafts.first()


            # The following attributes are available for the draft object
            draft.subject
            draft.to
            draft.cc
            draft.bcc
            draft.reply_to_message_id
            draft.files
            draft.body
            draft.date
            draft.reply_to
            draft.starred
            draft.thread_id
            draft.id
            draft.last_modified_at
            draft.snippet
            draft.version
            draft.from_
            draft.account_id
            draft.object
            draft.unread
        - lang: ruby
          label: Ruby SDK
          source: draft = api.drafts.last
        - lang: js
          label: Node.js SDK
          source: >-
            const Nylas = require('nylas');

            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});

            const nylas = Nylas.with('access_token');


            // Get all drafts found in the user's account

            nylas.drafts.list().then(drafts => console.log(drafts));


            // Use queries to filter results

            // Available filters include to, cc, bcc, unread, starred, subject

            nylas.drafts.list({to: 'support@nylas.com'}).then(resp =>
            console.log(resp));


            // Use offset and limit to paginate the results

            nylas.drafts.list({limit: 10, offset: 100}).then(resp =>
            console.log(resp));


            // Get the first draft

            nylas.drafts.first().then(draft => console.log(draft));


            // The following attributes are available for the draft object

            draft.id

            draft.object

            draft.accountId

            draft.subject

            draft.from

            draft.replyTo

            draft.to

            draft.cc

            draft.bcc

            draft.date

            draft.threadId

            draft.snippet

            draft.body

            draft.unread

            draft.starred

            draft.files

            draft.events

            draft.labels

            draft.version

            draft.replyToMessageId
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Draft;
            import com.nylas.DraftQuery;
            import com.nylas.Drafts;

            public class NylasExamples {
              public static void getDraftsExample() throws IOException, RequestFailedException {
                NylasClient nylas = new NylasClient();
                NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                Drafts drafts = account.drafts();

                // Return all drafts found in the user's inbox 
                drafts.list();

                // Return drafts that are filtered by specified arguments
                drafts.list(new DraftQuery().to("swag@nylas.com"));
                // Available Filters: to, cc, bcc, unread, starred, subject

                // Use offset, and limit to control pagination
                drafts.list(new DraftQuery().limit(10).offset(10));

                // Return all drafts that meet a specified search criteria
                drafts.search("swag@nylas.com");

                // Return the most recent draft
                Draft draft = drafts.list(new DraftQuery().limit(1)).get(0);

                // The following attributes are available for the draft object
                draft.getSubject();
                draft.getSnippet();
                draft.getBody();
                draft.getFiles();
                draft.getFrom();
                draft.getTo();
                draft.getCc();
                draft.getBcc();
                draft.getUnread();
                draft.getDate();
                draft.getReplyToMessageId();
                draft.getVersion();
                draft.getLabels(); // Gmail accounts only
                draft.getFolder(); // All providers other than Gmail
                draft.getAccountId();
                draft.getObjectType();
                draft.getId();
                draft.getSnippet();
                draft.getStarred();
                draft.getThreadId();
              }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/subject'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/cc'
        - $ref: '#/components/parameters/bcc'
        - $ref: '#/components/parameters/any_email'
        - $ref: '#/components/parameters/started_before'
        - $ref: '#/components/parameters/started_after'
        - $ref: '#/components/parameters/last_message_before'
        - $ref: '#/components/parameters/last_message_after'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/in'
        - $ref: '#/components/parameters/thread_id'
        - $ref: '#/components/parameters/unread'
        - $ref: '#/components/parameters/starred'
        - $ref: '#/components/parameters/view'
        - $ref: '#/components/parameters/has_attachment'
    post:
      summary: Create a New Draft
      tags:
        - Drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnSingleDraft'
              examples:
                CreateNewDraftResponse:
                  $ref: '#/components/examples/Create_A_Draft_Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-drafts
      description: |
        Creates a new draft.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --location --request POST 'https://api.nylas.com/drafts/' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer <ACCESS_TOKEN>' \
            --data-raw '{
                "subject": "July offsite visit",
                "to": [
                    {
                        "name": "Dorothy Vaughan",
                        "email": "dorothy@spacetech.com"
                    }
                ],
                "cc": [],
                "bcc": [],
                "body":"Checking in to confirm the date and time. This email was sent using the Nylas email API. Visit https://nylas.com for details.",
                "reply_to": [
                    {
                        "name": "Katherine Johnson",
                        "email": "kat@spacetech.com"
                    }
                ],
                "file_ids": ["{file_id}"]
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Create a new draft object

            draft = nylas.drafts.create()


            draft.subject = "With Love, From Nylas"

            draft.to = [{'email': 'swag@nylas.com', 'name': 'My Nylas Friend'}]

            # You can also assign draft.cc, draft.bcc, and draft.from_ in the
            same manner

            draft.body = "This email was sent using the Nylas email API. Visit
            https://nylas.com for details."

            draft.reply_to = [{'email': 'you@example.com', 'name': 'Your Name'}]

            # Note: changing from_ to a different email address may cause
            deliverability issues

            draft.from_ = [{'email': 'you@example.com', 'name': 'Your Name'}]


            # Replace {id} with the appropriate id for a file that you want to
            attach to a draft

            file = nylas.files.get('{id}')


            # Attach a file to a draft

            draft.attach(file)


            # Remove a file attachment from a draft

            draft.detach(file)


            # You must save the draft for changes to take effect

            draft.save()

            # Note: Nylas saves all drafts, but not all providers

            # display the drafts on their user interface
        - lang: ruby
          label: Ruby SDK
          source: 'api.drafts.create(display_name: "My New Draft")'
        - lang: js
          label: Node.js SDK
          source: >-
            const Nylas = require('nylas');

            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});

            const nylas = Nylas.with('access_token');


            // Create a new draft object

            const draft = nylas.drafts.build({

            to: [{ name: 'Nylas Swag', email: 'swag@nylas.com' }],

            subject: 'With Love, From Nylas',

            body: 'This email was sent using the Nylas email API. Visit
            https://nylas.com for details.',

            files: [{ id: '{file_id}' }],

            replyToMessageId: '<message_id>'

            });

            // Save the draft to send it to Nylas

            draft.save()
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import java.util.Arrays;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Draft;
            import com.nylas.NameEmail;
            import com.nylas.File;

            public class NylasExamples {
                public static void postDraftExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    
                    // Create a new draft object
                    Draft draft = new Draft();
                    
                    draft.setSubject("With Love, From Nylas");
                    draft.setTo(Arrays.asList(new NameEmail("My Nylas Friend", "swag@nylas.com")));
                    // setCc(), setBcc(), work in the same manner as setTo().
                    draft.setBody("This email was sent using the Nylas email API. Visit https://nylas.com for details.");
                    draft.setReplyTo(new NameEmail("Your Name", "you@example.com"));
                    // Note: changing the from email address to somthing different may cause deliverability issues
                    draft.setFrom(new NameEmail("Your Name", "you@example.com"));
                    
                    // Replace {id} with the appropriate id for a file that you want to attach to a draft
                    File file = account.files().get("{id}");
                    
                    // Attach a file to a draft
                    draft.attach(file);
                    
                    // Remove a file attachment from a draft
                    draft.detach(file);
                    
                    // You must save the draft for changes to take effect
                    draft = account.drafts().save(draft);
                    // Note: Nylas saves all drafts, but not all providers
                    // display the drafts on their user interface
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftCreate'
            examples:
              CreateNewDraftRequest:
                $ref: '#/components/examples/Create_A_Draft_Request'
  '/drafts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of the draft.
    get:
      summary: Return a Draft
      tags:
        - Drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnSingleDraft'
              examples:
                ReturnADraftResponse:
                  $ref: '#/components/examples/Return_A_Draft_Response'
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-drafts-id
      description: Returns a draft by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/drafts/{id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Replace {id} with the appropriate draft id
            draft = nylas.drafts.get('{id}')


            # The following attributes are available for the draft object
            draft.subject
            draft.to
            draft.cc
            draft.bcc
            draft.reply_to_message_id
            draft.files
            draft.body
            draft.date
            draft.reply_to
            draft.starred
            draft.thread_id
            draft.id
            draft.last_modified_at
            draft.snippet
            draft.version
            draft.from_
            draft.account_id
            draft.object
            draft.unread
        - lang: ruby
          label: Ruby SDK
          source: draft = api.drafts.find(draft.id)
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');
            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});
            const nylas = Nylas.with('access_token');

            // Replace {id} with the appropriate draft id
            nylas.drafts.find('{id}').then(draft => console.log(draft));

            // The following attributes are available for the draft object
            draft.id
            draft.object
            draft.accountId
            draft.subject
            draft.from
            draft.replyTo
            draft.to
            draft.cc
            draft.bcc
            draft.date
            draft.threadId
            draft.snippet
            draft.body
            draft.unread
            draft.starred
            draft.files
            draft.events
            draft.labels
            draft.version
            draft.replyToMessageId
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Draft;

            public class NylasExamples {
                public static void getDraftExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    
                    // Replace '{id}' with the appropriate value
                    Draft draft = drafts.get("{id}");
                    
                    // The following attributes are available for the draft object
                    draft.getSubject();
                    draft.getSnippet();
                    draft.getBody();
                    draft.getFiles();
                    draft.getFrom();
                    draft.getTo();
                    draft.getCc();
                    draft.getBcc();
                    draft.getUnread();
                    draft.getDate();
                    draft.getLabels(); // Gmail accounts only
                    draft.getFolder(); // All providers other than Gmail
                    draft.getReplyTo();
                    draft.getAccountId();
                    draft.getObjectType();
                    draft.getId();
                    draft.getSnippet();
                    draft.getVersion();
                    draft.getStarred();
                    draft.getThreadId();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters: []
    put:
      summary: Update a Draft
      tags:
        - Drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnSingleDraft'
              examples:
                UpdateADraftResponse:
                  $ref: '#/components/examples/Update_A_Draft_Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-drafts-id
      description: >-
        Updates an existing draft by ID.



        The request body must contain the `version` of the draft you wish to
        update. Other fields are optional and will overwrite previous values.


        Updating a draft returns a draft object with the same `id` but different
        version. When submitting subsequent send or save actions, you must use
        this new version.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --location --request PUT 'https://api.nylas.com/drafts/{id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer <ACCESS_TOKEN>' \
            --data-raw '{
                "subject": "Revised, dinner on Friday?",
                "to": [
                    {
                        "name": "Dorothy Vaughan",
                        "email": "dorothy@spacetech.com"
                    }
                ],
                "cc": [],
                "bcc": [],
                "body": "<html><body>Let'\''s grab a bite to eat!</body></html>",
                "reply_to": [
                    {
                        "name": "Katherine Johnson",
                        "email": "kat@spacetech.com"
                    }
                ],
                "file_ids": ["{file_id}"],
                "version": 0
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Replace {id} with the appropriate draft id

            draft = nylas.drafts.get('{id}')


            draft.subject = "With Love, From Nylas"

            draft.to = [{'email': 'swag@nylas.com', 'name': 'My Nylas Friend'}]

            # You can also assign draft.cc, draft.bcc, and draft.from_ in the
            same manner

            draft.body = "This email was sent using the Nylas email API. Visit
            https://nylas.com for details."

            draft.reply_to = [{'email': 'you@example.com', 'name': 'Your Name'}]

            # Note: changing from_ to a different email address may cause
            deliverability issues

            draft.from_ = [{'email': 'you@example.com', 'name': 'Your Name'}]


            # Replace {id} with the appropriate id for a file that you want to
            attach to a draft

            file = nylas.files.get('{id}')


            # Attach a file to a draft

            draft.attach(file)


            # Remove a file attachment from a draft

            draft.detach(file)


            # You must save the draft for changes to take effect

            draft.save()

            # Note: Nylas saves all drafts, but not all providers display the
            drafts on their user interface
        - lang: ruby
          label: Ruby SDK
          source: |-
            draft_to_change = api.drafts.find("51si***")
            draft_to_change.update(display_name: "My Renamed Draft")
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');
            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});
            const nylas = Nylas.with('access_token');

            // You need a draft's id and its version to update it.
            // All other fields are optional
            const draft = nylas.drafts.build({
            id: '{id}',
            version: 0
            });

            // Update any fields you want to change
            draft.subject = 'Updated subject: Hello World!';
            draft.replyToMessageId = '<message_id>'

            // Save the draft to persist your updates
            draft.save()
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import java.util.Arrays;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Draft;
            import com.nylas.NameEmail;
            import com.nylas.File;

            public class NylasExamples {
                public static void putDraftExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    
                    // Replace '{id}' with the appropriate value
                    Draft draft = account.drafts().get("{id}");
                    
                    draft.setSubject("With Love, From Nylas");
                    draft.setTo(Arrays.asList(new NameEmail("My Nylas Friend", "swag@nylas.com")));
                    /// setCc(), setBcc(), work in the same manner as setTo().
                    draft.setBody("This email was sent using the Nylas email API. Visit https://nylas.com for details.");
                    draft.setReplyTo(new NameEmail("Your Name", "you@example.com"));
                    // Note: changing the from email address to somthing different may cause deliverability issues
                    draft.setFrom(new NameEmail("Your Name", "you@example.com"));
                    
                    // Replace {id} with the appropriate id for a file that you want to attach to a draft
                    File file = account.files().get("{id}");
                    
                    // Attach a file to a draft
                    draft.attach(file);
                    
                    // Remove a file attachment from a draft
                    draft.detach(file);
                    
                    // You must save the draft for changes to take effect
                    draft = account.drafts().save(draft);
                    // Note: Nylas saves all drafts, but not all providers
                    // display the drafts on their user interface
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftUpdate'
            examples:
              UpdateADraftRequest:
                $ref: '#/components/examples/Update_A_Draft_Request'
    delete:
      summary: Delete a Draft
      tags:
        - Drafts
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: delete-drafts-id
      description: >-
        Deletes a draft by ID. The draft version must be specified otherwise it
        will return an error.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE 'https://api.nylas.com/drafts/{id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                    "version": 0
            }'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            draft = nylas.drafts.get("{id}")
            draft.delete()
        - lang: ruby
          label: Ruby SDK
          source: |-
            draft = api.drafts.find(draft.id)
            draft.destroy
        - lang: js
          label: Node.js SDK
          source: |-
            const Nylas = require('nylas');
            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});
            const nylas = Nylas.with('access_token');

            // Delete a draft (draft.version must be valid)
            const options = {
            item: draft,
            callback: optionalCallback
            }
            nylas.drafts.deleteItem(options);

            // Delete a draft by its id and version
            nylas.drafts.delete('{id}', { version: 0 }, optionalCallback);
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Drafts;

            public class NylasExamples {
                public static void deleteDraftExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Drafts drafts = account.drafts();

                    // Delete drafts by specifying the appropriate id
                    drafts.delete("{draft_id}");        
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                version:
                  type: number
                  description: Version of the draft that you are modifying.
              required:
                - version
            examples:
              DeleteADraftRequest:
                value:
                  version: 0
  /send:
    post:
      summary: Send a Message
      tags:
        - Sending
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
              examples:
                MessageResponse:
                  $ref: '#/components/examples/Return_Message_Object'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-send#drafts
      description: |-
        The send endpoint can send out mail in 3 ways:

        * Send an email draft
        * Send an email directly
        * Send raw MIME messages

        See [Sending](/docs/api/#tag--Sending) for more.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST 'https://api.nylas.com/send' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "draft_id": "{draft_id}",
                "version": 0
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Replace {id} with the appropriate draft id

            draft = nylas.drafts.get("{id}")

            draft.send()


            # The following attributes can be assigned to a draft object

            draft.subject = "With Love, From Nylas"

            draft.to = [{'email': 'swag@nylas.com', 'name': 'My Nylas Friend'}]

            # You can also assign draft.cc, draft.bcc, and draft.from_ in the
            same manner

            draft.body = "This email was sent using the Nylas email API. Visit
            https://nylas.com for details."

            draft.reply_to = [{'email': 'you@example.com', 'name': 'Your Name'}]

            # Note: changing from_ to a different email address may cause
            deliverability issues

            draft.from_ = [{'email': 'you@example.com', 'name': 'Your Name'}]
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Replace {id} with the appropriate draft id
            draft = api.drafts.find("{id}")
            draft.send!
        - lang: js
          label: Node.js SDK
          source: "// Replace {id} with the appropriate draft id\nnylas.drafts.find('{id}').then(draft => {\n\tdraft.send().then(resp => console.log(resp));\n});\n\n// The following attributes can be assigned to a draft object\ndraft.subject = \"With Love, From Nylas\"\ndraft.to = [{'email': 'swag@nylas.com', 'name': 'My Nylas Friend'}]\n// You can also assign draft.cc, draft.bcc, and draft.from_ in the same manner\ndraft.body = \"This email was sent using the Nylas email API. Visit https://nylas.com for details.\"\ndraft.replyTo = [{'email': 'you@example.com', 'name': 'Your Name'}]\n// Note: changing from to a different email address may cause deliverability issues\ndraft.from = [{'email': 'you@example.com', 'name': 'Your Name'}]"
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import java.util.Arrays;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Draft;
            import com.nylas.File;
            import com.nylas.NameEmail;

            public class NylasExamples {
                public static void sendDraftExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");

                    // Create a new draft object
                    Draft newDraft = new Draft();

                    // Or, you can get an existing Draft by specifying its ID
                    Draft draft = account.drafts().get("{id}");

                    draft.setSubject("With Love, From Nylas");
                    draft.setTo(Arrays.asList(new NameEmail("My Nylas Friend", "swag@nylas.com")));
                    // You can also assign cc, draft.bcc, and draft.from_ in the same manner
                    draft.setBody("This email was sent using the Nylas email API. Visit https://nylas.com for details.");
                    draft.setReplyTo(new NameEmail("Your Name", "you@example.com"));
                    // Note: changing the from email address to somthing different may cause deliverability issues
                    draft.setFrom(new NameEmail("Your Name", "you@example.com"));

                    // Replace {id} with the appropriate id for a file that you want to attach to a draft
                    File file = account.files().get("{id}");

                    // Attach a file to a draft
                    draft.attach(file);

                    // Remove a file attachment from a draft
                    draft.detach(file);

                    // You must save the draft for changes to take effect
                    draft = account.drafts().save(draft);
                    // Note: Nylas saves all drafts, but not all providers
                    // display the drafts on their user interface

                    // Finally, send the draft
                    account.drafts().send(draft);
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/DraftSend'
                - $ref: '#/components/schemas/DraftCreate'
            examples:
              SendDirectly:
                $ref: '#/components/examples/send-directly'
              SendADraft:
                $ref: '#/components/examples/send_a_draft'
          text/plain:
            schema:
              type: object
            examples:
              Raw Mime:
                value: >-
                  curl -X POST 'https://api.nylas.com/send' \

                  -H 'Content-Type: message/rfc822' \

                  -H 'Authorization: Bearer ACCESS_TOKEN' \

                  -d 'MIME-Version: 1.0

                  Content-Type: text/plain; charset=UTF-8

                  In-Reply-To: <84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>

                  References: <84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>

                  Subject: With Love, From Nylas

                  From: You <you@example.com>

                  To: My Nylas Friend <swag@nylas.com>


                  This email was sent via raw MIME using the Nylas email API.
                  Visit https://nylas.com for details.'
        description: ''
    parameters: []
  /files:
    get:
      summary: Return All Files
      tags:
        - Files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Files'
              examples:
                ReturnAllFilesResponse:
                  value:
                    - account_id: 43jf3n4es3***
                      content_type: image/jpeg
                      filename: image.jpg
                      id: 9etjh6talp***
                      object: file
                      size: 72379
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-files
      description: Returns information about each files metadata.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            # Return all file attachments found in the user's account
            curl -X GET 'https://api.nylas.com/files/' \
            -H 'Authorization: Bearer ACCESS_TOKEN' 

            # Use limit and offset to control pagination
            curl -X GET 'https://api.nylas.com/files/?limit=5&offset=10' \
            -H 'Authorization: Bearer ACCESS_TOKEN' 

            # Available filters: content_type, message_id, filename
            curl -X GET 'https://api.nylas.com/files?content_type=image/jpeg' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all file attachments found in the user's account
            nylas.files.all()

            # Use limit and offset to control pagination
            nylas.files.where(limit=5, offset=10)

            # .where() returns files that are filtered by specified arguments
            # Available filters: content_type, message_id, filename
            file = nylas.files.where(content_type='application/pdf').first()
            # .first() returns the oldest file from the results of a query


            # The following attributes are available for the file object
            file.size
            file.account_id
            file.object
            file.filename
            file.content_type
            file.message_ids
            file.content_id
            file.id
        - lang: ruby
          label: Ruby SDK
          source: |-
            example_file = api.files.first

            # Listing files
            api.files.limit(2).map(&:to_h)
        - lang: js
          label: Node.js SDK
          source: >-
            // Return all file attachments found in the user's account

            nylas.files.list().then(files => console.log(files));


            // Use limit and offset to control pagination

            nylas.files.list({limit: 5, offset: 10}).then(files =>
            console.log(files));


            // .list() and .first() return files that are filtered by specified
            arguments

            // Available filters: contentType, messageId, filename

            nylas.files.first({content_type: 'application/pdf'}).then(file =>
            console.log(file));

            // .first() returns the oldest file from the results of a query



            // The following attributes are available for the file object

            file.id

            file.object

            file.accountId

            file.contentType

            file.size

            file.filename

            file.messageIds

            file.contentId

            file.contentDisposition
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.File;
            import com.nylas.FileQuery;
            import com.nylas.Files;

            public class NylasExamples {
                public static void getFilesExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Files files = account.files();
                    
                    // Return all files found in the user's inbox 
                    files.list();
                    
                    // Return files that are filtered by specified arguments
                    // Available Filters: contentType, messageId, filename
                    files.list(new FileQuery().filename("My File"));
                    
                    // Use offset, and limit to control pagination
                    files.list(new FileQuery().limit(5).offset(10));
                    
                    // Return the most recent file
                    File file = files.list(new FileQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the file object
                    file.getId();
                    file.getContentId();
                    file.getContentType();
                    file.getFilename();
                    file.getMessageIds();
                    file.getSize();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/message_id'
        - $ref: '#/components/parameters/content_type'
        - $ref: '#/components/parameters/view'
    post:
      summary: Upload a New File
      tags:
        - Files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Files'
              examples:
                UploadAFileResponse:
                  value:
                    - account_id: 43jf3n4es3***
                      content_type: image/jpeg
                      filename: image.jpg
                      id: 9etjh6talp***
                      object: file
                      size: 72379
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-files
      description: Uploads a new file. Uploaded files are valid for 7 days.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST 'https://api.nylas.com/files/' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            --form 'file=@{path_to_file}'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Create a new file with the stream interface for binary objects

            attachment = open('attachment.pdf', 'r')

            file = nylas.files.create()

            file.filename = 'attachment.pdf'

            file.stream = attachment

            # .save() saves the file to Nylas, file.id can then be used to
            attach the file to an email

            file.save()

            attachment.close()


            # Create a new file with the data interface for text objects

            file = nylas.files.create()

            file.filename = 'test.txt'

            file.data = "Hello World."

            file.save()
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Uploading a file

            api.files.create(file: File.open(File.expand_path(__FILE__),
            'r')).to_h
        - lang: js
          label: Node.js SDK
          source: |-
            fs.readFile(filePath, (err, data) => {
                f = nylas.files.build({
                  filename: filePath,
                  data: data,
                  contentType: 'text/plain',
                });
              
                f.upload((err, file) => {
                  // Create a draft and attach the file to it.
                  const draft = nylas.drafts.build({
                    subject: 'Ice Cream',
                    to: [{ email: 'helena@nylas.com' }],
                    body: 'Hey, find the file attached.',
                  });
              
                  draft.files = [file];
              
                  draft.send().then(message => {
                    console.log(`${message.id} was sent`);
                  });
                });
              });
              
              // Stream files from AWS
              const AWS = require('aws-sdk');
              const Nylas = require('nylas');
              
              Nylas.config({
                clientId: CLIENT_ID,
                clientSecret: CLIENT_SECRET,
              });
              
              const nylas = Nylas.with(ACCESS_TOKEN);
              
              var s3 = new AWS.S3();
              var s3Stream = s3.getObject({Bucket: s3bucket, Key: s3key}).createReadStream();
              
              var newFile = nylas.files.build({filename: 'newfileyay.jpg', data: s3Stream, contentType: 'image/jpeg', size: s3size});
              newFile.upload();
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import java.nio.file.Paths;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Files;
            import com.nylas.File;

            public class NylasExamples {
                public static void postFileExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Files files = account.files();

                    byte[] myFile = java.nio.file.Files.readAllBytes(Paths.get("/path/to/myFile.pdf"));
                    File upload = files.upload("My Upload", "application/pdf", myFile);
                    System.out.println(upload);
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: The file to upload. Upload size limit is ~25 MB.
                  format: binary
            examples: {}
  '/files/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The file ID.
    get:
      summary: Returns a File
      tags:
        - Files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Files'
              examples:
                ReturnsAFileResponse:
                  value:
                    account_id: 43jf3n4es3***
                    content_type: image/jpeg
                    filename: image.jpg
                    id: 9etjh6talp***
                    object: file
                    size: 72379
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-files-id
      description: Returns file metadata by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/files/{id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Replace {id} with the appropriate file id
            file = nylas.files.get('{id}')

            # The following attributes are available for the file object
            file.size
            file.account_id
            file.object
            file.filename
            file.content_type
            file.message_ids
            file.content_id
            file.id
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Retrieving file metadata
            example_file = api.files.first
            api.files.find(example_file.id).to_h
        - lang: js
          label: Node.js SDK
          source: |-
            // Replace {id} with the appropriate file id
            nylas.files.find('{id}').then(file => console.log(file));

            // The following attributes are available for the file object
            file.id
            file.object
            file.accountId
            file.contentType
            file.size
            file.filename
            file.messageIds
            file.contentId
            file.contentDisposition
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.File;
            import com.nylas.Files;

            public class NylasExamples {
                public static void getFileExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Files files = account.files();
                    
                    // Get a file by specifying the file ID       
                    File file = files.get("FILE_ID");
                    
                    // The following attributes are available for the file object
                    file.getId();
                    file.getContentId();
                    file.getContentType();
                    file.getFilename();
                    file.getMessageIds();
                    file.getSize();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    delete:
      summary: Delete a File
      tags:
        - Files
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: delete-files-id
      description: Deletes a file by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE 'https://api.nylas.com/files/{id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' 
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Replace {id} with the appropriate file id
            nylas.files.delete('{id}')

            # Note: Only files that have been uploaded via Nylas can be deleted.
        - lang: ruby
          label: Ruby SDK
          source: '# Not supported'
        - lang: js
          label: Node.js SDK
          source: >-
            // Replace {id} with the appropriate file id

            nylas.files.delete('{id}')


            // Note: Only files that have been uploaded via Nylas can be
            deleted.
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Files;

            public class NylasExamples {
                public static void deleteFileExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Files files = account.files();
                    
                    files.delete("{fileId}");
                            
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  '/files/{id}/download':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The file ID
    get:
      summary: Download a File
      tags:
        - Files
      responses:
        '200':
          description: OK. Response will return file data for download.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-files-id-download
      description: Download a file.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/files/{id}/download' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Replace {id} with the appropriate file id
            file = nylas.files.get('{id}')

            # .download() returns the file itself.
            # Most files will be returned as a binary object
            file.download()
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Downloading a particular file

            example_file = api.files.first

            example_file.download


            # Downloading a particular file is cached. Notice the path didn't
            change

            example_file = api.files.first

            example_file.download


            # Re-downloading a file, notice the path does change.

            example_file = api.files.first

            example_file.download!
        - lang: js
          label: Node.js SDK
          source: |-
            // Replace {id} with the appropriate file id
            let file;
            nylas.files.find('{id}').then(res => file = res);

            // .download() returns the file itself.
            // Most files will be returned as a binary object
            file.download().then(res => console.log(res));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import java.nio.file.Paths;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.File;
            import com.nylas.Files;

            public class NylasExamples {
                public static void downloadFileExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Files files = account.files();
                    
                    File file = files.get("{fileId}");
                    
                    byte[] fileBytes = files.downloadBytes(file.getId());
                    java.nio.file.Files.write(Paths.get("/tmp/" + file.getFilename()), fileBytes);
                            
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  /calendars:
    get:
      summary: Return All Calendars
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Calendar'
              examples:
                ReturnAllCalendarsResponse:
                  value:
                    - account_id: 5tgncdmczat03416u7d6uypyi
                      description: Emailed events
                      id: 6d4d54fd53c54a70a2b98e36038d
                      is_primary: null
                      location: null
                      name: Emailed events
                      object: calendar
                      read_only: true
                      timezone: null
                    - account_id: 5tgncdmczat03416u7d6uypyi
                      description: null
                      id: fe51c4d8bedf45ec949bf1033c7
                      is_primary: true
                      location: null
                      name: tatiana.p@nylas.com
                      object: calendar
                      read_only: false
                      timezone: America/Chicago
                    - account_id: 5tgncdmczat03416u7d6uypyi
                      description: Holidays and Observances in United States
                      id: 6b30d4d8d3b54c26b460fdea4f
                      is_primary: false
                      location: null
                      name: Holidays in United States
                      object: calendar
                      read_only: true
                      timezone: America/Chicago
                    - account_id: 5tgncdmczat03416u7d6uypyi
                      description: null
                      id: ewubocwfw5g08w4xomydqsnf6c
                      is_primary: false
                      location: null
                      name: 'Owner: Thomas Alva Edison'
                      object: calendar
                      read_only: true
                      timezone: UTC
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-calendar
      description: Returns all calendars.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/calendars' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all calendars found in the user's account
            nylas.calendars.all()

            # Returns a count of the calendars the user account has
            nylas.calendars.where(view='count')
            # You can also provide view='id' to provide the calendar ids only.

            # Return the first calendar
            calendar = nylas.calendars.first()


            # The following attributes are available for the calendar object
            calendar.id
            calendar.object
            calendar.account_id
            calendar.name
            calendar.description
            calendar.read_only
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Return all calendars found in the user's account
            nylas.calendars

            # Return the ids of all calendars for a user account
            nylas.calendars.ids

            # Return the count of the calendars a user account has
            api.calendars.count

            # Return the first two calendars for the user account
            calendars.calendars.limit(2)

            # Return the first calendar
            calendar = nylas.calendars.first

            # The following attributes are available for the calendar object
            calendar.id
            calendar.object
            calendar.account_id
            calendar.name
            calendar.description
            calendar.read_only
        - lang: js
          label: Node.js SDK
          source: >-
            const Nylas = require('nylas');

            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});

            const nylas = Nylas.with('access_token');


            // Get all calendars found in the user's account

            nylas.calendars.list().then(calendars => console.log(calendars));


            // Get a count of all the users' calendars

            nylas.calendars.count().then(calendarCount =>
            console.log(calendarCount));


            // Get the first calendar

            nylas.calendars.first().then(calendar => console.log(calendar));


            // The following attributes are available for the Calendar object

            calendar.id

            calendar.object

            calendar.accountId

            calendar.name

            calendar.description

            calendar.readOnly
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Calendar;
            import com.nylas.CalendarQuery;
            import com.nylas.Calendars;

            public class NylasExamples {
                public static void getCalendarsExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Calendars calendars = account.calendars();
                    
                    // Return all calendars found for the user 
                    calendars.list();
                    
                    // Use offset, and limit to control pagination
                    calendars.list(new CalendarQuery().limit(2).offset(4));
                    
                    // Return the first calendar
                    Calendar calendar = calendars.list(new CalendarQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the calendar object
                    calendar.getId();
                    calendar.getAccountId();
                    calendar.getDescription();
                    calendar.getName();
                    calendar.isReadOnly();
                    }
            }
      parameters:
        - $ref: '#/components/parameters/view'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      security:
        - ACCESS_TOKEN: []
    post:
      summary: Create a Calendar
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
              examples:
                CreateACalendarResponse:
                  value:
                    account_id: eof2wrhqkl7kdwhy9hylpv9o9
                    description: Description of my new calendar
                    id: 8e570s302fdazx9zqwiuk9jqn
                    is_primary: true
                    job_status_id: 48pp6ijzrxpw9jors9ylnsxnf
                    location: Location description
                    name: My New Calendar
                    object: calendar
                    read_only: true
                    timezone: America/Los_Angeles
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-calendar
      description: >-
        Create a calendar.


        **Job Status**


        When making modifications to calendar objects, Nylas exposes a Job
        Status that represents whether the action has synced back to the
        provider or not.


        **Microsoft Calendars**

        - You can create. calendar by passing in `name` only.  Any other fields
        will return a 400 response.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST \
              --url https://api.nylas.com/calendars \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header 'authorization: Bearer <access_token>' \
              --data '{"name":"My New Calendar","description":"Description of my new calendar","location":"Location description","timezone":"America/Los_Angeles"}'
        - lang: py
          label: Python SDK
          source: |
            # Not yet supported
        - lang: ruby
          label: Ruby SDK
          source: '# Not yet supported'
        - lang: js
          label: Node.js SDK
          source: // Not yet supported
        - lang: java
          label: Java SDK
          source: // Not yet supported
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarCreate'
            examples:
              CreateCalendarRequest:
                value:
                  name: My New Calendar
                  description: Description of my new calendar
                  location: Location description
                  timezone: America/Los_Angeles
  '/calendars/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the calendar.
    get:
      summary: Return A Calendar
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
              examples:
                ReturnACalendarResponse:
                  value:
                    account_id: 5tgncdmczat03416u7d6uypyi
                    description: Emailed events
                    id: 6d4d54fd53c54a70a2b98e36038d
                    is_primary: null
                    location: null
                    name: Emailed events
                    object: calendar
                    read_only: true
                    timezone: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-calendar-id
      description: Returns a calendar by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/calendars/{calendar_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return a single calendar by specifying its id
            calendar = nylas.calendars.get('{id}')


            # The following attributes are available for the calendar object
            calendar.id
            calendar.object
            calendar.account_id
            calendar.name
            calendar.description
            calendar.read_only
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Return a single calendar by specifying its id
            calendar = nylas.calendars.find('{id}')

            # The following attributes are available for the calendar object
            calendar.id
            calendar.object
            calendar.account_id
            calendar.name
            calendar.description
            calendar.read_only
        - lang: js
          label: Node.js SDK
          source: >-
            const Nylas = require('nylas');

            Nylas.config({clientId: 'clientId', clientSecret: 'clientSecret'});

            const nylas = Nylas.with('access_token');


            // Get a calendar by its id

            nylas.calendars.find('calendarId').then(calendar =>
            console.log(calendar));


            // The following attributes are available for the Calendar object

            calendar.id

            calendar.object

            calendar.accountId

            calendar.name

            calendar.description

            calendar.readOnly
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Calendar;
            import com.nylas.Calendars;

            public class NylasExamples {
                public static void getCalendarExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Calendars calendars = account.calendars();
                    
                    // Get a calendar by specifying the calendar ID       
                    Calendar calendar = calendars.get("FILE_ID");
                    
                    // The following attributes are available for the calendar object
                    calendar.getId();
                    calendar.getAccountId();
                    calendar.getDescription();
                    calendar.getName();
                    calendar.isReadOnly();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    put:
      summary: Update A Calendar
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
              examples:
                UpdateACalendarResponse:
                  value:
                    account_id: eof2wrhqkl7kdwhy9hylpv9o9
                    description: Description of my new calendar
                    id: 8e570s302fdazx9zqwiuk9jqn
                    is_primary: true
                    job_status_id: 48pp6ijzrxpw9jors9ylnsxnf
                    location: Location description
                    name: My New Calendar
                    object: calendar
                    read_only: true
                    timezone: America/Los_Angeles
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-calendar-id
      description: >-
        Updates a calendar.


        **Microsoft Calendars**


        - Calendars can not be updated. You must delete, then create the
        calendar again.

        - EWS accounts are supported.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl -X PUT \\\n\"https://api.nylas.com/calendars\" \\\n-d '{\n\t\"description\":\"Updating the description my new calendar.\"\n}'"
        - lang: py
          label: Python SDK
          source: '# Not yet supported'
        - lang: ruby
          label: Ruby SDK
          source: '# Not yet supported'
        - lang: js
          label: Node.js SDK
          source: // Not yet supported
        - lang: java
          label: Java SDK
          source: // Not yet supported
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarCreate'
            examples:
              UpdateACalendarRequest:
                value:
                  name: My New Calendar
                  description: Description of my new calendar
                  location: Location description
                  timezone: America/Los_Angeles
    delete:
      summary: Delete a Calendar
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  job_status_id:
                    type: string
                    minLength: 1
                required:
                  - job_status_id
              examples:
                DeleteACalenderResponse:
                  value:
                    job_status_id: d38mgop88je0agkqrf03sw0sw
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: delete-calendar-id
      description: >-
        Deletes a calendar.


        Deletes an existing calendar identified by the specific calendar ID. You
        cannot delete a calendar where `is_primary: true`.
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE \
            "https://api.nylas.com/calendars/38mgop88je038mgop88je0/
        - lang: py
          label: Python SDK
          source: '# Not yet supported'
        - lang: ruby
          label: Ruby SDK
          source: '# Not yet supported'
        - lang: js
          label: Node.js SDK
          source: |
            // Not yet supported
        - lang: java
          label: Java SDK
          source: // Not yet supported
  /calendars/free-busy:
    post:
      summary: Calendar Free or Busy
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/FreeBusy'
              examples:
                CalendarFreeBusyResponse:
                  value:
                    - object: free_busy
                      email: swag@nylas.com
                      time_slots:
                        - object: time_slot
                          status: busy
                          start_time: 1409594400
                          end_time: 1409598000
                        - object: time_slot
                          status: busy
                          start_time: 1409598000
                          end_time: 1409599000
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-calendars-free-busy
      description: >-
        Check calendar free or busy status.


        The `/calendars/free-busy` endpoint lets you look for availability
        without accessing sensitive information such as titles, descriptions, or
        locations.



        **Feature Availability**


        * Not supported for iCloud

        * Supported for
          * Microsoft
          * Gmail
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl --location --request POST \"https://api.nylas.com/calendars/free-busy\" \\\n-H 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\t\"start_time\":\"1409594400\",\n\t\"end_time\":\"1409598000\",\n\t\"emails\": [\"carver@agritech.com\", \"skwolek@fibers.com\"]\n}'"
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            from datetime import datetime, timedelta


            # Create a client that has access an end user account

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Search for free-busy time slots over the next 24 hours.

            start_time = datetime.now()

            end_time = datetime.now() + timedelta(hours = 24)

            # Provide the email address to check, a start time, and an end time

            free_busy = nylas.free_busy("your_email@example.com", start_time,
            end_time)
        - lang: ruby
          label: Ruby SDK
          source: '# Not yet supported in the Nylas Ruby SDK'
        - lang: js
          label: Node.js SDK
          source: >-
            const Nylas = require('nylas');


            Nylas.config({
              clientId: CLIENT_ID,
              clientSecret: CLIENT_SECRET,
            });


            // Create a client that has access an end user account

            const nylas = Nylas.with(ACCESS_TOKEN);


            // Search for free-busy time slots over the next 24 hours.

            const startTime = Math.floor(Date.now() / 1000) // current unix
            timestamp in seconds

            const endTime = startTime + (60 * 60 * 24) // add 24 hours in
            seconds


            // Provide the email address to check, a start time, and an end time

            nylas.calendars.freeBusy(
              {
                startTime: startTime, 
                end_time: endTime, 
                emails: ['your_email@example.com']
              }).then(freeBusy => console.log(freeBusy));
        - lang: java
          label: Java SDK
          source: "import java.io.IOException;\nimport com.nylas.RequestFailedException;\nimport java.time.temporal.ChronoUnit;\nimport java.util.List;\nimport java.time.ZonedDateTime;\nimport com.nylas.Calendar;\nimport com.nylas.Calendars;\nimport com.nylas.NylasClient;\nimport com.nylas.NylasAccount;\nimport com.nylas.FreeBusy;\nimport java.time.Instant;\n\n\npublic class NylasExamples {\n    public static void freeBusyExample() throws IOException, RequestFailedException {\n        NylasClient client = new NylasClient();\n        NylasAccount account = client.account(\"{ACCESS_TOKEN}\");\n        Calendars calendars = account.calendars();\n      \n      \t// Provide the ID for an email address calendar\n        Calendar calendar = account.calendars().get(\"{calendarId}\");\n\t\t\t\t\n      \t// Check for free-busy information for the next 24 hours.\n        Instant start = ZonedDateTime.now().toInstant();\n        Instant end = start.plus(1, ChronoUnit.DAYS);\n        List<FreeBusy> freeBusyList = calendars.checkFreeBusy(\n          start, \n          end,\n          calendar.getName());\n        freeBusyList.stream().forEach((FreeBusy freeBusy) -> {\n            System.out.println(freeBusy);\n        });\n    }\n}"
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_time:
                  type: string
                  description: Unix timestamp for the beginning of the freebusy window.
                  example: '1409594400'
                end_time:
                  type: string
                  description: Unix timestamp for the end of the freebusy window.
                  example: '1409598000'
                emails:
                  type: array
                  description: >-
                    The email to check freebusy times for. You can only check
                    one email at a time.
                  items:
                    type: string
                    format: email
                    example: nyla@nylas.com
              required:
                - start_time
                - end_time
                - emails
            examples:
              CalendarFreeBusyRequest:
                value:
                  start_time: '1409594400'
                  end_time: '1409598000'
                  emails:
                    - nyla@nylas.com
        description: ''
  /events:
    get:
      summary: Return All Events
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
              examples:
                ReturnAllEventsResponse:
                  value:
                    - account_id: '{account_id}'
                      busy: true
                      calendar_id: '{calendar_id}'
                      description: Coffee meeting
                      ical_uid: '{ical_uid}'
                      id: '{event_id}'
                      location: string
                      message_id: string
                      object: event
                      owner: <some_email@email.com>
                      participants:
                        - name: Dorothy Vaughan
                          email: dorothy@spacetech.com
                          status: noreply
                          comment: string
                      read_only: true
                      title: 'Remote Event: Group Yoga Class'
                      when:
                        start_time: 1409594400
                        end_time: 1409598000
                        start_timezone: America/New_York
                        end_timezone: America/New_York
                      status: confirmed
                      conferencing:
                        provider: WebEx
                        details:
                          password: string
                          pin: string
                          url: string
                      job_status_id: string
                      recurrence:
                        rrule:
                          - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                        timezone: America/New_York
                      metadata:
                        hello: goodbye
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-events
      description: >-
        Returns all events.


        **Sorting**


        Events are always sorted by their start date.


        **Deleted and Canceled Events**


        For some providers we do not delete the event, we only cancel the event.
        For canceled events, we will still return a 200 OK when using the `/GET
        event` endpoints.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-

            # Return all events found for the user's account. Limited to 100
            results

            curl -X GET \
              https://api.nylas.com/events \
              -H 'Authorization: Bearer ACCESS_TOKEN' \

            # Return events that are filtered by specified arguments

            curl -X GET \
              'https://api.nylas.com/events?title=Birthday%20Party%21' \
              -H 'Authorization: Bearer ACCESS_TOKEN' 
            # Available filters: show_cancelled, event_id, description, title,
            location,

            # busy, starts_before, starts_after, ends_before, ends_after


            # Use offset, and limit to paginate the results

            curl -X GET \
              'https://api.nylas.com/events?limit=10&offset=5' \
              -H 'Authorization: Bearer ACCESS_TOKEN'

            # Expand recurring events into multiple event objects.

            curl -X GET \
              'https://api.nylas.com/events?expand_recurring=true' \
              -H 'Authorization: Bearer ACCESS_TOKEN'

            # Use special views like ids and count

            curl -X GET \
              'https://api.nylas.com/events/?view=ids' \
              -H 'Authorization: Bearer ACCESS_TOKEN' 

            curl -X GET \
              'https://api.nylas.com/events/?view=count' \
              -H 'Authorization: Bearer ACCESS_TOKEN' 
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Return all events found for the user's account

            nylas.events.all()


            # Return events that are filtered by specified arguments

            nylas.events.where(title='Birthday Party!')

            # Available filters: show_cancelled, event_id, description, title,
            location,

            # busy, starts_before, starts_after, ends_before, ends_after


            # Use offset, and limit to paginate the results

            nylas.events.where(limit=10, offset=5)


            # Expand recurring events into multiple event objects.

            nylas.events.where(expand_recurring=True)


            # Return the first event

            event = nylas.events.first()


            # The following attributes are available for the event object

            event.title

            event.description

            event.read_only

            event.id

            event.when

            event.status

            event.busy

            event.object

            event.message_id

            event.participants

            event.location

            event.owner

            event.calendar_id

            event.account_id
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Counting the events
            api.events.count

            # Retrieving a few events
            api.events.limit(2).map(&:to_h)

            # Expand recurring events into independent event objects
            api.events.expand_recurring.map(&:to_h)

            # Include cancelled events
            api.events.show_cancelled.map(&:to_h)
        - lang: js
          label: Node.js SDK
          source: >-
            // Return all events found for the user's account

            nylas.events.list().then(events => console.log(events));


            // Return events that are filtered by specified arguments

            nylas.events.list({title: 'Birthday Party!'}).then(events =>
            console.log(events));

            // Available filters: show_cancelled, event_id, calendar_id,
            description, title, 

            // location, starts_before, starts_after, ends_before, ends_after


            // Use offset, and limit to paginate the results

            nylas.events.list({limit: 10, offset: 5}).then(events =>
            console.log(events));


            // Expand recurring events into multiple event objects.

            nylas.events.list({expand_recurring: true}).then(events =>
            console.log(events));


            // Event metadata

            nylas.events.list({calendar_id: CALENDAR_ID,
            metadata_pair:{'event_type': 'gathering'}})


            // Return the first event

            nylas.events.first().then(event => console.log(event));


            // The following attributes are available for the event object

            event.id

            event.object

            event.accountId

            event.calendarId

            event.messageId

            event.title

            event.description

            event.owner

            event.participants

            event.readOnly

            event.location

            event.when

            event.start

            event.end

            event.busy

            event.status

            event.iCalUID

            event.metadata_pair

            event.metadata_key

            event.metadata_value
        - lang: java
          label: Java SDK
          source: |+
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Event;
            import com.nylas.EventQuery;
            import com.nylas.Events;

            public class NylasExamples {
                public static void getEventsExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Events events = account.events();
                    
                    // Return all events found in the user's inbox 
                    events.list();
                    
                    // Return events that are filtered by specified arguments
                    events.list(new EventQuery().title("Birthday Party"));
                    // Available Filters: description, endsAfter, endsBefore, 
                    // eventId, location, startsAfter, startsBefore, title
                    
                    // Use offset, and limit to control pagination
                    events.list(new EventQuery().limit(10).offset(10));
                    
                    // Return the first event from a calendar
                    Event event = events.list(new EventQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the event object
                    event.getId();
                    event.getBusy();
                    event.getCalendarId();
                    event.getDescription();
                    event.getLocation();
                    event.getMasterEventId();
                    event.getOriginalStartTime();
                    event.getOwner();
                    event.getParticipants();
                    event.getReadOnly();
                    event.getRecurrence();
                    event.getStatus();
                    event.getTitle();
                    }
            }

            //Query event metadata

            EventQuery query = new EventQuery()
                            .calendarId(calendarId)
                            .metadataKey("visitors", "parking")
                            .metadataValue("garden")
                            .metadataPair("event_category", "gathering");

      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/show_cancelled'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/event_id'
        - $ref: '#/components/parameters/calendar_id'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/starts_before'
        - $ref: '#/components/parameters/starts_after'
        - $ref: '#/components/parameters/ends_before'
        - $ref: '#/components/parameters/ends_after'
        - $ref: '#/components/parameters/metadata_key'
        - $ref: '#/components/parameters/metadata_value'
        - $ref: '#/components/parameters/expand_recurring'
        - $ref: '#/components/parameters/metadata_pair'
        - $ref: '#/components/parameters/busy'
    post:
      summary: Create an Event
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                CreateEventResponse:
                  value:
                    account_id: '{account_id}'
                    busy: true
                    calendar_id: '{calendar_id}'
                    description: Coffee meeting
                    ical_uid: '{ical_uid}'
                    id: '{event_id}'
                    location: string
                    message_id: string
                    object: event
                    owner: <some_email@email.com>
                    participants:
                      - name: Dorothy Vaughan
                        email: dorothy@spacetech.com
                        status: noreply
                        comment: string
                    read_only: true
                    title: 'Remote Event: Group Yoga Class'
                    when:
                      start_time: 1409594400
                      end_time: 1409598000
                      start_timezone: America/New_York
                      end_timezone: America/New_York
                    status: confirmed
                    conferencing:
                      provider: WebEx
                      details:
                        password: string
                        pin: string
                        url: string
                    job_status_id: string
                    recurrence:
                      rrule:
                        - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                      timezone: America/New_York
                MetadataResponse:
                  value:
                    account_id: '{account_id}'
                    busy: true
                    calendar_id: '{calendar_id}'
                    description: Let's Party!!!
                    ical_uid: null
                    id: 6ndts0aut32bzrfd9dmzma1fr
                    job_status_id: '{job_status_id}'
                    location: Roller Rink
                    message_id: null
                    metadata:
                      event_type: birthday
                      internal_event_id: b55469dk
                      number_of_guests: 55
                    object: event
                    owner: Albert Einstein <al@particletech.com>
                    participants:
                      - comment: null
                        email: tom@brightideas.com
                        name: Thomas Edison
                        status: noreply
                    read_only: false
                    status: confirmed
                    title: Birthday Party
                    when:
                      end_time: 1615334400
                      object: timespan
                      start_time: 1615330800
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-events
      description: >
        Creates an event, conference or add metadata.



        **iCloud Accounts**

        - For iCloud accounts, changing an event from recurring to non-recurring
        is not supported. You can create, update or delete recurring events
        information.

        - Setting `notify_participants` to false is not supported. iCloud will
        always



        **Notify Participants**


        - For certain Microsoft/Exchange/O365 accounts that are syncing via
        ActiveSync 16.0+, setting `notify_participants` to `false` will have no
        effect. By default, notifications will get sent no matter the value of
        `notify_participants`.

        - Setting `notify_participants` to `true` will always make the event
        show up as a meeting. If you'd like the event to show up as an
        appointment, set `notify_participants` to false and make sure the event
        does not have other participants than the appointment owner.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl --location --request POST 'https://api.nylas.com/events' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer  <ACCESS_TOKEN>' \\\n--data-raw '{\n      \"title\":\"Birthday Party\",\n      \"location\": \"Roller Rink\",\n      \"calendar_id\": \"<CALENDAR_ID>\",\n      \"status\": \"confirmed\",\n      \"busy\": true,\n      \"read_only\": false,\n      \"participants\": [\n          {\n              \"name\": \"Hedy Lamarr\",\n              \"email\": \"lamarr@player.com\"\n          },\n          {\n              \"name\": \"Tippi Hedren\",\n              \"email\": \"thedren@primetimep.org\"\n          }\n      ], \n      \"description\": \"Another trip around the sun\",\n          \"when\": { \"date\": \"2019-12-20\" }\n     }'\n\n// Recurring events\n\ncurl --location --request POST 'https://api.nylas.com/events' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer  <ACCESS_TOKEN>' \\\n--data-raw '{\n           \"title\":\"Casual Coffee Social\",\n           \"when\" : {\n                \"start_time\": 1576628762,\n                \"end_time\": 1576630562\n           },\n           \"location\": \"Coffee Shop\",\n           \"calendar_id\": \"<CALENDAR_ID>\",\n           \"participants\": [\n               {\n                   \"email\": \"skwolek@fibers.com\",\n                   \"name\": \"Stephanie Kwolek\"\n               }\n           ],\n           \"recurrence\": {\n               \"rrule\": [ \n                   \"RRULE:FREQ=WEEKLY;BYDAY=WE;INTERVAL=2\"\n               ],\n               \"timezone\": \"America/New_York\"\n           }\t\n     }'\n\n// metadata\n\ncurl --location --request POST 'https://api.nylas.com/events' \\\n--header 'Authorization: Bearer <ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"title\": \"Birthday Party\",\n    \"location\": \"Roller Rink\",\n    \"calendar_id\": \"<CALENDAR_ID>\",\n    \"status\": \"confirmed\",\n    \"busy\": true,\n    \"read_only\": false,\n    \"participants\": [\n        {\n            \"name\": \"Leonardo Da Vinci\",\n            \"email\": \"leo@ornitech.com\"\n        }\n    ],\n    \"description\": \"Party time!\",\n    \"when\": {\n        \"start_time\": \"1615330800\",\n        \"end_time\": \"1615334400\"\n    },\n    \"metadata\":{\n        \"number_of_guests\": \"55\",\n        \"event_type\": \"birthday\",\n        \"internal_event_id\": \"b52463al\"\n    }\n}'"
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            #Create a new event

            event = nylas.events.create()


            # .save()must be called to save the event to the third party
            provider

            # The event object must have values assigned to calendar_id and when
            before you can save it.

            event.save(notify_participants='true')

            # notify_participants='true' will send a notification email to

            # all email addresses specified in the participant subobject



            event.title = "Party!"

            event.location = "My House!"

            event.description = "Let's celebrate our calendar integration!!"

            event.busy = True


            # Provide the appropriate id for a calendar to add the event to a
            specific calendar

            event.calendar_id='{id}'


            # Participants are added as a list of dictionary objects

            # email is required, name is optional

            event.participants = [{"name": "My Nylas Friend", 'email':
            'swag@nylas.com'}]


            # The event date/time can be set in one of 3 ways.

            event.when = {"start_time": 1577829600, "end_time": 1577840400}

            event.when = {"time": 1577829600}

            event.when = {"date": "2020-01-01"}

            event.when = {"start_date": "2019-08-29", "end_date": "2019-09-01"}
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Creating an event

            example_event = api.events.last

            api.events.create(title: "A fun event!", location: "The Party Zone",
            calendar_id: calendar.id,
                                            when: { start_time: Time.now + 60, end_time: Time.now + 120 }).to_h
        - lang: js
          label: Node.js SDK
          source: >-
            //Create a new event

            let event = nylas.events.build();


            // .save()must be called to save the event to the third party
            provider

            // The event object must have values assigned to calendarId and when
            before you can save it.

            event.save({notify_participants: true});

            // {notify_participants: true} will send a notification email to

            // all email addresses specified in the participant subobject



            event.title = 'Party!';

            event.location = 'My House!';

            event.description = 'Let\'s celebrate our calendar integration!!';

            event.busy = true;


            // Provide the appropriate id for a calendar to add the event to a
            specific calendar

            event.calendarId='{id}';


            // Participants are added as a list of dictionary objects

            // email is required, name is optional

            event.participants = [{name: 'My Nylas Friend', email:
            'swag@nylas.com'}];


            // The event date/time can be set in one of 4 ways.

            event.when = {time: 1408875644};

            event.when = {start_time: 1577829600, end_time: 1577840400};

            event.when = {date: '2020-01-01'};

            event.when = {start_date: '2019-08-29', end_date: '2019-09-01'};


            // You may also set the date/time with the NodeSDK's start and end
            attributes.

            // start and end can be assigned to either a number or string

            // if start = end, the when parameter will be either suboject type
            date or time

            event.start = 1577829600;

            event.end = 1577840400;

            // OR

            event.start = '2019-08-29';

            event.end = '2019-09-01';



            // new event with metadata


            const event = nylas.events.build({
              title: 'New Years Party!',
              calendarId: CALENDAR_ID,
              when: { start_time: 1546290000, end_time: 1546300800 },
              participants: [{ email: 'swag@nylas.com', name: 'My Nylas Friend' }],
              location: 'My House!',
              metadata: {
                  'event_type': 'gathering'
              }
            });
        - lang: java
          label: Java SDK
          source: "import java.io.IOException;\nimport java.util.Arrays;\nimport com.nylas.RequestFailedException;\nimport com.nylas.NylasAccount;\nimport com.nylas.NylasClient;\nimport com.nylas.Event;\nimport com.nylas.Participant;\n\npublic class NylasExamples {\n    public static void postEventExample() throws IOException, RequestFailedException {\n        NylasClient nylas = new NylasClient();\n        NylasAccount account = nylas.account(\"{ACCESS_TOKEN}\");\n      \t// Create a new event object\n        // Provide the ID for a calendar that is readOnly = false\n        Event event = new Event(\"{CALENDAR_ID}\", when);\n                        \n        // The event \"when\" (date/time) can be set as one of 4 types.\n        Event.When when = null;\n        LocalDate today = LocalDate.now();\n        when = new Event.Date(today);\n        when = new Event.Datespan(today, today.plusDays(1));\n        Instant sixPmUtc = today.atTime(18, 0).toInstant(ZoneOffset.UTC);\n        when = new Event.Time(sixPmUtc);\n        when = new Event.Timespan(sixPmUtc, sixPmUtc.plus(1, ChronoUnit.HOURS));\n      \tevent.setWhen(when);\n      \n        event.setTitle(\"Party!\");\n        event.setLocation(\"My House!\");\n        event.setDescription(\"Let's celebrate our calendar integration!!\");\n        event.setBusy(true);\n        \n        // Participants are added as a list of Participant objects, \n        // email is required\n        // name, status, and comment are optional\n        event.setParticipants(\n          Arrays.asList(new Participant(\"swag@nylas.com\").name(\"My Nylas Friend\"))\n        );\n\n        // Use events().create() to save the event to the third party provider\n        // 2nd argument is a boolean to determine if a notification\n        // will be sent to all participants.\n        account.events().create(event, true);\n        \n    }\n}\n\n// Event Metadata\n// To create a new event with event metadata, you can create a Map<String, String> with a mapping of key-value pairs for the metadata\n\nEvent event = new Event(calendarId, new Timespan(startTime, endTime));\n///....\nMap<String, String> metadata = new HashMap<>();\nmetadata.put(\"event_category\", \"gathering\");\nevent.setMetadata(metadata);\n\n"
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/notify_participants'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateUpdate'
            examples:
              CreateEvent:
                value:
                  title: Birthday Party
                  calendar_id: 947kpa7ih22bfkeujpkfqn5bu
                  status: confirmed
                  busy: true
                  read_only: true
                  participants:
                    - name: Aristotle
                      email: aristotle@nylas.com
                      status: 'yes'
                  description: Come ready to skate
                  when:
                    object: time
                    time: 1408875644
                  location: Roller Rink
                  recurrence:
                    rrule:
                      - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                    timezone: America/New_York
              CreateConference:
                value:
                  title: Birthday Party
                  calendar_id: 947kpa7ih22bfkeujpkfqn5bu
                  busy: true
                  read_only: true
                  participants:
                    - name: Dorothy Vaughan
                      email: dorothy@spacetech.com
                      status: noreply
                  description: Come ready to skate
                  when:
                    time: 1408875644
                    timezone: America/New_York
                  location: Roller Rink
                  recurrence:
                    rrule:
                      - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                    timezone: America/New_York
                  conferencing:
                    provider: WebEx
                    details:
                      password: string
                      pin: string
                      url: string
                  reminder_minutes: '[20]'
                  reminder_method: popup
              CreateEventMetadata:
                value:
                  title: Birthday Party
                  location: Roller Rink
                  calendar_id: '{calendar_id}'
                  status: confirmed
                  busy: true
                  read_only: false
                  participants:
                    - name: Thomas Edison
                      email: tom@brightideas.com
                  description: Lets Party!!!
                  when:
                    start_time: '1615330800'
                    end_time: '1615334400'
                  metadata:
                    number_of_guests: '55'
                    event_type: birthday
                    internal_event_id: b55469dk
  '/events/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the event.
    get:
      summary: Return An Event
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                ReturnAnEventResponse:
                  value:
                    account_id: '{account_id}'
                    busy: true
                    calendar_id: '{calendar_id}'
                    description: Coffee meeting
                    ical_uid: '{ical_uid}'
                    id: '{event_id}'
                    location: string
                    message_id: string
                    object: event
                    owner: <some_email@email.com>
                    participants:
                      - name: Dorothy Vaughan
                        email: dorothy@spacetech.com
                        status: noreply
                        comment: string
                    read_only: true
                    title: 'Remote Event: Group Yoga Class'
                    when:
                      start_time: 1409594400
                      end_time: 1409598000
                      start_timezone: America/New_York
                      end_timezone: America/New_York
                    status: confirmed
                    conferencing:
                      provider: WebEx
                      details:
                        password: string
                        pin: string
                        url: string
                    job_status_id: string
                    recurrence:
                      rrule:
                        - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                      timezone: America/New_York
                    metadata:
                      your-key: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-events-id
      description: >-
        Returns an event by ID.


        **Deleted and Canceled Events**


        For some providers we do not delete the event, we only cancel the event.
        For canceled events, we will still return a 200 OK when using the `/GET
        event` endpoints.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            # Return an event by specifying its id
            curl -X GET \
              'https://api.nylas.com/events/{id}' \
              -H 'Authorization: Bearer ACCESS_TOKEN' 
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return an event by specifying its id
            event = nylas.events.get('{id}')

            # The following attributes are available for the event object
            event.title
            event.description
            event.read_only
            event.id
            event.when
            event.status
            event.busy
            event.object
            event.message_id
            event.participants
            event.location
            event.owner
            event.calendar_id
            event.account_id
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Retrieving a particular event
            example_event = api.events.last
            api.events.find(example_event.id).to_h
        - lang: js
          label: Node.js SDK
          source: |-
            // Return an event by specifying its id
            let event;
            nylas.events.find('{id}').then(resp => event = resp);

            // The following attributes are available for the event object
            event.id
            event.object
            event.accountId
            event.calendarId
            event.messageId
            event.title
            event.description
            event.owner
            event.participants
            event.readOnly
            event.location
            event.when
            event.start
            event.end
            event.busy
            event.status
            event.iCalUID
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Event;
            import com.nylas.Events;

            public class NylasExamples {
                public static void getEventExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Events events = account.events();
                    
                    // Return an event by specifying the ID
                    Event event = events.get("{eventId}");
                    
                    // The following attributes are available for the event object
                    event.getId();
                    event.getBusy();
                    event.getCalendarId();
                    event.getDescription();
                    event.getLocation();
                    event.getMasterEventId();
                    event.getOriginalStartTime();
                    event.getOwner();
                    event.getParticipants();
                    event.getReadOnly();
                    event.getRecurrence();
                    event.getStatus();
                    event.getTitle();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    put:
      summary: Update An Event
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                UpdateAnEventResponse:
                  value:
                    account_id: '{account_id}'
                    busy: true
                    calendar_id: '{calendar_id}'
                    description: Coffee meeting
                    ical_uid: '{ical_uid}'
                    id: '{event_id}'
                    location: string
                    message_id: string
                    object: event
                    owner: <some_email@email.com>
                    participants:
                      - name: Dorothy Vaughan
                        email: dorothy@spacetech.com
                        status: noreply
                        comment: string
                    read_only: true
                    title: 'Remote Event: Group Yoga Class'
                    when:
                      start_time: 1409594400
                      end_time: 1409598000
                      start_timezone: America/New_York
                      end_timezone: America/New_York
                    status: confirmed
                    conferencing:
                      provider: WebEx
                      details:
                        password: string
                        pin: string
                        url: string
                    job_status_id: string
                    recurrence:
                      rrule:
                        - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                      timezone: America/New_York
                    metadata:
                      your-key: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-events-id
      description: >-
        Updates an event, conference, or metadata.



        **Ready Only and Recurring Events**


        Updating and deleting an event is managed in a similar fashion to other
        endpoints with the restriction that `read_only` events cannot be updated
        and events cannot be updated or deleted from a `read_only` calendar.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-

            curl -X PUT 'https://api.nylas.com/events/{id}' \
              -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "title":"Birthday Party II",
                "location": "Roller Rink",
                "calendar_id": "{calendar_id}",
                "status": "confirmed",
                "busy": true,
                "read_only": false,
                "participants": [
                    {
                            "name": "Aristotle",
                        "email": "aristotle@nylas.com"
                    },
                            {
                                    "name": "Plato",
                                    "email": "plato@nylas.com"
                            }
                ], 
                "description": "aristotle'\''s birthday bash!",
                    "when": { "date": "2019-12-31" }
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # You can only modify events that are not ready only for the user

            event = nylas.events.where(read_only=False).first()


            # .save()must be called to save the event to the third party
            provider

            event.save(notify_participants='true')

            # notify_participants='true' will send a notification email to

            # all emails specified in the participant subobject



            event.title = "Party!"

            event.location = "My House!"

            event.description = "Let's celebrate our calendar integration!!"

            event.busy = True

            # Provide the appropriate id for a calendar to add the event to a
            specific calendar

            event.calendar_id='{id}'


            # Participants are added as a list of dictionary objects

            # email is required, name is optional

            event.participants = [{"name": "My Nylas Friend", 'email':
            'swag@nylas.com'}]


            # The event dat/time can be set in one of 3 ways.


            event.when = {"start_time": 1577829600, "end_time": 1577840400}

            event.when = {"time": 1577829600}

            event.when = {"date": "2020-01-01"}

            event.when = {"start_date": "2019-08-29", "end_date": "2019-09-01"}
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Updating an event
            example_event = api.events.last
            example_event.update(location: "Somewhere else!")
        - lang: js
          label: Node.js SDK
          source: >-
            // You can only modify events that are not read only for the user

            event = nylas.events.list({calendarId: 'non read only calendar id',
            limit: 1});


            // .save()must be called to save the event to the third party
            provider

            event.save({notify_participants: true});

            // {notify_participants: true} will send a notification email to

            // all emails specified in the participant subobject



            event.title = 'Party!';

            event.location = 'My House!';

            event.description = 'Lets celebrate our calendar integration!!';

            event.busy = true;


            // Provide the appropriate id for a calendar to add the event to a
            specific calendar

            event.calendarId='{id}';


            // Participants are added as a list of dictionary objects

            // email is required, name is optional

            event.participants = [{name: 'My Nylas Friend', email:
            'swag@nylas.com'}];


            // The event dat/time can be set in one of 3 ways.


            event.when = {time: 1408875644};

            event.when = {start_time: 1577829600, end_time: 1577840400};

            event.when = {date: '2020-01-01'};

            event.when = {start_date: '2019-08-29', end_date: '2019-09-01'};


            // You may also set the date/time with the NodeSDK's start and end
            attributes.

            // start and end can be assigned to either a number or string

            // if start = end, the when parameter will be either suboject type
            date or time

            event.start = 1577829600;

            event.end = 1577840400;

            // OR

            event.start = '2019-08-29';

            event.end = '2019-09-01';


            //metadata


            event.metadata:{'event_type','gathering'};
        - lang: java
          label: Java SDK
          source: "import java.io.IOException;\nimport java.util.Arrays;\nimport com.nylas.RequestFailedException;\nimport com.nylas.NylasAccount;\nimport com.nylas.NylasClient;\nimport com.nylas.Event;\nimport com.nylas.Participant;\n\npublic class NylasExamples {\n  public static void putEventExample() throws IOException, RequestFailedException {\n    NylasClient nylas = new NylasClient();\n    NylasAccount account = nylas.account(\"{ACCESS_TOKEN}\");\n\n    // Get an event by specifying its ID\n    Event event = account.events().get(\"EVENT_ID\");\n\n    event.setTitle(\"Party!\");\n    event.setLocation(\"My House!\");\n    event.setDescription(\"Let's celebrate our calendar integration!!\");\n    event.setBusy(true);\n\n    // The event \"when\" (date/time) can be set as one of 4 types.\n\n\t\tEvent.When when = null;\n\t\tLocalDate today = LocalDate.now();\n\t\twhen = new Event.Date(today);\n\t\twhen = new Event.Datespan(today, today.plusDays(1));\n\t\tInstant sixPmUtc = today.atTime(18, 0).toInstant(ZoneOffset.UTC);\n\t\twhen = new Event.Time(sixPmUtc);\n\t\twhen = new Event.Timespan(sixPmUtc, sixPmUtc.plus(1, ChronoUnit.HOURS));\n    event.setWhen(when);\n\n    // Participants are added as a list of Participant objects, \n    // email is required\n    // name, status, and comment are optional\n    event.setParticipants(\n      Arrays.asList(new Participant(\"swag@nylas.com\").name(\"My Nylas Friend\"))\n    );\n\n    // Update the event with the new values and notify all participants\n    account.events().update(event, true);\n  }\n}"
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/notify_participants'
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateUpdate'
            examples:
              UpdateAnEventRequest:
                value:
                  title: Birthday Party
                  calendar_id: 947kpa7ih22bfkeujpkfqn5bu
                  busy: true
                  read_only: true
                  participants:
                    - name: Dorothy Vaughan
                      email: dorothy@spacetech.com
                      status: noreply
                      comment: string
                  description: Come ready to skate
                  when:
                    time: 1408875644
                    timezone: America/New_York
                  location: Roller Rink
                  recurrence:
                    rrule:
                      - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                    timezone: America/New_York
                  conferencing:
                    provider: WebEx
                    details:
                      password: string
                      pin: string
                      url: string
                  reminder_minutes: '[20]'
                  reminder_method: popup
              UpdateAnEventMetadata:
                value:
                  title: Birthday Party
                  calendar_id: 947kpa7ih22bfkeujpkfqn5bu
                  busy: true
                  read_only: true
                  participants:
                    - name: Dorothy Vaughan
                      email: dorothy@spacetech.com
                      status: noreply
                      comment: null
                  description: Come ready to skate
                  when:
                    time: 1408875644
                    timezone: America/New_York
                  location: Roller Rink
                  recurrence:
                    rrule:
                      - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                    timezone: America/New_York
                  conferencing:
                    provider: WebEx
                    details:
                      password: string
                      pin: string
                      url: string
                  reminder_minutes: '[20]'
                  reminder_method: popup
                  metadata:
                    your-key: string
                    '12:45': event
                    times: '12:25'
    delete:
      summary: Delete An Event
      tags:
        - Events
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: delete-events-id
      description: >-
        Deletes an event.



        **Deleted and Canceled Events**


        For some providers we do not delete the event, we only cancel the event.
        For canceled events, we will still return a 200 OK when using the `/GET
        event` endpoints.
      parameters:
        - $ref: '#/components/parameters/notify_participants'
        - $ref: '#/components/parameters/Accept'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE 'https://api.nylas.com/events/{id}' \
              -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Delete an Event and notify all participants via email
            nylas.events.delete('{id}', notify_participants='true')
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Deleting an event
            example_event = api.events.last
            example_event.destroy
        - lang: js
          label: Node.js SDK
          source: |-
            // Delete an Event and notify all participants via email
            nylas.events.delete('{id}', {notify_participants: true});
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;

            public class NylasExamples {
                public static void deleteEventExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                                    
                    // Delete an event by specifying its ID and notify participants
                    account.events().delete("EVENT_ID", true);
                }
            }
      security:
        - ACCESS_TOKEN: []
  /send-rsvp:
    post:
      summary: Send RSVP
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                SendRSVPResponse:
                  value:
                    account_id: '{account_id}'
                    busy: true
                    calendar_id: '{calendar_id}'
                    description: Coffee meeting
                    ical_uid: '{ical_uid}'
                    id: '{event_id}'
                    location: string
                    message_id: string
                    object: event
                    owner: <some_email@email.com>
                    participants:
                      - name: Dorothy Vaughan
                        email: dorothy@spacetech.com
                        status: noreply
                    read_only: true
                    title: 'Remote Event: Group Yoga Class'
                    when:
                      start_time: 1409594400
                      end_time: 1409598000
                      start_timezone: America/New_York
                      end_timezone: America/New_York
                    status: confirmed
                    conferencing:
                      provider: WebEx
                      details:
                        password: string
                        pin: string
                        url: string
                    job_status_id: string
                    recurrence:
                      rrule:
                        - 'RRULE:FREQ=WEEKLY;BYDAY=MO'
                      timezone: America/New_York
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-send-rsvp
      description: >-
        The RSVP endpoint allows you to send attendance status updates to event
        organizers. This is only possible for events that appears on the
        **Emailed events**, which are calendar invitations.


        If an event on the calendar is imported from an iCal file, then the
        event can not be RSVP'd.
      parameters:
        - $ref: '#/components/parameters/Accept'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST 'https://api.nylas.com/send-rsvp/' \
              -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
                "event_id": "{event_id}",
                "status": "yes",
                "account_id": "{account_id}"
            }'
        - lang: py
          label: Python SDK
          source: >-
            # RSVP to an invite. Note that you can only RSVP to invites found in
            the

            # "Emailed events" calendar.

            event = nylas.events.get("{id}")

            # .rsvp() accepts a status and an optional message.

            # The message will be sent via email to all participants

            event.rsvp("maybe")

            # rsvp status must be one of yes, no, or maybe
        - lang: ruby
          label: Ruby SDK
          source: >-
            # RSVPing to an Event

            calendar = api.calendars.select { |c| c.name == "Emailed events"
            }.first

            event = calendar.events.first

            event.rsvp(:yes, notify_participants: true)

            event.rsvp(:no, notify_participants: true)

            event.rsvp(:maybe, notify_participants: true)
        - lang: js
          label: Node.js SDK
          source: >-
            // RSVP to an invite. Note that you can only RSVP to invites found
            in the

            // "Emailed events" calendar.

            nylas.events
              .find("{id}")
              // .rsvp() accepts a status and an optional message.
              // The message will be sent via email to all participants
              .then(event => event.rsvp('maybe'))
              // Possible rsvp statuses include yes, no, and maybe
              .then(event => console.log('RSVP sent!'));
        - lang: java
          label: Java SDK
          source: |-
            // The Java SDK is in beta and may experience breaking changes.
            // Nylas recommends it for testing purposes only.
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;

            public class NylasExamples {
                public static void sendRsvpExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    // RSVP to an invite. You can only RSVP to invites found in the "Emailed events" calendar.
                    // rsvp() accepts a status and an optional message
                    // status must be one of yes, no, or maybe
                    // If notifyParticipants is true, the message will be sent via email to all participants
                    account.events().rsvp("{eventId}", "maybe", "{accountId}", true);
                    System.out.println("RSVP sent!");
                }
            }
      security:
        - ACCESS_TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                event_id:
                  type: string
                  minLength: 1
                  description: >-
                    Sends a RSVP status update for the specified event ID. This
                    value must be a valid event ID from the “Emailed events”
                    calendar.
                status:
                  type: string
                  minLength: 1
                  description: Sends a RSVP status update with the specified status
                  enum:
                    - 'yes'
                    - 'no'
                    - maybe
                account_id:
                  type: string
                  minLength: 1
                  description: Sends a RSVP status update for the specified account ID.
              required:
                - event_id
                - status
                - account_id
            examples:
              SendRSVPRequest:
                value:
                  event_id: string
                  status: 'yes'
                  account_id: string
  /resources:
    get:
      summary: Return Room Resource Information
      tags:
        - Room Resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomResources'
              examples:
                RoomResourcesResponse:
                  value:
                    - object: room_resource
                      email: training-room-1A@office365.com
                      name: Training Room 1A
                      capacity: '8'
                      building: West Building
                      floor_name: '7'
                      floor_number: '7'
        '400':
          description: Bad Request
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-resources
      description: >-
        With the `/resources` endpoint, you can see which rooms a user can book
        within their GSuite or Office365 organization. To book an event in a
        room, including the room resource as a participant when creating the
        event with the `/events` endpoint.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url https://api.nylas.com/resources \
              --header 'Accept: application/json' \
              --header 'authorization: Bearer <access_token>'
        - lang: ruby
          label: Ruby SDK
          source: |
            #!/usr/bin/env ruby
            require 'nylas'

            # Initialize and connect to the Nylas client
            nylas = Nylas::API.new(
              app_id: CLIENT_ID,
              app_secret: CLIENT_SECRET,
              access_token: ACCESS_TOKEN
            )

            resources = nylas.room_resources
        - lang: java
          label: Java SDK
          source: |
            // Initialize and connect to the Nylas client
            NylasClient nylas = new NylasClient();
            NylasAccount account = nylas.account("ACCESS_TOKEN");

            RoomResources roomResource = account.roomResources();
            List<RoomResource> roomResourceList = roomResource.list();
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  /contacts:
    get:
      summary: Return All Contacts
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
              examples:
                ContactsResponse:
                  value:
                    - account_id: 5tgncdmczat02216u7d6uypyi
                      birthday: null
                      company_name: null
                      emails:
                        - email: tom@brightideas.com
                          type: other
                      given_name: Thomas
                      groups: []
                      id: 7e1b9vqhzyjn05y22sdoxl9ij
                      im_addresses: []
                      job_title: null
                      manager_name: null
                      middle_name: null
                      nickname: null
                      notes: null
                      object: contact
                      office_location: null
                      phone_numbers: []
                      physical_addresses: []
                      picture_url: >-
                        https://api.nylas.com/contacts/7vqhzyjn05y22sdoxl9ij/picture
                      source: address_book
                      suffix: null
                      surname: Edison
                      web_pages: []
                    - account_id: 5tgncdmczat02216u7d6uypyi
                      birthday: null
                      company_name: null
                      emails:
                        - email: alex@bell.com
                          type: other
                      given_name: Alexander
                      groups: []
                      id: 72yaplh01ry8udh6f0zc0ne2u
                      im_addresses: []
                      job_title: null
                      manager_name: null
                      middle_name: null
                      nickname: null
                      notes: null
                      object: contact
                      office_location: null
                      phone_numbers: []
                      physical_addresses: []
                      picture_url: >-
                        https://api.nylas.com/contacts/72yaplh01ry8udh6f0z/picture
                      source: address_book
                      suffix: null
                      surname: Graham Bell
                      web_pages: []
                    - account_id: 5tgncdmczat02216u7d6uypyi
                      birthday: null
                      company_name: null
                      emails:
                        - email: tesla@wireless.io
                          type: other
                      given_name: Nikola
                      groups: []
                      id: d9m4c9y8r96fm5cv4y8c5v1en
                      im_addresses: []
                      job_title: null
                      manager_name: null
                      middle_name: null
                      nickname: null
                      notes: null
                      object: contact
                      office_location: null
                      phone_numbers: []
                      physical_addresses: []
                      picture_url: >-
                        https://api.nylas.com/contacts/d9m4c96fm5cv4y8c5v1en/picture
                      source: address_book
                      suffix: null
                      surname: Tesla
                      web_pages: []
                    - account_id: 5tgncdmczat02216u7d6uypyi
                      birthday: null
                      company_name: null
                      emails:
                        - email: al@particletech.com
                          type: other
                      given_name: Albert
                      groups: []
                      id: eezj7pocafunk6e4cj0k8sd7o
                      im_addresses: []
                      job_title: null
                      manager_name: null
                      middle_name: null
                      nickname: null
                      notes: null
                      object: contact
                      office_location: null
                      phone_numbers: []
                      physical_addresses: []
                      picture_url: >-
                        https://api.nylas.com/contacts/eezj7unk6e4cj0k8sd7o/picture
                      source: address_book
                      suffix: null
                      surname: Einsten
                      web_pages: []
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-contacts
      description: >
        Returns all contacts.


        **Exact Matches**

        We currently only support filtering on exact value matches in the
        database. That means the strings you filter on must be the exact strings
        stored on the contact in the database.


        **Parameter Percent Encoding**

        It is important to note that parameter values must use
        [percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding) (also
        known as URL encoding).
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/contacts' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Return all contacts found in the user's contact book
            contacts = nylas.contacts.all()

            # Return contacts that are filtered by specified arguments
            contacts = nylas.contacts.where(email='swag@nylas.com')
            # Available filters: email, phone_number,
            # street_address, postal_code, state, and country

            # Use offset, and limit to control pagination of the results
            contacts = nylas.contacts.where(limit=10, offset=5)

            # Return the first contact
            contact = nylas.contacts.first()

            # The following attributes are available for the contact object
            contact.id
            contact.given_name
            contact.middle_name
            contact.surname
            contact.suffix
            contact.nickname
            contact.emails
            contact.physical_addresses
            contact.office_location
            contact.picture_url
            contact.account_id
            contact.company_name
            contact.notes
            contact.object
            contact.manager_name
            contact.im_addresses
            contact.web_pages
            contact.phone_numbers
            contact.job_title
            contact.birthday
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Return all contacts found in the user's contact book
            contacts = nylas.contacts

            # Return contacts that are filtered by specified arguments
            contacts = nylas.contacts.where(email: 'swag@nylas.com')
            # Available filters: email, phone_number,
            # street_address, postal_code, state, and country

            # Use offset, and limit to control pagination of the results
            contacts = nylas.contacts.limit(10).offset(5)

            # Return the first contact
            contact = nylas.contacts.first

            # The following attributes are available for the contact object
            contact.id
            contact.given_name
            contact.middle_name
            contact.surname
            contact.suffix
            contact.nickname
            contact.emails
            contact.physical_addresses
            contact.office_location
            contact.picture_url
            contact.account_id
            contact.company_name
            contact.notes
            contact.object
            contact.manager_name
            contact.im_addresses
            contact.web_pages
            contact.phone_numbers
            contact.job_title
            contact.birthday
            contact.groups
        - lang: js
          label: Node.js SDK
          source: >-
            // Return all contacts found in the user's contact book

            nylas.contacts.list().then(contacts => console.log(contacts));


            // Return contacts that are filtered by specified arguments

            nylas.contacts.list({email: 'swag@nylas.com'}).then(resp =>
            console.log(resp));

            // Available filters: email, phone_number,

            // street_address, postal_code, state, country, source, group,
            recurse


            // Use offset, and limit to control pagination of the results

            nylas.contacts.list({limit: 10, offset: 5}).then(contacts =>
            console.log(contacts));


            // Return the first contact

            nylas.contacts.first().then(contact => console.log(contact));


            // The following attributes are available for the contact object

            contact.id,

            contact.object,

            contact.accountId,

            contact.givenName,

            contact.middleName,

            contact.surname,

            contact.suffix,

            contact.nickname,

            contact.birthday,

            contact.companyName,

            contact.jobTitle,

            contact.managerName,

            contact.officeLocation,

            contact.notes,

            contact.pictureUrl,

            contact.emailAddresses,

            contact.imAddresses,

            contact.physicalAddresses,

            contact.phoneNumbers,

            contact.webPages,

            contact.groups,

            contact.source
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Contact;
            import com.nylas.ContactQuery;
            import com.nylas.Contacts;

            public class NylasExamples {
                public static void getContactsExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Contacts contacts = account.contacts();
                    
                    // Return all contacts found in the user's inbox 
                    contacts.list();
                    
                    // Return contacts that are filtered by specified arguments
                    contacts.list(new ContactQuery().email("swag@nylas.com"));
                    // Available filters: email, phoneNumber,
                    // streetAddress, postalCode, state, country, source, groupId, recurse
                    
                    // Use offset, and limit to control pagination
                    contacts.list(new ContactQuery().limit(10).offset(10));
                    
                    // Return the first contact
                    Contact contact = contacts.list(new ContactQuery().limit(1)).get(0);
                    
                    // The following attributes are available for the contact object
                    contact.getId();
                    contact.getBirthday();
                    contact.getCompanyName();
                    contact.getEmails();
                    contact.getGivenName();
                    contact.getGroups();
                    contact.getIMAddresses();
                    contact.getJobTitle();
                    contact.getManagerName();
                    contact.getMiddleName();
                    contact.getNickname();
                    contact.getNotes();
                    contact.getOfficeLocation();
                    contact.getPhoneNumbers();
                    contact.getPhysicalAddresses();
                    contact.getPictureUrl();
                    contact.getSource();
                    contact.getSuffix();
                    contact.getSurname();
                    contact.getWebPages();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/phone_number'
        - $ref: '#/components/parameters/street_address'
        - $ref: '#/components/parameters/postal_code'
        - $ref: '#/components/parameters/state_contacts'
        - $ref: '#/components/parameters/country'
        - $ref: '#/components/parameters/source'
        - $ref: '#/components/parameters/group'
        - $ref: '#/components/parameters/recurse'
    post:
      summary: Create a Contact
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                CreateAContactResponse:
                  value:
                    account_id: x2x2x2x2x2x2x2x2x2x2x2
                    birthday: '1960-12-31'
                    company_name: Nylas
                    emails:
                      - email: john@doe.com
                        type: work
                    given_name: John
                    id: z3z3z3z3z3z3z3z3z3z3z3
                    im_addresses:
                      - type: aim
                        im_address: myaimaddress
                    job_title: Software Engineer
                    manager_name: Bill the manager
                    middle_name: Jacob
                    nickname: JD
                    notes: Loves ramen
                    object: contact
                    office_location: 123 Main Street
                    phone_numbers:
                      - number: 1 800 123 4567
                        type: business
                    physical_addresses:
                      - format: string
                        type: work
                        street_address: string
                        city: string
                        postal_code: string
                        state: string
                        country: string
                    picture_url: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
                    suffix: string
                    surname: string
                    web_pages:
                      - type: profile
                        url: string
                    groups:
                      - id: string
                        object: contact_group
                        account_id: string
                        name: string
                        path: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-contacts
      description: Creates a contact.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST 'https://api.nylas.com/contacts' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
              "given_name": "My",
              "middle_name": "Nylas",
              "surname": "Friend",
              "birthday": "2014-06-01",
              "suffix": "API",
              "nickname": "Nylas",
              "company_name": "Nylas",
              "job_title": "Communications Platform",
              "manager_name": "Communications",
              "office_location": "SF",
              "notes": "Check out the Nylas Email, Calendar, and Contacts APIs",
              "emails": [{
                      "type": "personal",
                      "email": "swag@nylas.com"
              }
              ],
              "physical_addresses": [{
                      "format": "structured",
                      "type": "work",
                      "street_address": "944 Market St, 8th Floor",
                      "city": "San Francisco",
                      "postal_code": "94102",
                      "state": "CA",
                      "country": "USA"
              } ],
              "phone_numbers": [{
                              "type":"home",
                              "number": "123-123-1234"
                      }],
              "web_pages": [{
                              "type": "homepage",
                              "url":"https://nylas.com"
                      }],
              "im_addresses": [{
                      "type": "gtalk",
                      "im_address": "Nylas"
              }],
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            from datetime import datetime


            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Create a new contact

            contact = nylas.contacts.create()


            # Save the contact to Nylas and the 3rd party provider

            # This must be executed whenever you want to save changes.

            contact.save()


            # The following attributes can be modified for the contact object

            contact.given_name = 'My'

            contact.middle_name = 'Nylas'

            contact.surname = 'Friend'

            contact.suffix = 'API'

            contact.nickname = 'Nylas'

            contact.office_location = 'San Francisco'

            contact.company_name = 'Nylas'

            contact.notes = 'Check out the Nylas Email, Calendar, and Contacts
            APIs'

            contact.manager_name = 'Communications'

            contact.job_title = 'Communications Platform'

            contact.birthday = datetime(2014, 6, 1)


            # emails must be one of type personal, or work

            contact.emails['personal'] = ['swag@nylas.com']


            # physical_addresses must be one of type work, home, or other

            contact.physical_addresses['work'] = [{
                # physical addresses must be structured like the following
                'format': 'structured',
                'city': 'San Francisco',
                'country': 'US',
                'state': 'CA',
                'postal_code': '94102',
                'type': 'work',
                'street_address': '944 Market St, 8th Floor'}]

            # phone_numbers must be one of type

            # business, organization_main, mobile, assistant,

            # business_fax, home_fax, radio, car, home, or pager

            contact.phone_numbers['business'] = ['555 555-5555']


            # web_pages must be one of type homepage, profile, work, or blog

            contact.web_pages['homepage'] = ['https://nylas.com']


            # im_addresses must be one of type gtalk, aim,

            # yahoo, lync, skype, qq, msn, icc, or jabber

            contact.im_addresses['gtalk'] = 'Nylas'
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Create a new contact

            contact = nylas.contacts.create


            # Save the contact to Nylas and the 3rd party provider.

            # This must be executed whenever you want to save changes.

            contact.save


            # The following attributes can be modified for the contact object

            contact.given_name = 'My'

            contact.middle_name = 'Nylas'

            contact.surname = 'Friend'

            contact.suffix = 'API'

            contact.nickname = 'Nylas'

            contact.office_location = 'San Francisco'

            contact.company_name = 'Nylas'

            contact.notes = 'Check out the Nylas Email, Calendar, and Contacts
            APIs'

            contact.manager_name = 'Communications'

            contact.job_title = 'Communications Platform'

            contact.birthday = '2014-06-01'


            # emails must be one of type personal, or work

            contact.emails = [{type: 'personal', email: 'swag@nylas.com'}]


            # physical_addresses must be one of type work, home, or other

            contact.physical_addresses = [{
                # physical addresses must be structured like the following
                format: 'structured',
                city: 'San Francisco',
                country: 'US',
                state: 'CA',
                postal_code: '94102',
                type: 'work',
                street_address: '944 Market St, 8th Floor'}]

            # phone_numbers must be one of type

            # business, organization_main, mobile, assistant,

            # business_fax, home_fax, radio, car, home, or pager

            contact.phone_numbers = [{type: 'business', number: '555 555-5555'}]


            # web_pages must be one of type homepage, profile, work, or blog

            contact.web_pages = [{type: 'homepage', url: 'https://nylas.com'}]


            # im_addresses must be one of type gtalk, aim,

            # yahoo, lync, skype, qq, msn, icc, or jabber

            contact.im_addresses = [{type: 'gtalk', im_address: 'nylas'}]
        - lang: js
          label: Node.js SDK
          source: >-
            // Create a new contact

            const contact = nylas.contacts.build();


            // Save the contact to Nylas and the 3rd party provider

            // This must be executed whenever you want to save changes.

            contact.save();


            // The following attributes can be modified for the contact object

            contact.givenName = 'My'

            contact.middleName = 'Nylas'

            contact.surname = 'Friend'

            contact.suffix = 'API'

            contact.nickname = 'Nylas'

            contact.birthday = '2014-06-01'

            contact.companyName = 'Nylas'

            contact.jobTitle = 'Communications Platform'

            contact.managerName = 'Communications'

            contact.officeLocation = 'San Francisco'

            contact.notes = 'Check out the Nylas Email, Calendar, and Contacts
            APIs'


            // emails must be one of type personal, or work

            contact.emailAddresses = [{type: 'personal', email:
            'swag@nylas.com'}]};


            // physical_addresses must be one of type work, home, or other

            contact.physicalAddresses = [    
                  {'format': 'structured',
                  'city': 'San Francisco',
                  'country': 'US',
                  'state': 'CA',
                  'postalCode': '94102',
                  'type': 'work',
                  'streetAddress': '944 Market St, 8th Floor'}
            ];


            // phone_numbers must be one of type

            // business, organization_main, mobile, assistant,

            // business_fax, home_fax, radio, car, home, or pager

            contact.phoneNumbers = [{type: 'business', number: '555 555-5555'}];


            // web_pages must be one of type homepage, profile, work, or blog

            contact.webPages = [{type: 'homepage', url: 'https://nylas.com'}];


            // im_addresses must be one of type gtalk, aim,

            // yahoo, lync, skype, qq, msn, icc, or jabber

            contact.imAddresses = [{type: 'gtalk', imAddress: 'Nylas'}];
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Contact;
            import java.util.Arrays;

            public class NylasExamples {
                public static void postContactExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    
                    // Create a new contact
                    Contact contact = new Contact();
                    
                    // The following attributes can be modified for the contact object
                    contact.setGivenName("My");
                    contact.setMiddleName("Nylas");
                    contact.setSurname("Friend");
                    contact.setSuffix("API");
                    contact.setNickname("Nylas");
                    contact.setOfficeLocation("San Francisco");
                    contact.setCompanyName("Nylas");
                    contact.setNotes("Check out the Nylas Email, Calendar, and Contacts APIs");
                    contact.setManagerName("Communications");
                    contact.setJobTitle("Communications Platform");
                    contact.setBirthday("2014-06-01");
                    
                    // Email must be one of type personal, or work
                    contact.setEmails(Arrays.asList(new Contact.Email("personal", "swag@nylas.com")));
                    
                    
                    Contact.PhysicalAddress address = new Contact.PhysicalAddress();
                    address.setStreetAddress("944 Market St");
                    address.setType("work"); // PhysicalAddress must be one of type work, home, or other
                    address.setCity("San Francisco");
                    address.setState("CA");
                    address.setCountry("US");
                    address.setPostalCode("94102");
                    address.setFormat("structured");
                    contact.setPhysicalAddresses(Arrays.asList(address));
                    
                    // PhoneNumbers must be one of type
                    // business, organization_main, mobile, assistant,
                    // business_fax, home_fax, radio, car, home, or pager
                    contact.setPhoneNumbers(Arrays.asList(new Contact.PhoneNumber("business", "555 555-5555")));
                    
                    // WebPage must be one of type homepage, profile, work, or blog
                    contact.setWebPages(Arrays.asList(new Contact.WebPage("homepage", "https://nylas.com")));
                    
                    // imAddress must be one of type gtalk, aim,
                    // yahoo, lync, skype, qq, msn, icc, or jabber
                    contact.setIMAddresses(Arrays.asList(new Contact.IMAddress("gtalk", "Nylas")));
                    
                    // Save the contact to Nylas and the 3rd party provider
                    contact = account.contacts().create(contact);
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateContact'
            examples:
              CreateAContactRequest:
                value:
                  birthday: '1960-12-31'
                  company_name: Nylas
                  emails:
                    - email: john@doe.com
                      type: work
                  given_name: John
                  im_addresses:
                    - type: aim
                      im_address: myaimaddress
                  job_title: Software Engineer
                  manager_name: Bill the manager
                  middle_name: Jacob
                  nickname: JD
                  notes: Loves ramen
                  office_location: 123 Main Street
                  phone_numbers:
                    - number: 1 800 123 4567
                      type: business
                  physical_addresses:
                    - format: string
                      type: work
                      street_address: string
                      city: string
                      postal_code: string
                      state: string
                      country: string
                  suffix: string
                  surname: string
                  web_pages:
                    - type: profile
                      url: string
                  group: string
  '/contacts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the contact.
    get:
      summary: Return a Contact
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                ReturnAContactResponse:
                  value:
                    account_id: x2x2x2x2x2x2x2x2x2x2x2
                    birthday: '1960-12-31'
                    company_name: Nylas
                    emails:
                      - email: john@doe.com
                        type: work
                    given_name: John
                    id: z3z3z3z3z3z3z3z3z3z3z3
                    im_addresses:
                      - type: aim
                        im_address: myaimaddress
                    job_title: Software Engineer
                    manager_name: Bill the manager
                    middle_name: Jacob
                    nickname: JD
                    notes: Loves ramen
                    object: contact
                    office_location: 123 Main Street
                    phone_numbers:
                      - number: 1 800 123 4567
                        type: business
                    physical_addresses:
                      - format: string
                        type: work
                        street_address: string
                        city: string
                        postal_code: string
                        state: string
                        country: string
                    picture_url: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
                    suffix: string
                    surname: string
                    web_pages:
                      - type: profile
                        url: string
                    groups:
                      - id: string
                        object: contact_group
                        account_id: string
                        name: string
                        path: string
                      - source: address_book
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-contacts-id
      description: Returns a contact by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/contacts/{contact_id}' \
            -H 'Authorization: Bearer <ACCESS_TOKEN>'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            contact = nylas.contacts.get('{id}')

            # The following attributes are available with the contact object
            contact.id
            contact.given_name
            contact.middle_name
            contact.surname
            contact.suffix
            contact.nickname
            contact.emails
            contact.physical_addresses
            contact.office_location
            contact.picture_url
            contact.account_id
            contact.company_name
            contact.notes
            contact.object
            contact.manager_name
            contact.im_addresses
            contact.web_pages
            contact.phone_numbers
            contact.job_title
            contact.birthday
        - lang: ruby
          label: Ruby SDK
          source: |-
            contact = nylas.contacts.find('{id}')

            # The following attributes are available with the contact object
            contact.id
            contact.given_name
            contact.middle_name
            contact.surname
            contact.suffix
            contact.nickname
            contact.emails
            contact.physical_addresses
            contact.office_location
            contact.picture_url
            contact.account_id
            contact.company_name
            contact.notes
            contact.object
            contact.manager_name
            contact.im_addresses
            contact.web_pages
            contact.phone_numbers
            contact.job_title
            contact.birthday
            contact.groups
        - lang: js
          label: Node.js SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Contact;
            import com.nylas.Contacts;

            public class NylasExamples {
                public static void getContactExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Contacts contacts = account.contacts();
                    
                    // Return a contact by specifying its ID
                    Contact contact = contacts.get("{contactID}");
                    
                    // The following attributes are available for the contact object
                    contact.getId();
                    contact.getBirthday();
                    contact.getCompanyName();
                    contact.getEmails();
                    contact.getGivenName();
                    contact.getGroups();
                    contact.getIMAddresses();
                    contact.getJobTitle();
                    contact.getManagerName();
                    contact.getMiddleName();
                    contact.getNickname();
                    contact.getNotes();
                    contact.getOfficeLocation();
                    contact.getPhoneNumbers();
                    contact.getPhysicalAddresses();
                    contact.getPictureUrl();
                    contact.getSource();
                    contact.getSuffix();
                    contact.getSurname();
                    contact.getWebPages();
                    }
            }
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Contact;
            import com.nylas.Contacts;

            public class NylasExamples {
                public static void getContactExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Contacts contacts = account.contacts();
                    
                    // Return a contact by specifying its ID
                    Contact contact = contacts.get("{contactID}");
                    
                    // The following attributes are available for the contact object
                    contact.getId();
                    contact.getBirthday();
                    contact.getCompanyName();
                    contact.getEmails();
                    contact.getGivenName();
                    contact.getGroups();
                    contact.getIMAddresses();
                    contact.getJobTitle();
                    contact.getManagerName();
                    contact.getMiddleName();
                    contact.getNickname();
                    contact.getNotes();
                    contact.getOfficeLocation();
                    contact.getPhoneNumbers();
                    contact.getPhysicalAddresses();
                    contact.getPictureUrl();
                    contact.getSource();
                    contact.getSuffix();
                    contact.getSurname();
                    contact.getWebPages();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    put:
      summary: Update a Contact
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                UpdateAContactResponse:
                  value:
                    account_id: x2x2x2x2x2x2x2x2x2x2x2
                    birthday: '1960-12-31'
                    company_name: Nylas
                    emails:
                      - email: john@doe.com
                        type: work
                    given_name: John
                    id: z3z3z3z3z3z3z3z3z3z3z3
                    im_addresses:
                      - type: aim
                        im_address: myaimaddress
                    job_title: Software Engineer
                    manager_name: Bill the manager
                    middle_name: Jacob
                    nickname: JD
                    notes: Loves ramen
                    object: contact
                    office_location: 123 Main Street
                    phone_numbers:
                      - number: 1 800 123 4567
                        type: business
                    physical_addresses:
                      - format: string
                        type: work
                        street_address: string
                        city: string
                        postal_code: string
                        state: string
                        country: string
                    picture_url: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
                    suffix: string
                    surname: string
                    web_pages:
                      - type: profile
                        url: string
                    groups:
                      - id: string
                        object: contact_group
                        account_id: string
                        name: string
                        path: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-contacts-id
      description: Updates a contact.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X PUT 'https://api.nylas.com/contacts/{contact_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN' \
            -d '{
              "given_name": "My Very Best",
              "middle_name": "Nylas",
              "surname": "Friend",
              "birthday": "2014-06-01",
              "suffix": "API",
              "nickname": "Nylas",
              "company_name": "Nylas",
              "job_title": "Communications Platform",
              "manager_name": "Communications",
              "office_location": "SF",
              "notes": "Check out the Nylas Email, Calendar, and Contacts APIs",
              "emails": [{
                      "type": "personal",
                      "email": "swagg@nylas.com"
              }
              ],
              "physical_addresses": [{
                      "format": "structured",
                      "type": "work",
                      "street_address": "944 Market St, 8th Floor",
                      "city": "San Francisco",
                      "postal_code": "94102",
                      "state": "CA",
                      "country": "USA"
              } ],
              "phone_numbers": [{
                              "type":"home",
                              "number": "123-123-1234"
                      }],
              "web_pages": [{
                              "type": "homepage",
                              "url":"https://nylas.com"
                      }],
              "im_addresses": [{
                      "type": "gtalk",
                      "im_address": "Nylas"
              }]
            }'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            from datetime import datetime


            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Get a contact with a specified id

            contact = nylas.contacts.get("{id}")


            # Save the contact to Nylas and the 3rd party provider

            contact.save()


            # The following attributes can be modified for the contact object

            contact.given_name = 'My'

            contact.middle_name = 'Nylas'

            contact.surname = 'Friend'

            contact.suffix = ''

            contact.nickname = 'Nylas'

            contact.office_location = 'San Francisco'

            contact.company_name = 'Nylas'

            contact.notes = 'Check out the Nylas Email, Calendar, and Contacts
            APIs'

            contact.manager_name = ''

            contact.job_title = 'Communications Platform'

            contact.birthday = datetime(2014, 6, 1)


            # emails must be one of type personal, or work

            contact.emails['personal'] = ['swag@nylas.com']


            # physical_addresses must be one of type work, home, or other

            contact.physical_addresses['work'] = [{
                # physical addresses must be structured like the following
                'format': 'structured',
                'city': 'San Francisco',
                'country': 'US',
                'state': 'CA',
                'postal_code': '94102',
                'type': 'work',
                'street_address': '944 Market St, 8th Floor'}]

            # phone_numbers must be one of type

            # business, organization_main, mobile, assistant,

            # business_fax, home_fax, radio, car, home, or pager

            contact.phone_numbers['business'] = ['555 555-5555']


            # web_pages must be one of type homepage, profile, work, or blog

            contact.web_pages['homepage'] = ['https://nylas.com']


            # im_addresses must be one of type gtalk, aim,

            # yahoo, lync, skype, qq, msn, icc, or jabber

            contact.im_addresses['gtalk'] = 'Nylas'
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Create a new contact

            contact = nylas.contacts.find("{id}")


            # Save the contact to Nylas and the 3rd party provider

            contact.save


            # The following attributes can be modified for the contact object

            contact.given_name = 'My'

            contact.middle_name = 'Nylas'

            contact.surname = 'Friend'

            contact.suffix = 'API'

            contact.nickname = 'Nylas'

            contact.office_location = 'San Francisco'

            contact.company_name = 'Nylas'

            contact.notes = 'Check out the Nylas Email, Calendar, and Contacts
            APIs'

            contact.manager_name = 'Communications'

            contact.job_title = 'Communications Platform'

            contact.birthday = '2014-06-01'


            # emails must be one of type personal, or work

            contact.emails = [{type: 'personal', email: 'swag@nylas.com'}]


            # physical_addresses must be one of type work, home, or other

            contact.physical_addresses = [{
                # physical addresses must be structured like the following
                format: 'structured',
                city: 'San Francisco',
                country: 'US',
                state: 'CA',
                postal_code: '94102',
                type: 'work',
                street_address: '944 Market St, 8th Floor'}]

            # phone_numbers must be one of type

            # business, organization_main, mobile, assistant,

            # business_fax, home_fax, radio, car, home, or pager

            contact.phone_numbers = [{type: 'business', number: '555 555-5555'}]


            # web_pages must be one of type homepage, profile, work, or blog

            contact.web_pages = [{type: 'homepage', url: 'https://nylas.com'}]


            # im_addresses must be one of type gtalk, aim,

            # yahoo, lync, skype, qq, msn, icc, or jabber

            contact.im_addresses = [{type: 'gtalk', im_address: 'nylas'}]
        - lang: js
          label: Node.js SDK
          source: >-
            // Get a contact with a specified id

            nylas.contacts.find('{id}').then(resp => contact = resp);


            // Save the contact to Nylas and the 3rd party provider

            contact.save()


            // The following attributes can be modified for the contact object

            contact.givenName = 'My'

            contact.middleName = 'Nylas'

            contact.surname = 'Friend'

            contact.suffix = 'API'

            contact.nickname = 'Nylas'

            contact.birthday = '2014-06-01'

            contact.companyName = 'Nylas'

            contact.jobTitle = 'Communications Platform'

            contact.managerName = 'Communications'

            contact.officeLocation = 'San Francisco'

            contact.notes = 'Check out the Nylas Email, Calendar, and Contacts
            APIs'


            // emails must be one of type personal, or work

            contact.emailAddresses = [{type: 'personal', email:
            'swag@nylas.com'}]};


            // physical_addresses must be one of type work, home, or other

            contact.physicalAddresses = [    
                  {'format': 'structured',
                  'city': 'San Francisco',
                  'country': 'US',
                  'state': 'CA',
                  'postalCode': '94102',
                  'type': 'work',
                  'streetAddress': '944 Market St, 8th Floor'}
            ];


            // phone_numbers must be one of type

            // business, organization_main, mobile, assistant,

            // business_fax, home_fax, radio, car, home, or pager

            contact.phoneNumbers = [{type: 'business', number: '555 555-5555'}];


            // web_pages must be one of type homepage, profile, work, or blog

            contact.webPages = [{type: 'homepage', url: 'https://nylas.com'}];


            // im_addresses must be one of type gtalk, aim,

            // yahoo, lync, skype, qq, msn, icc, or jabber

            contact.imAddresses = [{type: 'gtalk', imAddress: 'Nylas'}];
        - lang: java
          label: Java SDK
          source: |-
            import java.util.Arrays;
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Contact;

            public class NylasExamples {
                public static void putContactExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    
                    // Get a contact by specifying its ID
                    Contact contact = account.contacts().get("{contactId}");
                    
                    // The following attributes can be modified for the contact object
                    contact.setGivenName("My");
                    contact.setMiddleName("Nylas");
                    contact.setSurname("Friend");
                    contact.setSuffix("API");
                    contact.setNickname("Nylas");
                    contact.setOfficeLocation("San Francisco");
                    contact.setCompanyName("Nylas");
                    contact.setNotes("Check out the Nylas Email, Calendar, and Contacts APIs");
                    contact.setManagerName("Communications");
                    contact.setJobTitle("Communications Platform");
                    contact.setBirthday("2014-06-01");
                    
                    // Email must be one of type personal, or work
                    contact.setEmails(Arrays.asList(new Contact.Email("personal", "swag@nylas.com")));
                    
                    // PhysicalAddress must be one of type work, home, or other
                    Contact.PhysicalAddress address = new Contact.PhysicalAddress();
                    address.setStreetAddress("695 Minna St");
                    address.setType("work");
                    address.setCity("San Francisco");
                    address.setState("CA");
                    address.setCountry("US");
                    address.setPostalCode("94103");
                    address.setFormat("structured");
                    contact.setPhysicalAddresses(Arrays.asList(address));
                    
                    // PhoneNumbers must be one of type
                    // business, organization_main, mobile, assistant,
                    // business_fax, home_fax, radio, car, home, or pager
                    contact.setPhoneNumbers(Arrays.asList(new Contact.PhoneNumber("business", "555 555-5555")));
                    
                    // WebPages must be one of type homepage, profile, work, or blog
                    contact.setWebPages(Arrays.asList(new Contact.WebPage("homepage", "https://nylas.com")));
                    
                    // imAddresses must be one of type gtalk, aim,
                    // yahoo, lync, skype, qq, msn, icc, or jabber
                    contact.setIMAddresses(Arrays.asList(new Contact.IMAddress("gtalk", "Nylas")));
                    
                    // Save the contact to Nylas and the 3rd party provider
                    // This must be executed whenever you want to save changes.
                    contact = account.contacts().update(contact);
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreateUpdate'
            examples:
              UpdateAContactRequest:
                value:
                  birthday: '1960-12-31'
                  company_name: Nylas
                  emails:
                    - email: john@doe.com
                      type: work
                  given_name: John
                  im_addresses:
                    - type: aim
                      im_address: myaimaddress
                  job_title: Software Engineer
                  manager_name: Bill the manager
                  middle_name: Jacob
                  nickname: JD
                  notes: Loves ramen
                  office_location: 123 Main Street
                  phone_numbers:
                    - number: 1 800 123 4567
                      type: business
                  physical_addresses:
                    - format: string
                      type: work
                      street_address: string
                      city: string
                      postal_code: string
                      state: string
                      country: string
                  suffix: string
                  surname: string
                  web_pages:
                    - type: profile
                      url: string
                  group: string
    delete:
      summary: Delete a Contact
      tags:
        - Contacts
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
              examples:
                example-1:
                  value:
                    message: Error Message
                    type: Error Type
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: delete-contacts-id
      description: Deletes a contact.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE 'https://api.nylas.com/contacts/{contact_id}' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Delete contacts by passing the contact id to .delete()
            nylas.contacts.delete('{id}')
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Delete a contact by calling .destroy
            nylas.contacts.find('{id}').destroy
        - lang: js
          label: Node.js SDK
          source: |-
            // Delete contacts by passing the contact id to .delete()
            nylas.contacts.delete('{id}')
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;

            public class NylasExamples {
                public static void deleteContactExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                                    
                    // Delete an contact by specifying its ID 
                    account.contacts().delete("{contactId}");
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  '/contacts/{id}/picture':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Returns a Contacts Picture
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
              examples:
                Binary Data:
                  value: >-
                    HTTP/1.1 200 OK

                    Server: nginx

                    Date: Mon, 05 Feb 2018 21:26:04 GMT

                    Content-Type: image/jpeg

                    Content-Length: 2388

                    Connection: close

                    Access-Control-Allow-Headers:
                    Authorization,Accept,Cache-Control,X-Requested-With,Content-Type

                    Access-Control-Allow-Methods: GET,PUT,POST,DELETE,OPTIONS

                    Access-Control-Allow-Credentials: true

                    Nylas-API-Version: 2.0

                    Strict-Transport-Security: max-age=31536000;
                    includeSubDomains

                    X-XSS-Protection: 1

                    X-Content-Type-Options: nosniff

                    Content-Security-Policy: default-src https: 'unsafe-eval'
                    'unsafe-inline'; object-src 'none'


                    {BINARY DATA BLOB}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-contacts-id-picture
      description: >-
        Some contacts have profile pictures. If a contact has a picture
        associated with it, when you make a normal GET request for the contact,
        the `picture_url` field will be filled out with the url to send the
        picture GET request.


        The result is the header information with binary data. If you pipe the
        result into a data file specified by Content-Type field in the header
        data, jpg for this example, you can open that file and view the picture.


        ```bash

        curl --include --request GET \
          --url 'https://api.nylas.com/contacts/{id}/picture' \
          --header "authorization: <Authorization>" > picture.jpg
        ```
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/contacts/{contact_id}/picture' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            # Get a contact object to access it's picture

            contact = nylas.contacts.get('{id}')


            # get_picture() returns the urllib request for the picture file

            picture = contact.get_picture()


            # Here's an example that shows how to save the picture to a file

            file = open('picture.jpg', 'w+b"')

            file.write(picture.read())

            file.close()


            # You can also access the url where Nylas stores the picture with
            the picture_url attribute

            contact.picture_url
        - lang: ruby
          label: Ruby SDK
          source: >-
            # Get a contact object to access it's picture

            contact = nylas.contacts.find('{id}')


            # picture returns the picture file

            picture = contact.picture


            # You can also access the url where Nylas stores the picture with
            the picture_url attribute

            contact.picture_url
        - lang: js
          label: Node.js SDK
          source: >-
            // Get a contact object to access it's picture

            let contact;

            nylas.contacts.find('{id}').then(resp => contact = resp);


            // get_picture() returns the urllib request for the picture file

            let picture;

            contact.getPicture().then(resp => picture = resp);


            // Here's an example that shows how to save the picture to a file

            const fs = require('fs');

            fs.writeFile('picture.jpg', picture, 'binary', (err) => {
              if (err) throw err;
              console.log('The picture was saved!');
            });


            // You can also access the url where Nylas stores the picture with
            the picture_url attribute

            contact.pictureUrl
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import okhttp3.ResponseBody;
            import java.nio.file.Paths;
            import java.nio.file.Files;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Contact;


            public class NylasExamples {
                public static void downloadContactPictureExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("YOUR_ACCESS_TOKEN");
                    
                    // Stream and save a contact's picture to a local file.
                    // use try-with-resources to make sure the response is properly closed after saving
                    try (ResponseBody picResponse = account.contacts().downloadProfilePicture("{contact_id}")) {
                        Files.copy(picResponse.byteStream(), Paths.get("picture.jpg"));
                    }
                    
                    // You can also access the url where Nylas stores the picture with the pictureUrl attribute
                    Contact contact = account.contacts().get("{contact_id}");
                    contact.getPictureUrl();
                }

            }
      parameters:
        - schema:
            type: string
          in: header
          name: authorization
          description: '`<Authorization>" > picture.jpg`'
  /contacts/groups:
    get:
      summary: Return Contact Groups
      tags:
        - Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      minLength: 1
                      example: a0a0a0a0a0a0a0a0a0a0a0
                    object:
                      type: string
                      minLength: 1
                      example: contact_group
                      default: contact_group
                    account_id:
                      type: string
                      minLength: 1
                      example: x2x2x2x2x2x2x2x2x2x2x2
                    name:
                      type: string
                      minLength: 1
                      example: Work
                    path:
                      type: string
                      minLength: 1
                      example: Contacts/Work
              examples:
                ReturnContactGroupsResponse:
                  value:
                    - id: a0a0a0a0a0a0a0a0a0a0a0
                      object: contact_group
                      account_id: x2x2x2x2x2x2x2x2x2x2x2
                      name: Work
                      path: Contacts/Work
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-contacts-groups
      description: >
        Returns contact groups. Contact groups provide a way for users to
        organize their contacts.


        Contact groups have different meanings across different providers. This
        affects the way [contact
        groups](/docs/api/#tag--Contacts--contact-groups) are presented through
        the Nylas API.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET 'https://api.nylas.com/contacts/groups' \
            -H 'Authorization: Bearer ACCESS_TOKEN'
        - lang: py
          label: Python SDK
          source: '# This is not yet implemented in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: '# This feature is not yet implemented in the Ruby SDK'
        - lang: js
          label: Node.js SDK
          source: // This feature is not yet implemented in the Ruby SDK
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.ContactGroup;
            import com.nylas.ContactGroups;

            public class NylasExamples {
                public static void getContactGroupsExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");

                    // Return all contact groups for an account
                    ContactGroups groups = account.contactGroups();

                    ContactGroup group = groups.list().get(0);

                    // The following attributes are available for a contact group
                    group.getName();
                    group.getPath();
                    group.getId();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  /messages/search:
    get:
      summary: Search Messages
      tags:
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchMessages'
              examples:
                SearchMessagesResponse:
                  value:
                    - account_id: 43jf3n4es3***
                      bcc: []
                      body: 'Hello, how are you?'
                      cc: []
                      date: 1559770299
                      events: []
                      files: []
                      folder:
                        display_name: Draft
                        id: eeangfw9vm5***
                        name: drafts
                      from:
                        - email: nylastest***@yahoo.com
                          name: John Doe
                      id: 27hvuc1w2v85***
                      object: draft
                      reply_to: []
                      reply_to_message_id: null
                      snippet: 'Hello, how are you?'
                      starred: false
                      subject: ugh?
                      thread_id: 3sso5z8gb3***
                      to:
                        - email: '{{email}}'
                          name: '{{name}}'
                      unread: false
                      version: 0
                    - account_id: 43jf3n4es3i***
                      bcc: []
                      body: 'Hello, how are you?'
                      cc: []
                      date: 1559762902
                      events: []
                      files: []
                      folder:
                        display_name: Draft
                        id: eeangfw9vm5j4f***
                        name: drafts
                      from:
                        - email: nylastest***@yahoo.com
                          name: John Doe
                      id: 92c7gucghzh16147dpluw1q2d
                      object: draft
                      reply_to: []
                      reply_to_message_id: null
                      snippet: 'Hello, how are you?'
                      starred: false
                      subject: Hello
                      thread_id: e48pmw615r***
                      to:
                        - email: '{{email}}'
                          name: '{{name}}'
                      unread: false
                      version: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-messages-search
      parameters:
        - schema:
            type: string
          in: query
          name: q
          description: The query used to search messages.
        - $ref: '#/components/parameters/Accept'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/messages/search?q=hello \
              -H 'Authorization: Basic WVVUWjZ****' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )

            # Find all messages with the word "hello"
            messages = nylas.messages.search("hello")
        - lang: ruby
          label: Ruby SDK
          source: 'nylas.messages.search("hello").map(&:to_h)'
        - lang: js
          label: Node.js SDK
          source: >-
            nylas.messages.search('hello').then(messages =>
            console.log(messages));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import java.util.List;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Message;
            import com.nylas.Messages;

            public class NylasExamples {
                public static void searchMessagesExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Messages messages = account.messages();

                    // Search for provided string with a limit and offset
                    List<Message> results = messages.search("swag@nylas.com", 5, 0);        
                    
                    }
            }
          required: true
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
      description: >-
        Searches messages.


        **EWS and Exchange**

        Using `to` only works on the Inbox folder.


        **Microsoft 365**

        Using `to` or `participants` does not return sent mail.


        For details on the query syntax for the most commmon providers, please
        see:


        * [Google](https://support.google.com/mail/answer/7190?hl=en)

        *
        [Exchange/Outlook](https://support.office.com/en-us/article/Learn-to-narrow-your-search-criteria-for-better-searches-in-Outlook-d824d1e9-a255-4c8a-8553-276fb895a8da)

        * [Yahoo](https://help.yahoo.com/kb/SLN4701.html)

        * [Generic IMAP](https://tools.ietf.org/html/rfc3501#section-6.4.4)
      security:
        - ACCESS_TOKEN: []
  /threads/search:
    get:
      summary: Search Threads
      tags:
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchThreads'
              examples:
                SearchThreadsResponse:
                  value:
                    - account_id: 43jf3n4es3i***
                      draft_ids:
                        - 27hvuc1w2v85***
                      first_message_timestamp: 1559770299
                      folders:
                        - display_name: Draft
                          id: eeangfw9vm5j***
                          name: drafts
                      has_attachments: false
                      id: 3sso5z8gb3ts***
                      last_message_received_timestamp: null
                      last_message_sent_timestamp: null
                      last_message_timestamp: 1559770299
                      message_ids: []
                      object: thread
                      participants: []
                      snippet: ''
                      starred: false
                      subject: ugh?
                      unread: false
                      version: 1
                    - account_id: 43jf3n4es3i***
                      draft_ids:
                        - 92c7gucghzh***
                      first_message_timestamp: 1559762902
                      folders:
                        - display_name: Draft
                          id: eeangfw9vm5***
                          name: drafts
                      has_attachments: false
                      id: e48pmw615r2i***
                      last_message_received_timestamp: null
                      last_message_sent_timestamp: null
                      last_message_timestamp: 1559762902
                      message_ids: []
                      object: thread
                      participants: []
                      snippet: ''
                      starred: false
                      subject: Hello
                      unread: false
                      version: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-threads-search
      description: >-
        Searches threads.


        For EWS and Exchange accounts, using `to` only works on the Inbox
        folder.


        For details on the query syntax for the most commmon providers, please
        see:


        * [Google](https://support.google.com/mail/answer/7190?hl=en)

        *
        [Exchange/Outlook](https://support.office.com/en-us/article/Learn-to-narrow-your-search-criteria-for-better-searches-in-Outlook-d824d1e9-a255-4c8a-8553-276fb895a8da)

        * [Yahoo](https://help.yahoo.com/kb/SLN4701.html)

        * [Generic IMAP](https://tools.ietf.org/html/rfc3501#section-6.4.4)
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/threads/search?q=hello \
              -H 'Authorization: Basic WVVUWjZ****' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: |-
            from nylas import APIClient
            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )
            # Find all threads with the word "hello"
            threads = nylas.threads.search("hello")
        - lang: ruby
          label: Ruby SDK
          source: 'nylas.threads.search("hello").map(&:to_h)'
        - lang: js
          label: Node.js SDK
          source: nylas.threads.search('hello').then(threads => console.log(threads));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import java.util.List;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasAccount;
            import com.nylas.NylasClient;
            import com.nylas.Thread;
            import com.nylas.Threads;

            public class NylasExamples {
                public static void searchThreadsExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasAccount account = nylas.account("{ACCESS_TOKEN}");
                    Threads threads = account.threads();

                    // Search for provided string with a limit and offset
                    List<Thread> results = threads.search("swag@nylas.com", 5, 0);        
                    
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
        - schema:
            type: string
          in: query
          name: q
          description: The query used to search for threads.
  '/a/{client_id}/webhooks':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client ID of your Nylas developer application.
    get:
      summary: Return All Webhooks
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhooks'
              examples:
                ReturnAllWebhooksResponse:
                  value:
                    - application_id: 8eejdhpc5dv04w6ea8lzlxtkt
                      callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                      id: 7b5y8f25p344jy8yem6v5jir
                      state: active
                      triggers:
                        - message.created
                      version: '2.0'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-a-client_id-webhooks
      description: Returns all webhooks.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/a/{client_id}/webhooks \
              -H 'Authorization: Basic WVVUWjZ****' \
              -H 'Content-Type: application/json' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: '# This feature is not yet supported in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Retrieving a count of webhooks
            api.webhooks.count

            # Retrieving a subset of webhooks using limit
            api.webhooks.limit(5).map(&:to_h)
        - lang: js
          label: Node.js SDK
          source: Nylas.webhooks.list().then(webhooks => console.log(webhooks));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Webhook;
            import com.nylas.Webhooks;

            public class NylasExamples {
                public static void getWebhooksExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    Webhooks webhooks = application.webhooks();
                    
                    // Return all webhooks found in the user's inbox 
                    webhooks.list();
                    
                    // Return the first webhook
                    Webhook webhook = webhooks.list().get(0);
                    
                    // The following attributes are available for the webhook object
                    webhook.getId();
                    webhook.getApplicationId();
                    webhook.getCallbackUrl();
                    webhook.getState();
                    webhook.getTriggers();
                    webhook.getVersion();
                    }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    post:
      summary: Create a Webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks'
              examples:
                CreateAWebhookResponse:
                  value:
                    application_id: 8eejdhpc5dv04w6ea8lzlxtkt
                    callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                    id: 7b5y8f25p344jy8yem6v5jir
                    state: active
                    triggers:
                      - message.created
                    version: '2.0'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-a-client_id-webhooks
      description: Creates a webhook.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl -X POST \\\n  https://api.nylas.com/a/6yvh3ynadnwqtumyfper72svf/webhooks/ \\\n  -H 'Authorization: Basic mYSuP3rSecR3tB4s1cAutHtOk3n=' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n\t\"callback_url\": \"https://084eb929.ngrok.io/webook\",\n\t\"triggers\": [\"message.opened\"],\n\t\"state\": \"active\"\n}'"
        - lang: py
          label: Python SDK
          source: '# This feature is not yet supported in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: '# This feature is not yet supported in the Ruby SDK'
        - lang: js
          label: Node.js SDK
          source: |-
            const newWebhook = Nylas.webhooks.build({
                callbackUrl: 'https://wwww.myapp.com/webhook',
                state: 'active',
                triggers: ['event.created', 'event.updated'],
                });
              newWebhook.save().then(webhook => console.log(webhook.id));
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import java.util.Arrays;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Webhook;


            public class NylasExamples {
                public static void postWebhookExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    Webhook webhook = new Webhook();
                    webhook.setCallbackUrl("https://wwww.myapp.com/webhook");
                    webhook.setState("active");
                    webhook.setTriggers(Arrays.asList("event.created", "event.updated"));
                    webhook = application.webhooks().create(webhook);
                    System.out.println(webhook);
                }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                callback_url:
                  type: string
                  minLength: 1
                  description: >-
                    Creates a URL where the Nylas servers can send
                    notifications. It must be accessible from the public
                    internet and must be an HTTPS endpoint.
                  example: 'https://97a5db5e7c59.ngrok.io/webhook'
                triggers:
                  type: array
                  description: >-
                    Creates a set of triggers, describing the notifications this
                    webhook should receive.
                  items:
                    type: string
                    example: message.created
                state:
                  type: string
                  minLength: 1
                  enum:
                    - active
                    - inactive
                  description: >-
                    Set the state of the webhook. Can be set to active or
                    inactive.
                  example: active
              required:
                - callback_url
                - triggers
                - state
            examples:
              CreateAWebhookRequest:
                value:
                  callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                  triggers:
                    - message.created
                  state: active
        description: ''
  '/a/{client_id}/webhooks/{id}':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: The client ID of your Nylas developer application.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the webhook.
    get:
      summary: Return a Webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks'
              examples:
                ReturnAWebhookResponse:
                  value:
                    application_id: 8eejdhpc5dv04w6ea8lzlxtkt
                    callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                    id: 7b5y8f25p344jy8yem6v5jir
                    state: active
                    triggers:
                      - message.created
                    version: '2.0'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-a-client_id-webhooks-id
      description: Returns a webhook by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/a/client_id****/webhooks/evh5uy0shh*** \
              -H 'Authorization: Basic WVVUWjZ2****' \
              -H 'Content-Type: application/json' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: '# This feature is not yet supported in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: |-
            example_webhook = api.webhooks.first
            api.webhooks.find(example_webhook.id).to_h
        - lang: js
          label: Node.js SDK
          source: |-
            Nylas.webhooks.find('existingWebhookId').then(existingWebhook => {
                console.log(existingWebhook);
              })
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Webhook;

            public class NylasExamples {
                public static void getWebhookExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");

                    // Get a Webhook by specifying its ID
                    Webhook webhook = application.webhooks().get("{webhookId}");
                    
                    // The following attributes are available for the webhook object
                    webhook.getId();
                    webhook.getApplicationId();
                    webhook.getCallbackUrl();
                    webhook.getState();
                    webhook.getTriggers();
                    webhook.getVersion();
                    }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
    put:
      summary: Update a Webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks'
              examples:
                UpdateAWebhookResponse:
                  value:
                    application_id: 8eejdhpc5dv04w6ea8lzlxtkt
                    callback_url: 'https://97a5db5e7c59.ngrok.io/webhook'
                    id: 7b5y8f25p344jy8yem6v5jir
                    state: active
                    triggers:
                      - message.created
                    version: '2.0'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-a-client_id-webhooks-id
      description: Updates a webhook by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl -X PUT \\\n  https://api.nylas.com/a/6yvh3ynadnwqtumyfper72svf/webhooks/6cclep8i8aqknqnjqxsgs3ycw \\\n\t-H 'Authorization: Basic mYSuP3rSecR3tB4s1cAutHtOk3n=' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n\t\"state\": \"inactive\"\n}'"
        - lang: py
          label: Python SDK
          source: '# This feature is not yet supported in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: '# This feature is not yet supported in the Ruby SDK'
        - lang: js
          label: Node.js SDK
          source: |-
            Nylas.webhooks.find('existingWebhookId').then(existingWebhook => {
                existingWebhook.state = 'active';
                existingWebhook.save();
              })
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import java.util.Arrays;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.Webhook;

            public class NylasExamples {
                public static void putWebhookExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");

                    // Get a Webhook by specifying its ID
                    Webhook webhook = application.webhooks().get("{webhookId}");
                    
                    webhook.setCallbackUrl("https://wwww.myapp.com/webhook");
                    webhook.setState("active");
                    webhook.setTriggers(Arrays.asList("event.created", "event.updated"));
                    webhook = application.webhooks().update(webhook);
                    }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  description: Set the state to active or inactive
                  enum:
                    - active
                    - inactive
    delete:
      summary: Delete a Webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: OK. Returns `null`.
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: delete-a-client_id-webhooks-id
      description: Deletes a webhook by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X DELETE \
              https://api.nylas.com/a/6yvh3ynadnwqtumyfper72svf/webhooks/ \
              -H 'Authorization: Basic mYSuP3rSecR3tB4s1cAutHtOk3n=' \
              -H 'Content-Type: application/json' \
        - lang: py
          label: Python SDK
          source: '# This feature is not yet supported in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: '# This feature is not yet supported in the Ruby SDK'
        - lang: js
          label: Node.js SDK
          source: Nylas.webhooks.delete(existingWebhook);
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;

            public class NylasExamples {
                public static void deleteWebhookExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");
                    // Delete a webhook by specifying its ID
                    application.webhooks().delete("{webhookId}");
                    }
            }
      security:
        - BASIC_AUTH: []
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          name: Accept
        - schema:
            type: string
            default: application/json
          in: header
          name: Content-Type
  /delta/latest_cursor:
    post:
      summary: Get A Delta Cursor
      tags:
        - Deltas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  cursor:
                    type: string
                    minLength: 1
                required:
                  - cursor
              examples:
                GetADeltaCursorResponse:
                  value:
                    cursor: aqb0llc2ioo0***
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-delta-latest_cursor
      description: >-
        Return a delta cursor. The delta cursor is used to return data using the
        other deltas endpoints.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X POST \
              https://api.nylas.com/delta/latest_cursor \
              -H 'Authorization: Basic WVVUWjZ2****' \
              -H 'Content-Type: application/json' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: '# This feature is not supported'
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Retrieves the latest colletion of deltas
            latest_deltas = api.deltas.latest.class

            # Retrieves the latest cursor
            api.deltas.latest_cursor
        - lang: js
          label: Node.js SDK
          source: >-
            const DELTA_EXCLUDE_TYPES = ['contact', 'calendar', 'event',
            'file'];

            nylas.deltas.latestCursor((error, cursor) => {
              // Save inital cursor.
              persistCursor(cursor);

              // Start the stream and add event handlers.
              const stream = nylas.deltas.startStream(cursor, DELTA_EXCLUDE_TYPES);

              stream
                .on('delta', delta => {
                  // Handle the new delta.
                  console.log('Received delta:', delta);
                  // Save new cursor so this delta doesn't need to be re-fetched for future streams.
                  persistCursor(delta.cursor);
                })
                .on('error', err => {
                  // Handle errors here, such as by restarting the stream at the last cursor.
                  console.error('Delta streaming error:', err);
                });

              // Closing the stream explicitly, if needed
              stopButton.addEventListener('click', () => {
                stream.close();
              });
            });
        - lang: java
          label: Java SDK
          source: // This feature is not supported by the Java SDK
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  /delta:
    get:
      summary: Request Delta Cursors
      tags:
        - Deltas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeltaCursor'
              examples:
                RequestDeltaCursorsResponse:
                  value:
                    cursor_end: 4ekj8ktel67njbaw1c0nlvbdi
                    cursor_start: 9fboxh6t9b3ar4fwocxpwrcss
                    deltas:
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          bcc: []
                          body: >-
                            <div dir="ltr">Hi<br clear="all"><div><div dir="ltr"
                            class="gmail_signature"
                            data-smartmail="gmail_signature"><div
                            dir="ltr"><span><br><div dir="ltr"
                            style="margin-left:0pt" align="left"><table
                            style="border:none;border-collapse:collapse"><colgroup><col
                            width="84"><col width="540"></colgroup><tbody><tr
                            style="height:79pt"><td
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a
                            href="https://www.nylas.com/" target="_blank"><span
                            style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span
                            style="border:none;display:inline-block;overflow:hidden;width:70px;height:70px"><img
                            src="https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-uMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX"
                            width="70" height="70"
                            style="margin-left:0px;margin-top:0px"></span></span></a></p></td><td
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.7999999999999998;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:10pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;font-weight:700;vertical-align:baseline;white-space:pre-wrap">Katherine
                            Perry</span></p><p dir="ltr"
                            style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Lead
                            Technical Writer, </span><a
                            href="https://www.nylas.com/" target="_blank"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Nylas</span></a></p><p
                            dir="ltr"
                            style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">email@nylas.com</span></p></td></tr><tr
                            style="height:63pt"><td colspan="2"
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a
                            href="https://www.nylas.com/resources/savings-calculator-integrations/"
                            target="_blank"><span
                            style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span
                            style="border:none;display:inline-block;overflow:hidden;width:306px;height:45px"><img
                            src="https://lh3.googleusercontent.com/bTFwY25C4D9lD4GJHxsVEWr8--YG25chLhjDJb3rWpmXPw5RngwZHUWhbDracmaXL7n6mtt5JPM9egiGaFwU2bNKMrvMcctgvrHFOI7YxIzze7CTKKVJRqD8kq2hNUE2IJiPWFmL"
                            width="306" height="45"
                            style="margin-left:0px;margin-top:0px"></span></span></a></p></td></tr></tbody></table></div></span></div></div></div></div>
                          cc: []
                          date: 1602001027
                          events: []
                          files: []
                          from:
                            - email: email@nylas.com
                              name: Katherine Perry
                          id: 52m5un5v1m7rjigna5agc7y35
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          object: message
                          reply_to: []
                          snippet: >-
                            Hi Katherine PerryLead Technical Writer,
                            Nylasemail@nylas.com
                          starred: false
                          subject: New Message
                          thread_id: chvd75bowkhg3gfpgeeygcxbb
                          to:
                            - email: swag@nylas.com
                              name: Katherine Personal
                          unread: false
                        cursor: 8hhvivgus0fbo4qengko8c38x
                        event: create
                        id: 52m5un5v1m7rjigna5agc7y35
                        object: message
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          draft_ids: []
                          first_message_timestamp: 1602001027
                          has_attachments: false
                          id: chvd75bowkhg3gfpgeeygcxbb
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          last_message_received_timestamp: null
                          last_message_sent_timestamp: 1602001027
                          last_message_timestamp: 1602001027
                          message_ids:
                            - 52m5un5v1m7rjigna5agc7y35
                          object: thread
                          participants:
                            - email: swag@nylas.com
                              name: Katherine Personal
                            - email: email@nylas.com
                              name: Katherine Perry
                          snippet: >-
                            Hi Katherine PerryLead Technical Writer,
                            Nylasemail@nylas.com
                          starred: false
                          subject: New Message
                          unread: false
                          version: 0
                        cursor: 4ekj8ktel67njbaw1c0nlvbdi
                        event: create
                        id: chvd75bowkhg3gfpgeeygcxbb
                        object: thread
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-delta
      description: >-
        Returns a set of delta cursors.


        This endpoint returns the most recent set of deltas. Use the data cursor
        as a query parameter to return deltas. This endpoint does not stream or
        poll for data. If this is your first time getting data, this could
        return nothing. The response will vary based on the type of delta
        cursor.
      parameters:
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/delta_view'
        - $ref: '#/components/parameters/excluded_types'
        - $ref: '#/components/parameters/include_types'
        - $ref: '#/components/parameters/Accept'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/delta?cursor=aqb0llc2ioo0*** \
              -H 'Authorization: Basic WVVUWjZ2****' \
              -H 'Content-Type: application/json' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: '# This feature is not supported in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Retrieves a particular cursor
            deltas_from_cursor = api.deltas.since(ENV['NYLAS_PREVIOUS_CURSOR'])

            # Get the deltas metadata
            deltas_from_cursor.cursor_end
            deltas_from_cursor.cursor_start
            deltas_from_cursor.count

            # Retrieving multiple pages of deltas
            deltas_from_cursor.find_each.map(&:id).count

            # 5 delta's
            deltas_from_cursor.take(5).map(&:to_h)

            # Models are cast to Nylas::Model objects
            deltas_from_cursor.first&.model&.class

            # And can be viewed directly
            deltas_from_cursor.first&.to_h
        - lang: js
          label: Node.js SDK
          source: // This feature is not supported
        - lang: java
          label: Java SDK
          source: // This feature is not supported by the Java SDK
      security:
        - BASIC_AUTH: []
  /delta/longpoll:
    get:
      summary: Return Long-Polling Deltas
      tags:
        - Deltas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  cursor_end:
                    type: string
                    minLength: 1
                  cursor_start:
                    type: string
                    minLength: 1
                  deltas:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        attributes:
                          type: object
                          properties:
                            account_id:
                              type: string
                              minLength: 1
                            bcc:
                              type: array
                              items:
                                type: object
                            body:
                              type: string
                              minLength: 1
                            cc:
                              type: array
                              items:
                                type: object
                            date:
                              type: number
                            events:
                              type: array
                              items:
                                type: object
                            files:
                              type: array
                              items:
                                type: object
                            from:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            id:
                              type: string
                              minLength: 1
                            labels:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  display_name:
                                    type: string
                                    minLength: 1
                                  id:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            object:
                              type: string
                              minLength: 1
                            reply_to:
                              type: array
                              items:
                                type: object
                            snippet:
                              type: string
                              minLength: 1
                            starred:
                              type: boolean
                            subject:
                              type: string
                              minLength: 1
                            thread_id:
                              type: string
                              minLength: 1
                            to:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            unread:
                              type: boolean
                        cursor:
                          type: string
                          minLength: 1
                        event:
                          type: string
                          minLength: 1
                        id:
                          type: string
                          minLength: 1
                        object:
                          type: string
                          minLength: 1
              examples:
                ReturnLongPollingDeltasResponse:
                  value:
                    cursor_end: 4ekj8ktel67njbaw1c0nlvbdi
                    cursor_start: 9fboxh6t9b3ar4fwocxpwrcss
                    deltas:
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          bcc: []
                          body: >-
                            <div dir="ltr">Hi<br clear="all"><div><div dir="ltr"
                            class="gmail_signature"
                            data-smartmail="gmail_signature"><div
                            dir="ltr"><span><br><div dir="ltr"
                            style="margin-left:0pt" align="left"><table
                            style="border:none;border-collapse:collapse"><colgroup><col
                            width="84"><col width="540"></colgroup><tbody><tr
                            style="height:79pt"><td
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a
                            href="https://www.nylas.com/" target="_blank"><span
                            style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span
                            style="border:none;display:inline-block;overflow:hidden;width:70px;height:70px"><img
                            src="https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-uMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX"
                            width="70" height="70"
                            style="margin-left:0px;margin-top:0px"></span></span></a></p></td><td
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.7999999999999998;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:10pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;font-weight:700;vertical-align:baseline;white-space:pre-wrap">Katherine
                            Perry</span></p><p dir="ltr"
                            style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Lead
                            Technical Writer, </span><a
                            href="https://www.nylas.com/" target="_blank"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Nylas</span></a></p><p
                            dir="ltr"
                            style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">email@nylas.com</span></p></td></tr><tr
                            style="height:63pt"><td colspan="2"
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a
                            href="https://www.nylas.com/resources/savings-calculator-integrations/"
                            target="_blank"><span
                            style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span
                            style="border:none;display:inline-block;overflow:hidden;width:306px;height:45px"><img
                            src="https://lh3.googleusercontent.com/bTFwY25C4D9lD4GJHxsVEWr8--YG25chLhjDJb3rWpmXPw5RngwZHUWhbDracmaXL7n6mtt5JPM9egiGaFwU2bNKMrvMcctgvrHFOI7YxIzze7CTKKVJRqD8kq2hNUE2IJiPWFmL"
                            width="306" height="45"
                            style="margin-left:0px;margin-top:0px"></span></span></a></p></td></tr></tbody></table></div></span></div></div></div></div>
                          cc: []
                          date: 1602001027
                          events: []
                          files: []
                          from:
                            - email: email@nylas.com
                              name: Katherine Perry
                          id: 52m5un5v1m7rjigna5agc7y35
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          object: message
                          reply_to: []
                          snippet: >-
                            Hi Katherine PerryLead Technical Writer,
                            Nylasemail@nylas.com
                          starred: false
                          subject: New Message
                          thread_id: chvd75bowkhg3gfpgeeygcxbb
                          to:
                            - email: swag@nylas.com
                              name: Katherine Personal
                          unread: false
                        cursor: 8hhvivgus0fbo4qengko8c38x
                        event: create
                        id: 52m5un5v1m7rjigna5agc7y35
                        object: message
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          draft_ids: []
                          first_message_timestamp: 1602001027
                          has_attachments: false
                          id: chvd75bowkhg3gfpgeeygcxbb
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          last_message_received_timestamp: null
                          last_message_sent_timestamp: 1602001027
                          last_message_timestamp: 1602001027
                          message_ids:
                            - 52m5un5v1m7rjigna5agc7y35
                          object: thread
                          participants:
                            - email: swag@nylas.com
                              name: Katherine Personal
                            - email: email@nylas.com
                              name: Katherine Perry
                          snippet: >-
                            Hi Katherine PerryLead Technical Writer,
                            Nylasemail@nylas.com
                          starred: false
                          subject: New Message
                          unread: false
                          version: 0
                        cursor: 4ekj8ktel67njbaw1c0nlvbdi
                        event: create
                        id: chvd75bowkhg3gfpgeeygcxbb
                        object: thread
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-delta-longpoll
      description: >-
        Long Polling deltas will instruct the server to keep the connection open
        until a change comes through or it times out. You can use this behavior
        on platforms that do not support partial response parsing, such as web
        browsers.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/delta?cursor=aqb0llc2ioo0*** \
              -H 'Authorization: Basic WVVUWjZ2****' \
              -H 'Content-Type: application/json' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: '# This feature is not supported in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Retrieves a particular cursor
            deltas_from_cursor = api.deltas.since(ENV['NYLAS_PREVIOUS_CURSOR'])

            # Get the deltas metadata
            deltas_from_cursor.cursor_end
            deltas_from_cursor.cursor_start
            deltas_from_cursor.count

            # Retrieving multiple pages of deltas
            deltas_from_cursor.find_each.map(&:id).count

            # 5 delta's
            deltas_from_cursor.take(5).map(&:to_h)

            # Models are cast to Nylas::Model objects
            deltas_from_cursor.first&.model&.class

            # And can be viewed directly
            deltas_from_cursor.first&.to_h
        - lang: js
          label: Node.js SDK
          source: // This feature is not supported
        - lang: java
          label: Java SDK
          source: // This feature is not supported by the Java SDK
      security:
        - BASIC_AUTH: []
      parameters:
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/delta_view'
        - $ref: '#/components/parameters/excluded_types'
        - $ref: '#/components/parameters/include_types'
        - $ref: '#/components/parameters/Accept'
  /delta/streaming:
    get:
      summary: Streaming Deltas
      tags:
        - Deltas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  cursor_end:
                    type: string
                    minLength: 1
                  cursor_start:
                    type: string
                    minLength: 1
                  deltas:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        attributes:
                          type: object
                          properties:
                            account_id:
                              type: string
                              minLength: 1
                            bcc:
                              type: array
                              items:
                                type: object
                            body:
                              type: string
                              minLength: 1
                            cc:
                              type: array
                              items:
                                type: object
                            date:
                              type: number
                            events:
                              type: array
                              items:
                                type: object
                            files:
                              type: array
                              items:
                                type: object
                            from:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            id:
                              type: string
                              minLength: 1
                            labels:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  display_name:
                                    type: string
                                    minLength: 1
                                  id:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            object:
                              type: string
                              minLength: 1
                            reply_to:
                              type: array
                              items:
                                type: object
                            snippet:
                              type: string
                              minLength: 1
                            starred:
                              type: boolean
                            subject:
                              type: string
                              minLength: 1
                            thread_id:
                              type: string
                              minLength: 1
                            to:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  email:
                                    type: string
                                    minLength: 1
                                  name:
                                    type: string
                                    minLength: 1
                            unread:
                              type: boolean
                        cursor:
                          type: string
                          minLength: 1
                        event:
                          type: string
                          minLength: 1
                        id:
                          type: string
                          minLength: 1
                        object:
                          type: string
                          minLength: 1
              examples:
                StreamingDeltasResponse:
                  value:
                    cursor_end: 4ekj8ktel67njbaw1c0nlvbdi
                    cursor_start: 9fboxh6t9b3ar4fwocxpwrcss
                    deltas:
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          bcc: []
                          body: >-
                            <div dir="ltr">Hi<br clear="all"><div><div dir="ltr"
                            class="gmail_signature"
                            data-smartmail="gmail_signature"><div
                            dir="ltr"><span><br><div dir="ltr"
                            style="margin-left:0pt" align="left"><table
                            style="border:none;border-collapse:collapse"><colgroup><col
                            width="84"><col width="540"></colgroup><tbody><tr
                            style="height:79pt"><td
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a
                            href="https://www.nylas.com/" target="_blank"><span
                            style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span
                            style="border:none;display:inline-block;overflow:hidden;width:70px;height:70px"><img
                            src="https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-uMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX"
                            width="70" height="70"
                            style="margin-left:0px;margin-top:0px"></span></span></a></p></td><td
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.7999999999999998;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:10pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;font-weight:700;vertical-align:baseline;white-space:pre-wrap">Katherine
                            Perry</span></p><p dir="ltr"
                            style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Lead
                            Technical Writer, </span><a
                            href="https://www.nylas.com/" target="_blank"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">Nylas</span></a></p><p
                            dir="ltr"
                            style="line-height:1.38;margin-top:0pt;margin-bottom:0pt"><span
                            style="font-size:8pt;font-family:&quot;Source Sans
                            Pro&quot;,sans-serif;color:rgb(0,0,0);background-color:transparent;vertical-align:baseline;white-space:pre-wrap">email@nylas.com</span></p></td></tr><tr
                            style="height:63pt"><td colspan="2"
                            style="vertical-align:top;padding:5pt 5pt 5pt
                            5pt;overflow:hidden"><p dir="ltr"
                            style="line-height:1.2;margin-top:0pt;margin-bottom:0pt"><a
                            href="https://www.nylas.com/resources/savings-calculator-integrations/"
                            target="_blank"><span
                            style="font-size:11pt;font-family:Arial;color:rgb(17,85,204);background-color:transparent;vertical-align:baseline;white-space:pre-wrap"><span
                            style="border:none;display:inline-block;overflow:hidden;width:306px;height:45px"><img
                            src="https://lh3.googleusercontent.com/bTFwY25C4D9lD4GJHxsVEWr8--YG25chLhjDJb3rWpmXPw5RngwZHUWhbDracmaXL7n6mtt5JPM9egiGaFwU2bNKMrvMcctgvrHFOI7YxIzze7CTKKVJRqD8kq2hNUE2IJiPWFmL"
                            width="306" height="45"
                            style="margin-left:0px;margin-top:0px"></span></span></a></p></td></tr></tbody></table></div></span></div></div></div></div>
                          cc: []
                          date: 1602001027
                          events: []
                          files: []
                          from:
                            - email: email@nylas.com
                              name: Katherine Perry
                          id: 52m5un5v1m7rjigna5agc7y35
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          object: message
                          reply_to: []
                          snippet: >-
                            Hi Katherine PerryLead Technical Writer,
                            Nylasemail@nylas.com
                          starred: false
                          subject: New Message
                          thread_id: chvd75bowkhg3gfpgeeygcxbb
                          to:
                            - email: swag@nylas.com
                              name: Katherine Personal
                          unread: false
                        cursor: 8hhvivgus0fbo4qengko8c38x
                        event: create
                        id: 52m5un5v1m7rjigna5agc7y35
                        object: message
                      - attributes:
                          account_id: aaz875kwuvxik6ku7pwkqp3ah
                          draft_ids: []
                          first_message_timestamp: 1602001027
                          has_attachments: false
                          id: chvd75bowkhg3gfpgeeygcxbb
                          labels:
                            - display_name: Sent Mail
                              id: ertg5obp5nvn43xtqe2e55en0
                              name: sent
                          last_message_received_timestamp: null
                          last_message_sent_timestamp: 1602001027
                          last_message_timestamp: 1602001027
                          message_ids:
                            - 52m5un5v1m7rjigna5agc7y35
                          object: thread
                          participants:
                            - email: swag@nylas.com
                              name: Katherine Personal
                            - email: email@nylas.com
                              name: Katherine Perry
                          snippet: >-
                            Hi Katherine PerryLead Technical Writer,
                            Nylasemail@nylas.com
                          starred: false
                          subject: New Message
                          unread: false
                          version: 0
                        cursor: 4ekj8ktel67njbaw1c0nlvbdi
                        event: create
                        id: chvd75bowkhg3gfpgeeygcxbb
                        object: thread
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-delta-streaming
      parameters:
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/delta_view'
        - $ref: '#/components/parameters/excluded_types'
        - $ref: '#/components/parameters/include_types'
        - $ref: '#/components/parameters/Accept'
      description: >-
        Streaming deltas process real-time updates. The server connection does
        not close. You can use this for server-side applications that can parse
        data in real-time.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl -X GET \
              https://api.nylas.com/delta?cursor=aqb0llc2ioo0*** \
              -H 'Authorization: Basic WVVUWjZ2****' \
              -H 'Content-Type: application/json' \
              -H 'cache-control: no-cache'
        - lang: py
          label: Python SDK
          source: '# This feature is not supported in the Python SDK'
        - lang: ruby
          label: Ruby SDK
          source: |-
            # Retrieves a particular cursor
            deltas_from_cursor = api.deltas.since(ENV['NYLAS_PREVIOUS_CURSOR'])

            # Get the deltas metadata
            deltas_from_cursor.cursor_end
            deltas_from_cursor.cursor_start
            deltas_from_cursor.count

            # Retrieving multiple pages of deltas
            deltas_from_cursor.find_each.map(&:id).count

            # 5 delta's
            deltas_from_cursor.take(5).map(&:to_h)

            # Models are cast to Nylas::Model objects
            deltas_from_cursor.first&.model&.class

            # And can be viewed directly
            deltas_from_cursor.first&.to_h
        - lang: js
          label: Node.js SDK
          source: // This feature is not supported
        - lang: java
          label: Java SDK
          source: // This feature is not supported by the Java SDK
      security:
        - BASIC_AUTH: []
  /job-statuses:
    get:
      summary: Return All Job Statuses
      tags:
        - Job Statuses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStatus'
              examples:
                ReturnAllJobStatusesResponse:
                  value:
                    - account_id: eof2wrhqkl7kdwhy9hylpv9o9
                      action: create_calendar
                      created_at: 1592374298
                      id: 8e570s302fdazx9zqwiuk9jqn
                      job_status_id: 48pp6ijzrxpw9jors9ylnsxnf
                      object: calendar
                      status: successful
                    - account_id: eof2wrhqkl7kdwhy9hylpv9o9
                      action: update_calendar
                      created_at: 1592375249
                      id: 8e570s302fdazx9zqwiuk9jqn
                      job_status_id: aqghhhldmq8eyxnn14z0tlsun
                      object: calendar
                      status: successful
                    - account_id: eof2wrhqkl7kdwhy9hylpv9o9
                      action: delete_calendar
                      created_at: 1592375759
                      id: 8e570s302fdazx9zqwiuk9jqn
                      job_status_id: d38mgop88je0agkqrf03sw0sw
                      object: calendar
                      status: successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-job-statuses
      description: Return all job statuses.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request GET 'https://api.nylas.com/job-statuses/'
            \

            --header 'Authorization: Basic {access_token}' \
        - lang: java
          label: Java SDK
          source: |-
            NylasClient client = new NylasClient();
            NylasAccount account = client.account("{ACCESS_TOKEN}");
            JobStatuses jobStatuses = account.jobStatuses();

            // Use offset, and limit to control pagination
            JobStatusQuery query = new JobStatusQuery().offset(10).limit(10);
            JobStatus jobStatus = jobStatuses.list(query).fetchAll().get(0);

            // The following attributes are available for the JobStatus object
            jobStatus.getId();
            jobStatus.getJobObjectId();
            jobStatus.getObject();
            jobStatus.getAction();
            jobStatus.getStatus();
            jobStatus.getCreatedAt();
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  '/job-statuses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The ID of the job status.
    get:
      summary: Return A Job Status
      tags:
        - Job Statuses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
              examples:
                ReturnAJobStatusResponse:
                  value:
                    account_id: eof2wrhqkl7kdwhy9hylpv9o9
                    action: update_message
                    created_at: 1592374298
                    id: 8e570s302fdazx9zqwiuk9jqn
                    job_status_id: 48pp6ijzrxpw9jors9ylnsxnf
                    object: message
                    status: successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-job-statuses-id
      description: Return a job status by ID.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request GET
            'https://api.nylas.com/job-statuses/48pp6ijzrxpw9jors9ylnsxnf' \

            --header 'Content-Type: application/json' \

            --header 'Authorization: Basic <access_token>' \
        - lang: java
          label: Java SDK
          source: |-
            import java.io.IOException;
            import com.nylas.RequestFailedException;
            import com.nylas.NylasApplication;
            import com.nylas.NylasClient;
            import com.nylas.HostedAuthentication;
            import com.nylas.Scope;

            public class NylasExamples {
                public static void hostedAuthExample() throws IOException, RequestFailedException {
                    NylasClient nylas = new NylasClient();
                    NylasApplication application = nylas.application("{CLIENT_ID}", "{CLIENT_SECRET}");

                    HostedAuthentication authentication = application.hostedAuthentication();
                    String hostedAuthUrl = authentication.urlBuilder()
                        .redirectUri("https://example.com/redirect")
                        .responseType("code") // Use token for client-side apps
                        .scopes(Scope.EMAIL, Scope.CALENDAR, Scope.CONTACTS)
                        .loginHint("nyla@nylas.com")
                        .state("example_csrf_token")
                        .buildUrl();
                    
                    // This is the URL you need to send the user to to authenticate their account.
                    System.out.println(hostedAuthUrl);

                    // After your user authenticates, Nylas will return a unique, one-time-use code.
                    // This code can be used to create an access token that grants access to the user account.
                    
                }
            }
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
  /calendars/availability:
    post:
      summary: Availability for a Single Meeting
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarAvailabilityResponse'
              examples:
                AvailabilitySingleMeetingResponse:
                  value:
                    object: availability
                    time_slots:
                      - end: 1605803400
                        object: time_slot
                        start: 1605801600
                        status: free
                      - end: 1605804000
                        object: time_slot
                        start: 1605802200
                        status: free
                      - end: 1605804600
                        object: time_slot
                        start: 1605802800
                        status: free
                      - end: 1605805200
                        object: time_slot
                        start: 1605803400
                        status: free
                      - end: 1605805800
                        object: time_slot
                        start: 1605804000
                        status: free
                      - end: 1605806400
                        object: time_slot
                        start: 1605804600
                        status: free
                      - end: 1605807000
                        object: time_slot
                        start: 1605805200
                        status: free
                      - end: 1605816000
                        object: time_slot
                        start: 1605814200
                        status: free
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-calendars-availability
      description: >-
        Check multiple calendars to find available time slots for a single
        meeting. It checks the provider's primary calendar.



        **Feature Availability**


        iCloud does not support consecutive availability.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl --location --request POST 'https://api.nylas.com/calendars/availability' \\\n--header 'Accept: application/json' \\\n--header 'Content-Type: application/json' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer 2J0YS32BHcDiwpGM3Zagy8smiSL9O7' \\\n--data-raw '{\n\t\"duration_minutes\": 30,\n\t\"start_time\": 1600890568,\n\t\"end_time\": 1600999200,\n\t\"interval_minutes\": 10,\n\t\"emails\": [\n\t\t\"tom@brightideas.com\",\n\t\t\"jane@brightideas.com\"\n\t],\n\t\"free_busy\": [{\n\t\t\t\"email\": \"marie@radioactivity.com\",\n\t\t\t\"object\": \"free_busy\",\n\t\t\t\"time_slots\": [{\n\t\t\t\t\"start_time\": 1601042400,\n\t\t\t\t\"end_time\": 1601044200,\n\t\t\t\t\"object\": \"time_slot\",\n\t\t\t\t\"status\": \"busy\"\n\t\t\t}]\n\t\t},\n\t\t{\n\t\t\t\"email\": \"lamarr@player.com\",\n\t\t\t\"object\": \"free_busy\",\n\t\t\t\"time_slots\": [{\n\t\t\t\t\"start_time\": 1601042400,\n\t\t\t\t\"end_time\": 1601044200,\n\t\t\t\t\"object\": \"time_slot\",\n\t\t\t\t\"status\": \"busy\"\n\t\t\t}]\n\t\t},\n\t\t{\n\t\t\t\"email\": \"lamarr@player.com\",\n\t\t\t\"object\": \"free_busy\",\n\t\t\t\"time_slots\": [{\n\t\t\t\t\"start_time\": 1601047800,\n\t\t\t\t\"end_time\": 1601051400,\n\t\t\t\t\"object\": \"time_slot\",\n\t\t\t\t\"status\": \"busy\"\n\t\t\t}]\n\t\t}\n\t],\n\t\"open_hours\": [{\n\t\t\"emails\": [\n\t\t\t\"swag@nylas.com\"\n\t\t],\n\t\t\"days\": [\n\t\t\t\"0\"\n\t\t],\n\t\t\"timezone\": \"America/Chicago\",\n\t\t\"start\": \"10:00\",\n\t\t\"end\": \"14:00\",\n\t\t\"object_type\": \"open_hours\"\n\t}]\n}'"
        - lang: py
          label: Python SDK
          source: >-
            from nylas import APIClient

            import datetime

            import timedelta

            nylas = APIClient(
                CLIENT_ID,
                CLIENT_SECRET,
                ACCESS_TOKEN
            )


            emails = ["tom@brightideas.com", "charlie@turing-complete.com"]

            # Set duration and interval with int representing the number of
            minutes

            duration = 15

            interval = 5

            start_time = datetime.now()

            end_time = start_time + timedelta(hours=2)


            availability = nylas.availability(emails, duration, interval,
            start_time, end_time)


            # Optionally, you can also pass a free busy object

            free_busy = nylas.free_busy("skwolek@fibers.com", start_time,
            end_time)

            availability = nylas.availability(emails, duration, interval,
            start_time, end_endtime, free_busy)


            #Open Hours are not supported
        - lang: js
          label: Node.js
          source: >-
            const params = {
              startTime: '1590454800',
              endTime: '1590780800',
              interval: 5,
              duration: 30,
              emails: ['jane@email.com'],
              open_hours: [
                {
                  emails: ['swag@nylas.com'],
                  days: ['0'],
                  timezone: 'America/Chicago',
                  start: '10:00',
                  end: '14:00',
                  object_type: 'open_hours',
                },
              ],
            };


            const availability = await
            testContext.connection.calendars.availability(params);
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calendar-Availability-Post'
            examples:
              AvailabilitySingleMeetingRequest:
                value:
                  duration_minutes: 30
                  start_time: 1605794400
                  end_time: 1605826800
                  interval_minutes: 10
                  emails:
                    - swag@nylas.com
                  free_busy:
                    - email: lamarr@player.com
                      object: free/busy
                      time_slots:
                        - start_time: 1601042400
                          end_time: 1601044200
                          object: time_slot
                          status: busy
                  open_hours:
                    - emails:
                        - swag@nylas.com
                      days:
                        - '0'
                      timezone: America/Chicago
                      start: '10:00'
                      end: '14:00'
                      object_type: open_hours
        description: ''
  /calendars/availability/consecutive:
    post:
      summary: Availability for Multiple Meetings
      tags:
        - Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsecutiveAvailabilityResponse'
              examples:
                AvailabilityMultipleMeetingsResponse:
                  value:
                    - - emails:
                          - kat@spacetech.com
                          - dorothy@spacetech.com
                        end_time: 1605794400
                        start_time: 1605792600
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605796200
                        start_time: 1605794400
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605801600
                        start_time: 1605799800
                      - emails:
                          - kat@spacetech.com
                          - dorothy@spacetech.com
                        end_time: 1605803400
                        start_time: 1605801600
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605802200
                        start_time: 1605800400
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605804000
                        start_time: 1605802200
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605802800
                        start_time: 1605801000
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605804600
                        start_time: 1605802800
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605803400
                        start_time: 1605801600
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605805200
                        start_time: 1605803400
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605803400
                        start_time: 1605801600
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605805200
                        start_time: 1605803400
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605804000
                        start_time: 1605802200
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605805800
                        start_time: 1605804000
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605804000
                        start_time: 1605802200
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605805800
                        start_time: 1605804000
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605804600
                        start_time: 1605802800
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605806400
                        start_time: 1605804600
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605804600
                        start_time: 1605802800
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605806400
                        start_time: 1605804600
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605805200
                        start_time: 1605803400
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605807000
                        start_time: 1605805200
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605805200
                        start_time: 1605803400
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605807000
                        start_time: 1605805200
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605811200
                        start_time: 1605809400
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605813000
                        start_time: 1605811200
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605811800
                        start_time: 1605810000
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605813600
                        start_time: 1605811800
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605812400
                        start_time: 1605810600
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605814200
                        start_time: 1605812400
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605813000
                        start_time: 1605811200
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605814800
                        start_time: 1605813000
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605813000
                        start_time: 1605811200
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605814800
                        start_time: 1605813000
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605813600
                        start_time: 1605811800
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605815400
                        start_time: 1605813600
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605813600
                        start_time: 1605811800
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605815400
                        start_time: 1605813600
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605814200
                        start_time: 1605812400
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605816000
                        start_time: 1605814200
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605814200
                        start_time: 1605812400
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605816000
                        start_time: 1605814200
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605814800
                        start_time: 1605813000
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605816600
                        start_time: 1605814800
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605815400
                        start_time: 1605813600
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605817200
                        start_time: 1605815400
                    - - emails:
                          - kat@spacetech.com
                        end_time: 1605816000
                        start_time: 1605814200
                      - emails:
                          - dorothy@spacetech.com
                        end_time: 1605817800
                        start_time: 1605816000
                    - - emails:
                          - dorothy@spacetech.com
                        end_time: 1605826800
                        start_time: 1605825000
                      - emails:
                          - kat@spacetech.com
                        end_time: 1605828600
                        start_time: 1605826800
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-calendars-availability-consecutive
      description: >-
        Check to find availability for multiple meetings with several
        participants. Use this endpoint to build itineraries where participants
        with the same availability are combined. It checks the provider's
        primary calendar.


        **Feature Availability**


        iCloud does not support consecutive availability.
      x-code-samples:
        - lang: bash
          label: cURL
          source: "curl --request POST \\\n  --url https://api.nylas.com/calendars/availability/consecutive \\\n  --header 'Accept: application/jso' \\\n  --header 'Content-Type: application/json' \\\n  --header 'authorization: Bearer <access_token>' \\\n  --data '{\n\t\"duration_minutes\": 30,\n\t\"start_time\": 1605794400,\n\t\"end_time\": 1605826800,\n\t\"interval_minutes\": 10,\n\t\"emails\": [\n\t\t[\"swag@nylas.com\"]\n\t],\n\t\"free_busy\": [{\n\t\t\"email\": \"swag@nylas.com\",\n\t\t\"object\": \"free_busy\",\n\t\t\"time_slots\": [{\n\t\t\t\"start_time\": 1605819600,\n\t\t\t\"end_time\": 1605821400,\n\t\t\t\"object\": \"time_slot\",\n\t\t\t\"status\": \"busy\"\n\t\t}]\n\t}],\n\t\"open_hours\": [{\n\t\t\"emails\": [\n\t\t\t[\"string\"]\n\t\t],\n\t\t\"days\": [\"0,1,5\"],\n\t\t\"timezone\": \"America/Chicago\",\n\t\t\"start\": \"10:00\",\n\t\t\"end\": \"14:00\",\n\t\t\"object_type\": \"open_hours\"\n\t}]\n}'"
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consecutive-Availability'
            examples:
              AvailabilityMultipleMeetings:
                value:
                  duration_minutes: 30
                  start_time: 1605794400
                  end_time: 1605826800
                  interval_minutes: 10
                  emails:
                    - - swag@nylas.com
                  free_busy:
                    - email: swag@nylas.com
                      object: free_busy
                      time_slots:
                        - start_time: 1605819600
                          end_time: 1605821400
                          object: time_slot
                          status: busy
                  open_hours:
                    - emails:
                        - - swag@nylas.com
                      days:
                        - '0'
                      timezone: America/Chicago
                      start: '10:00'
                      end: '14:00'
                      object_type: open_hours
        description: ''
  /outbox:
    get:
      summary: Return All Messages to Be Sent
      tags:
        - Outbox
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Outbox'
                    - $ref: '#/components/schemas/outbox_send_at_request'
                    - $ref: '#/components/schemas/outbox_action'
              examples:
                ReturnMessages:
                  $ref: '#/components/examples/Return_All_Messages'
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: get-outbox
      description: >-
        Get a list of all messages scheduled to be sent.



        <div style="margin-top: 8px; padding:14px; background-color: #FFFEE6;
        border: 1px solid #9E9600; color: #161717"><p><strong> In
        Beta</strong></p> <p>Outbox API is currently in beta. We can't guarantee
        functionality or availability.</p></div>
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --location --request GET 'https://api.nylas.com/outbox' \
            --header 'Authorization: Bearer <access_token>' \
      security:
        - ACCESS_TOKEN: []
      parameters: []
    post:
      summary: Send a Message
      tags:
        - Outbox
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Outbox'
                  - $ref: '#/components/schemas/send_at_post_outbox_response'
              examples:
                OutboxResponse:
                  $ref: '#/components/examples/Create_Outbox_Message_Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-outbox
      description: >-
        Send a message or schedule messages to be sent.


        A 200 response does not mean a message was delivered succesfully. Review
        the [job
        status](/docs/connectivity/email/outbox-endpoint-guide/#job-status) to
        learn the status of the message.


        <div style="margin-top: 8px; padding:14px; background-color: #FFFEE6;
        border: 1px solid #9E9600; color: #161717"><p><strong> In
        Beta</strong></p> <p>Outbox API is currently in beta. We can't guarantee
        functionality or availability.</p></div>
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --location --request POST 'https://api.nylas.com/outbox' \
            --header 'Authorization: Bearer <access_token>' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "subject": "Welcome to Nylas!",
                "send_at": 1608156000,
                "to": [
                    {
                        "email": "dorothy@spacetech.com",
                        "name": "Dorothy"
                    }
                ],
                "from": [
                    {
                        "name": "kat@spacetech.com",
                        "email": "Katherine"
                    }
                ],
                "body": "This email was sent using the Nylas email API. Visit https://nylas.com for details."
            }'
      security:
        - ACCESS_TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOutboxMessage'
            examples:
              SendOutboxMessage:
                $ref: '#/components/examples/Create_Outbox_Message'
      parameters: []
  '/outbox/{job_status_id}':
    parameters:
      - schema:
          type: string
        name: job_status_id
        in: path
        required: true
    put:
      summary: Update send time
      tags:
        - Outbox
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboxPut'
              examples:
                OutboxResponse:
                  $ref: '#/components/examples/Update_Outbox_Request'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-outbox-job_status_id
      description: >-
        Update the message scheduled send time. Use the `job_status_id` returned
        from /outbox.


        <div style="margin-top: 8px; padding:14px; background-color: #FFFEE6;
        border: 1px solid #9E9600; color: #161717"><p><strong> In
        Beta</strong></p> <p>Outbox API is currently in beta. We can't guarantee
        functionality or availability.</p></div>
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request PUT
            'https://api.nylas.com/outbox/<job_status_id>' \

            --header 'Authorization: Bearer <access_token>' \

            --header 'Content-Type: application/json' \

            --data-raw '{
                "send_at": 1608155100
            }'
      security:
        - ACCESS_TOKEN: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                send_at:
                  type: integer
                  description: Unix timestamp of when to send email message..
            examples:
              UpdateSendTime:
                value:
                  send_at: 1608155100
    delete:
      summary: Delete Scheduled Message
      tags:
        - Outbox
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outbox-Response'
              examples:
                OutboxResponse:
                  value:
                    account_id: 5tgncdmczat02216u7d6uypyi
                    action: outbox
                    created_at: 1608065541
                    id: 8bup1y1szsybrj91e86l9l07o
                    job_status_id: 996mfx5bg5yzay4bpedug7of2
                    object: message
                    send_at: 1608155100
                    status: pending
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: delete-outbox-job_status_id
      description: >-
        Delete a scheduled message. Use the `job_status_id` returned from
        `/outbox`.


        <div style="margin-top: 8px; padding:14px; background-color: #FFFEE6;
        border: 1px solid #9E9600; color: #161717"><p><strong> In
        Beta</strong></p> <p>Outbox API is currently in beta. We can't guarantee
        functionality or availability.</p></div>
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request DELETE
            'https://api.nylas.com/outbox/6gi9cvb6jjsyotaalawdzujau' \

            --header 'Authorization: Bearer <access_token>' \
      security:
        - ACCESS_TOKEN: []
      parameters: []
  /neural/categorize:
    put:
      summary: Categorize a Message
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Messages'
              examples:
                CategorizeMessageResponseCategory:
                  value:
                    - account_id: '{account_id}'
                      categorized_at: 1608244650.0782313
                      category: feed
                      id: '{message_id}'
                      model_version: 1734dc47
                CategorizeMessageResponse:
                  value:
                    - account_id: '{account_id}'
                      bcc:
                        - email: Albert Einstein
                          name: al@particletech.com
                      body: >-
                        <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
                        type=\"text/css\">\n html {\n
                        -webkit-text-size-adjust:none;\n }\n body {\n
                        width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
                        width:280px;\n line-height: 16px;\n letter-spacing:
                        0.5px;\n }\n </style>\n <title>Welcome  ...  </html>
                      cc:
                        - email: George Washington Carver
                          name: carver@agritech.com
                      date: 1557950729
                      events:
                        - {}
                      files:
                        - account_id: 43jf3n4es3***
                          content_type: image/jpeg
                          filename: image.jpg
                          id: 9etjh6talp***
                          object: file
                          size: 72379
                      folder:
                        display_name: string
                        id: string
                        name: string
                      from:
                        - name: Marie Curie
                          email: marie@radioactivity.com
                      id: string
                      object: message
                      reply_to:
                        - email: skwolek@fibers.com
                          name: Stephanie Kwolek
                      snippet: string
                      starred: true
                      subject: string
                      thread_id: string
                      to:
                        - email: dorothy@spacetech.com
                          name: Dorothy Vaughan
                      unread: true
                      labels:
                        - display_name: Important
                          id: '{label_id}'
                          name: important
                      model_version: d6d33291
                      categorized_at: 1615904978.01382
                      category: feed
                      subcategories:
                        - ooo
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-neural-categorize
      description: >-
        Returns the message `category` as part of the Message object. Messages
        are either `conversation` or `feed`. 
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request PUT
            'https://api.nylas.com/neural/categorize' \

            --header 'Content-Type: application/json' \

            --header 'Accept: application/json' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --data-raw '{
              "message_id": [
                "<MESSAGE_ID>"
              ],
              "only_category": false
            }'
        - lang: js
          label: Node.js SDK
          source: |
            let cat = await nylas.neural.categorize(MESSAGE_ID);

            // You can also send a request to recategorize the message:
            cat = await cat.reCategorize("conversation");
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorizeMessagePUT'
            examples:
              CategorizeMessageRequest:
                value:
                  message_id:
                    - string
                  only_category: false
        description: ''
  /neural/categorize/feedback:
    post:
      summary: Categorize Message Feedback
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorizeMessageFeedbackResponse'
              examples:
                CategorizeMessageFeedbackResponse:
                  value:
                    account_id: '{account_id}'
                    category: conversation
                    is_primary_label: true
                    message_id: '{message_id}'
                    recategorized_at: 1615903770.5851583
                    recategorized_from:
                      category: conversation
                      model_version: string
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-neural-categorize-feedback
      description: Send feedback on categorized messages.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request POST
            'https://api.nylas.com/neural/categorize' \

            --header 'Content-Type: application/json' \

            --header 'Accept: application/json' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --data-raw '{
              "message_id": "<MESSAGE_ID>",
              "category": "<CATEGORY>"
            }'
      parameters:
        - $ref: '#/components/parameters/Accept'
      security:
        - ACCESS_TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorizeMessageFeedbackRequest'
            examples:
              CategorizeMessageFeedbackRequest:
                value:
                  message_id: '{messager_id}'
                  category: conversation
  /neural/conversation:
    put:
      summary: Clean Conversation
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanConversationsResponse'
              examples:
                CleanConversationResponse:
                  value:
                    account_id: '{account_id}'
                    bcc:
                      - email: Albert Einstein
                        name: al@particletech.com
                    body: >-
                      <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
                      type=\"text/css\">\n html {\n
                      -webkit-text-size-adjust:none;\n }\n body {\n
                      width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
                      width:280px;\n line-height: 16px;\n letter-spacing:
                      0.5px;\n }\n </style>\n <title>Welcome  ...  </html>
                    cc:
                      - email: George Washington Carver
                        name: carver@agritech.com
                    date: 1557950729
                    events:
                      - {}
                    files:
                      - account_id: 43jf3n4es3***
                        content_type: image/jpeg
                        filename: image.jpg
                        id: 9etjh6talp***
                        object: file
                        size: 72379
                    folder:
                      display_name: string
                      id: string
                      name: string
                    from:
                      - name: Marie Curie
                        email: marie@radioactivity.com
                    id: string
                    object: message
                    reply_to:
                      - email: skwolek@fibers.com
                        name: Stephanie Kwolek
                    snippet: string
                    starred: true
                    subject: string
                    thread_id: string
                    to:
                      - email: dorothy@spacetech.com
                        name: Dorothy Vaughan
                    unread: true
                    labels:
                      - display_name: Important
                        id: '{label_id}'
                        name: important
                    model_version: d6d33291
                    conversation: >-
                      __\n\nVirtual calendars are now included with Nylas
                      Platform and Calendar\nsubscriptions.\n\n[
                      ![Logo](https://12qf1516hja245v1v537ieww-wpengine.netdna-ssl.com/wp-\ncontent/uploads/2019/08/group-14@3x.png)\n](https://email.nylas.com/CSQ00K0mV0NL03BE3O02W06) 
                      \n\n--- 
                      \n\n[\n![Virtual_Calendar_NewsletterHero@2x.png](https://info.nylas.com/rs/857-LSW-455/images/Virtual_Calendar_NewsletterHero%402x.png)\n](https://email.nylas.com/x0L0000N3n20V3S0LB6QEWO) 
                      \n\n---  \n|  \n---  \n\nBuild flexible, secure scheduling
                      features with just a few lines of code.\nVirtual Calendars
                      eliminate the need for your users to authenticate with
                      their\npersonal calendars and provide all the seamless
                      scheduling features your users\nlove.  \n\n  \n|  | [READ
                      MORE](https://email.nylas.com/x0L0000N3n20V3S0LB6QEWO) 
                      \n--- 
                      \n|\n![Inbox_Zero_SQ@2x.png](https://info.nylas.com/rs/857-LSW-455/images/Inbox_Zero_SQ%402x.png)\n\nInstantly
                      connect 100% of email accounts with Hosted Auth.\n\n[READ
                      MORE](https://email.nylas.com/K00O6LS00VNo3MBEQ0230W0)\n\n|\n![Privacy_Shield_Ruling_SQ@2x.png](https://info.nylas.com/rs/857-LSW-455/images/Privacy_Shield_Ruling_SQ%402x.png)\n\nLearn
                      what the recent Privacy Shield Ruling means for your
                      users' data.\n\n[READ
                      MORE](https://email.nylas.com/wSEW36BLV0000Q2N00O3p0N)
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-neural-conversation
      description: Parse email messages by removing extra HTML.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request PUT
            'https://api.nylas.com/neural/coversation' \

            --header 'Accept: application/json' \

            --header 'Content-Type: application/json' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --data-raw '{
              "message_id": [
                "<MESSAGE_IDS>"
              ],
              "ignore_links": true,
              "ignore_images": true,
              "ignore_tables": true,
              "remove_conclusion_phrases": true,
              "images_as_markdown": true
            }'
        - lang: js
          label: Node.js SDK
          source: >+
            const convo = await nylas.neural.cleanConversation(MESSAGE_ID);


            // You can also pass in an object of options that can be enabled for
            the Neural endpoint, of type NeuralMessageOptions

            const convo = await nylas.neural.cleanConversation(MESSAGE_ID,
            options);


            //extract images

            await convo.extractImages();

        - lang: java
          label: Java SDK
          source: >
            List<String> messageIds = new
            ArrayList<>(Collections.singletonList(MESSAGE_ID));

            List<NeuralCleanConversation> cleanConversations =
            neural.cleanConversation(messageIds);


            // You can also pass in an object of options that can be enabled for
            the Neural endpoint, of type NeuralMessageOptions

            cleanConversations = neural.cleanConversation(messageIds, options);


            //extract images


            NeuralCleanConversation cleanConvo = cleanConversations.get(0);

            neural.extractImages(cleanConvo);
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleanConversationCreate'
            examples:
              CleanConversationCreate:
                value:
                  message_id:
                    - '{message_ids}'
                  ignore_links: true
                  ignore_images: true
                  ignore_tables: true
                  remove_conclusion_phrases: true
                  images_as_markdown: true
  /neural/conversation/feedback:
    post:
      summary: Clean Conversations Feedback
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanConversationFeedbackResponse'
              examples:
                CleanConversationsFeedbackResponse:
                  value:
                    model_version: string
                    message_id: string
                    feedback_at: string
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-neural-conversation-feedback
      description: Send feedback on the conversation endpoint.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request POST
            'https://api.nylas.com/neural/conversation/feedback' \

            --header 'Accept: application/json' \

            --header 'Content-Type: application/json' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --data-raw '{
                "message_id": <MESSAGE_ID>
            }'
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: string
                  example: '{message_id}'
  /neural/signature:
    put:
      summary: Signature Extraction
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SignatureExtraction'
              examples:
                SignatureExtraction:
                  value:
                    - account_id: '{account_id}'
                      bcc:
                        - email: Albert Einstein
                          name: al@particletech.com
                      body: >-
                        <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
                        type=\"text/css\">\n html {\n
                        -webkit-text-size-adjust:none;\n }\n body {\n
                        width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
                        width:280px;\n line-height: 16px;\n letter-spacing:
                        0.5px;\n }\n </style>\n <title>Welcome  ...  </html>
                      cc:
                        - email: George Washington Carver
                          name: carver@agritech.com
                      date: 1557950729
                      events:
                        - {}
                      files:
                        - account_id: 43jf3n4es3***
                          content_type: image/jpeg
                          filename: image.jpg
                          id: 9etjh6talp***
                          object: file
                          size: 72379
                      folder:
                        display_name: string
                        id: string
                        name: string
                      from:
                        - name: Marie Curie
                          email: marie@radioactivity.com
                      id: string
                      object: message
                      reply_to:
                        - email: skwolek@fibers.com
                          name: Stephanie Kwolek
                      snippet: string
                      starred: true
                      subject: string
                      thread_id: string
                      to:
                        - email: dorothy@spacetech.com
                          name: Dorothy Vaughan
                      unread: true
                      labels:
                        - display_name: Important
                          id: '{label_id}'
                          name: important
                      model_version: d6d33291
                      signature: >-
                        \\-- 
                        \n\n[![](https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-\nuMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX)](https://www.nylas.com/)\n\n|\n\nNylas
                        Product Team\n\nNylas Team,
                        [Nylas](https://www.nylas.com/)\n\n[swag@nylas.com](mailto:swag@nylas.com) 
                SignatureExtractionContactsObject:
                  value:
                    - account_id: '{account_id}'
                      bcc:
                        - email: Albert Einstein
                          name: al@particletech.com
                      body: >-
                        <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
                        type=\"text/css\">\n html {\n
                        -webkit-text-size-adjust:none;\n }\n body {\n
                        width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
                        width:280px;\n line-height: 16px;\n letter-spacing:
                        0.5px;\n }\n </style>\n <title>Welcome  ...  </html>
                      cc:
                        - email: George Washington Carver
                          name: carver@agritech.com
                      date: 1557950729
                      events:
                        - {}
                      files:
                        - account_id: 43jf3n4es3***
                          content_type: image/jpeg
                          filename: image.jpg
                          id: 9etjh6talp***
                          object: file
                          size: 72379
                      folder:
                        display_name: string
                        id: string
                        name: string
                      from:
                        - name: Marie Curie
                          email: marie@radioactivity.com
                      id: string
                      object: message
                      reply_to:
                        - email: skwolek@fibers.com
                          name: Stephanie Kwolek
                      snippet: string
                      starred: true
                      subject: string
                      thread_id: string
                      to:
                        - email: dorothy@spacetech.com
                          name: Dorothy Vaughan
                      unread: true
                      labels:
                        - display_name: Important
                          id: '{label_id}'
                          name: important
                      model_version: d6d33291
                      signature: >-
                        \\-- 
                        \n\n[![](https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-\nuMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX)](https://www.nylas.com/)\n\n|\n\nNylas
                        Product Team\n\nNylas Team,
                        [Nylas](https://www.nylas.com/)\n\n[swag@nylas.com](mailto:swag@nylas.com) 
                      ' contact':
                        job_titles:
                          - Director of Engineering
                        links:
                          - description: string
                            url: 'https://www.example.com/'
                        phone_numbers:
                          - 123-456-8901
                        emails:
                          - al.einstein@physics.com
                        names:
                          - first_name: Albert
                            last_name: Einstein
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-neural-signature
      description: >-
        The Signature endpoint will extract email signatures by removing extra
        images and HTML.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request PUT
            'https://api.nylas.com/neural/signature' \

            --header 'Accept: application/json' \

            --header 'Content-Type: application/json' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --data-raw '{
              "message_id": [
                "<MESSAGE_ID>"
              ],
              "ignore_links": true,
              "ignore_images": true,
              "ignore_tables": true,
              "remove_conclusion_phrases": true,
              "images_as_markdown": true,
              "parse_contacts": true
            }'
        - lang: js
          label: Node.js SDK
          source: >
            const signature = await nylas.neural.extractSignature(MESSAGE_ID);


            // The method also accepts two optional parameters

            // parseContact, a boolean for whether Nylas should parse the
            contact from the signature (API defaults to true)

            // options, an object of options that can be enabled for the Neural
            endpoint, of type NeuralMessageOptions:

            const options = {
                ignore_links: false,
                ignore_images: false,
                ignore_tables: false,
                remove_conclusion_phrases: false,
                images_as_markdowns: false
            }


            const signature = await nylas.neural.extractSignature(MESSAGE_ID,
            true, options);


            //parse the contact and turn it into a Contact object

            const contact = signature.contacts.toContactObject();
        - lang: js
          label: Java SDK
          source: "List<String> messageIds = new ArrayList<>(Collections.singletonList(MESSAGE_ID));\nList<NeuralSignatureExtraction> signature = neural.extractSignature(messageIds);\n\n// The method also accepts two optional parameters\n// parseContact, a boolean for whether Nylas should parse the contact from the signature (API defaults to true)\n// options, an object of options that can be enabled for the Neural endpoint, of type NeuralMessageOptions:\nNeuralMessageOptions options = NeuralMessageOptions options = new NeuralMessageOptions()\n\t\t\t\t.ignoreImages(true)\n\t\t\t\t.ignoreTables(false)\n\t\t\t\t.ignoreLinks(true)\n\t\t\t\t.removeConclusionPhrases(false)\n\t\t\t\t.imagesAsMarkdown(true)\n\t\t\t\t.parseContacts(false);\nsignature = neural.extractSignature(messageIds, true, options);\n\n//parse the contact and convert it to the standard Nylas contact object:\n\nNeuralSignatureExtraction extractedSignature = extractSignature.get(0);\nContact contact = extractedSignature.getContacts().toContactObject();\n"
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureExtractionPUT'
            examples:
              SignatureExtractionRequest:
                value:
                  message_id:
                    - '{message_id}'
                  ignore_links: true
                  ignore_images: true
                  ignore_tables: true
                  remove_conclusion_phrases: true
                  images_as_markdown: true
                  parse_contacts: true
        description: ''
  /neural/signature/feedback:
    post:
      summary: Signature Extraction Feedback
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanConversationFeedbackResponse'
              examples:
                SignatureExtractionFeedbackResponse:
                  value:
                    model_version: av45hcbkka
                    message_id: '{message_id}'
                    feedback_at: '1607537180'
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-neural-signature-feedback
      description: Send feedback about signature extraction.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request POST
            'https://api.nylas.com/neural/signature/feedback' \

            --header 'Accept: application/json' \

            --header 'Content-Type: application/json' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --data-raw '{
                "message_id":"<MESSAGE_ID>"
            }'
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: string
            examples:
              SignatureExtractionFeedback:
                value:
                  message_id: string
  /neural/ocr:
    put:
      summary: Optical Character Recognition
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OCR'
              examples:
                OCRResponse:
                  value:
                    account_id: '{account_id}'
                    content_id: <f_kiubrkoa0>
                    content_type: application/pdf
                    filename: >-
                      intelligent-workflow-automations-coming-to-the-nylas-platform.pdf
                    id: '{id}'
                    message_ids:
                      - '{message_ids}'
                    object: file
                    ocr:
                      - >-
                        "Nylas\nINTELLIGENT WORKFLOW AUTOMATIONS COMING TO
                        THE\nNYLAS PLATFORM\nPosted on December 7, 2020 by Matt
                        Harper\nOutbox Endpoint\nCategorier\nEmail
                        Parse\nOCR\nEntity Recognition\nSignature
                        Detection\nPlatform updates help developers quickly and
                        securely build new productivity features for their
                        end-users.\nToday, we are proud to announce several
                        updates to the Nylas platform. These additions further
                        our mission of\nproviding Productivity Infrastructure
                        solutions to help developers across industries boost
                        their end-users'\nproductivity.\nAs part of our Early
                        Access program, Nylas customers can begin integrating
                        new, Al-powered workflow\nautomations triggered by the
                        communications data contained in users' inboxes,
                        calendars, and contacts, and\nextracted by the core
                        Nylas' APIs.\nHere is just a handful of the new
                        capabilities you can expect to be building with in the
                        coming weeks:\nPage: 1\n",       "Nylas\nOutbox\nEnable
                        your users to schedule and send large numbers of emails
                        with near-perfect deliverability rates and full\nCRUD
                        (Create, Read, Update, Delete) capabilities. With the
                        Outbox endpoint, you can now eliminate error\nmessages
                        and navigate deliverability issues that plague many
                        sales and marketing automation
                        platforms.\nCategorizer\nCategorizer declutters your
                        users' overcrowded inboxes so they can read and respond
                        to the most important\nmessages first. Categorizer
                        automatically differentiates human communications from
                        machine-to-human\ncommunications to channel spam emails,
                        newsletters, and more to a separate folder. You can also
                        set up\ncustom categories for your users' specific
                        needs, like categories for internal group projects,
                        external candidate\nemails, prospect emails, and
                        more.\nEmail Parse\nEmail contains essential business
                        communications, but it can be challenging for your users
                        to navigate\nconversations as email threads grow.
                        Company logos, nested responses, legal language, and
                        other elements\nclutter emails and create significant
                        problems for developers looking to integrate important
                        email data into\ntheir applications. Email Parse allows
                        you to quickly clean up emails and provide critical
                        communications to\nyour users within your application
                        without the standard inbox clutter.\nOCR\nOptical
                        Character Recognition automatically reads and extracts
                        key information from unstructured data\nsources like
                        PDFs, images, and attachments so that you can enter it
                        directly into your application (and sync\nwith other
                        third-party systems).\nPage: 2\n",       "Nylas\nEntity
                        Recognition\nEntity Recognition detects specific words
                        within emails and subject lines — such as times, dates,
                        and SKU\nnumbers – so that you can trigger powerful
                        workflows in your application.\nSignature
                        Detection\nSignature detection finds key information in
                        email signatures so you can automatically enrich your
                        users'\ncontact database. Automatically keep email
                        addresses, phone numbers, job titles, and profile photos
                        up to date\nfor your users – no manual work
                        required.\nWorkflow Templates\nNylas can help you
                        automate entire business processes with a single
                        endpoint. For instance, a user in recruiting\ncan now
                        send a templated email response to a candidate and
                        schedule an interview with all the correct\nparticipants
                        with just one-click in an Applicant Tracking
                        System.\nToday, there are over 50,000 developers around
                        the world using the Nylas platform to build
                        productivity\nfeatures in their applications. Our focus
                        is to help you quickly compose entirely new solutions
                        that leverage the\npower of your users' communications
                        data while avoiding the cost and complexity of building
                        your own\nintegrations, workflows, and security
                        features.\nIf you'd like to learn more about what you
                        can build with these new capabilities, I invite you to
                        please set up a\ntime with a Nylas platform specialist
                        who can help you get started.\nPage: 3\n",      
                        "Nylas\nAbout the Author\nPage: 4\n
                    size: 0
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-neural-ocr
      description: >-
        Use Optical character recognition(OCR) to parse message file
        attachments. Supports PDF and TIFF.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --location --request PUT 'https://api.nylas.com/neural/ocr' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer <ACCESS_TOKEN>' \
            --data-raw '{
                 "file_id": "<FILE_ID>>",
                 "pages": [<PAGE_NUMBERS>]
            }'
        - lang: js
          label: Node.js SDK
          source: >
            const ocr = await nylas.neural.ocrRequest(FILE_ID);


            // This endpoint also supports a second, optional parameter for an
            array specifying the pages that the user wants analyzed:

            const ocr = await nylas.neural.ocrRequest(FILE_ID, [2,3]);
        - lang: java
          label: Java SDK
          source: >
            NeuralOcr ocr = neural.ocrRequest( FILE_ID );


            // This endpoint also supports a second, optional parameter for an
            array specifying the pages that the user wants analyzed:

            ocr = neural.ocrRequest( FILE_ID, 2, 3 );
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                file_id:
                  type: string
                  minLength: 1
                  description: >-
                    ID of the file to parse. By default the first 5 pages are
                    parsed. There is a limit of 5 total pages per request. TIFF
                    and PDFs are supported.
                pages:
                  type: array
                  description: >-
                    Pass in an array of strings specifying which 5 pages to run
                    OCR on. TIFF and PDF files are supported.Optional
                  items:
                    type: string
                    example: '1,4,5,7'
              required:
                - file_id
            examples:
              OpticalRequest:
                value:
                  file_id: string
                  pages:
                    - '1,4,5,7'
        description: ''
  /neural/ocr/feedback:
    post:
      summary: Optical Character Recognition Feedback
      tags:
        - Neural
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: post-neural-ocr-feedback
      description: |
        Send feedback about optical character recognition.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >-
            curl --location --request POST
            'https://api.nylas.com/neural/ocr/feedback' \

            --header 'Accept: application/json' \

            --header 'Content-Type: application/json' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --data-raw '{
                "file_id":"<FILE_ID>"
            }'
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file_id:
                  type: string
                  description: ID of the file
  /neural/sentiment:
    put:
      summary: Sentiment Analysis
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SentimentAnalysis'
                  - type: array
                    description: Message ID
                    items:
                      $ref: '#/components/schemas/SentimentAnalysis'
              examples:
                MessageID:
                  value:
                    - account_id: 5tgncdmczat02216u7d6uypyi
                      sentiment: NEUTRAL
                      sentiment_score: 0
                      text: >-
                        When


                        Tue Apr 20, 2021 11am – 11:30am Central Time - Chicago


                        Joining info


                        Changed: Join Zoom Meeting

                        us02web.zoom.us/j/12345678901 (ID: 12345678901)

                        Join by phone(US) +1 123-456-7890

                        Joining instructions


                        Calendar


                        arver@agritech.com


                        Who




                        swag@nylas.com \- organizer




                        arver@agritech.com


                        more details »


                        Going (arver@agritech.com)?   Yes \- Maybe \- No    more
                        options »


                        Invitation from Google Calendar


                        You are receiving this email at the account
                        arver@agritech.com because you

                        are subscribed for updated invitations on calendar
                        arver@agritech.com.


                        To stop receiving these emails, please log in to

                        https://calendar.google.com/calendar/ and change your
                        notification settings

                        for this calendar.


                        Forwarding this invitation could allow any recipient to
                        send a response to the

                        organizer and be added to the guest list, or invite
                        others regardless of their

                        own invitation status, or to modify your RSVP. Learn
                        More.
                Text:
                  value:
                    account_id: string
                    model: sentiment-v0
                    sentiment: POSITIVE
                    sentiment_score: 0.6000000238418579
                    text: >-
                      Hi, thank you so much for reaching out! We can catch up
                      tomorrow.
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
      operationId: put-neural-sentiment
      description: >-
        <div style="margin-top:10px; padding:24px; background-color: #FFFEE6;
        border: 1px solid #9E9600; color: #161717">

        <p><strong>Sentiment Analysis is in beta</strong></p>

        <p>We can't guarantee feature availability or functionality.</p>

        </div>


        [Sentiment analysis](/docs/intelligence/sentiment-analysis/) will
        analyze provided text or emails and give you an emotional opinion on the
        text.
      x-code-samples:
        - lang: bash
          label: cURL
          source: >
            curl --location --request PUT
            'https://api.nylas.com/neural/sentiment' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --header 'Content-Type: application/json' \

            --data-raw '{
                "text": "<TEXT>"
            }'


            //MESSAGE ID


            curl --location --request PUT
            'https://api.nylas.com/neural/sentiment' \

            --header 'Authorization: Bearer <ACCESS_TOKEN>' \

            --header 'Content-Type: application/json' \

            --data-raw '{
                "message_id": [
                    "<MESSAGE_ID>"
                ]
            }'
        - lang: js
          label: Node.js SDK
          source: >
            // To perform sentiment analysis on a message, pass in the message
            ID:

            const messageAnalysis = await
            nylas.neural.sentimentAnalysisMessage(MESSAGE_ID);


            // To perform sentiment analysis on just text, pass in a string:

            const textAnalysis = await nylas.neural.sentimentAnalysisText("Hi,
            thank you so much for reaching out! We can catch up tomorrow.");
        - lang: java
          label: Java SDK
          source: >
            // To perform sentiment analysis on a message, pass in the list of
            message ID:

            List<String> messageIds = new
            ArrayList<>(Collections.singletonList(MESSAGE_ID));

            List<NeuralSentimentAnalysis> messageAnalysis =
            neural.sentimentAnalysisMessage(messageIds);


            // To perform sentiment analysis on just text, pass in a string:

            NeuralSentimentAnalysis textAnalysis =
            neural.sentimentAnalysisText("Hi, thank you so much for reaching
            out! We can catch up tomorrow.");
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - description: Message
                  properties:
                    message_id:
                      type: array
                      description: >-
                        Array of message_id strings. You can analyze one message
                        at a time. You can send in messages or plain text.
                      items:
                        type: string
                  required:
                    - message_id
                - description: Text
                  properties:
                    text:
                      type: string
                      description: >-
                        You can pass in plain text or text that includes
                        characters such as \n, \r, etc.. You can send in either
                        message_id or strings. 1000 characters max.
                      example: >-
                        Hi, thank you so much for reaching out! We can catch up
                        tomorrow.
                  required:
                    - text
              type: object
            examples:
              Text:
                value:
                  text:
                    - >-
                      Hi, thank you so much for reaching out! We can catch up
                      tomorrow.
              MessageID:
                value:
                  message_id:
                    - 6tgncdmczat02246u8d6uypyi
        description: ''
  /neural/sentiment/feedback:
    post:
      summary: Sentiment Analysis Feedback
      tags:
        - Neural
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentimentAnalysisFeedback'
              examples:
                SentimentAnalysisFeeback:
                  value:
                    code_version: string
                    feedback_at: 0
                    id: string
                    model_version: string
                    status: string
        '400':
          $ref: '#/components/responses/Error-400'
        '401':
          $ref: '#/components/responses/Error-401'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409-Sentiment-Analysis'
              examples:
                409 Conflict:
                  value:
                    error_message:
                      detail:
                        code_version: 1.0.2
                        created_at: 1617299281
                        id: >-
                          fc195046788e45fde5ff2b13980730aaa2f12bc594aa6674320dcf149b4af715
                        model_version: ''
                        sentiment: NEUTRAL
                        text: 'Hello, How are you'
                      error: feedback_exists
      operationId: post-neural-sentiment-feedback
      description: >-
        <div style="margin-top:10px; padding:24px; background-color: #FFFEE6;
        border: 1px solid #9E9600; color: #161717">

        <p><strong>Sentiment Analysis is in beta</strong></p>

        <p>We can't guarantee feature availability or functionality.</p>

        </div>


        Send
        [feedback](/docs/intelligence/sentiment-analysis/#sentiment-analysis-feedback)
        about sentiment analysis.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --location --request POST '/neural/sentiment/feedback' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer <ACCESS_TOKEN>' \
            --data-raw '{
              "sentiment": "positive",
              "overwrite": true,
              "message_id": "<MESSAGE_ID>"
            }'
      security:
        - ACCESS_TOKEN: []
      parameters:
        - $ref: '#/components/parameters/Accept'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SentimentAnalysisFeedbackRequest'
            examples:
              SentimentAnalysisFeedback:
                value:
                  sentiment: positive
                  overwrite: true
                  message_id: string
components:
  schemas:
    Error-400:
      title: Error-400
      type: object
      properties:
        message:
          description: Error Message
          type: string
          example: Error Message
        type:
          description: Error Type
          type: string
          example: Error Type
      x-examples: {}
    Folder:
      title: Folder
      type: object
      x-tags:
        - Folders
      properties:
        id:
          type: string
          description: Globally unique object identifier.
          example: '{folder_id}'
        object:
          type: string
          description: A string describing the type of object (value is "folder").
          example: folder
          default: folder
        account_id:
          type: string
          description: Reference to parent account object.
          example: '{account_id}'
        name:
          description: >-
            Standard categories type, based on
            [RFC-6154](http://tools.ietf.org/html/rfc6154).

            Can be one of the following:

            * inbox

            * all

            * trash

            * archive

            * drafts

            * sent

            * spam

            * important

            * null (regular user-created folder)
          type: string
          example: inbox
        display_name:
          description: >-
            Localized name of folder, matching what is presented in their other
            mail apps. If you are displaying folders, use this instead of
            `name`.
          type: string
          example: Inbox
    FolderCreateUpdate:
      title: FolderCreateUpdate
      type: object
      properties:
        display_name:
          description: The human-readable name for the new folder.
          type: string
          example: My Renamed Folder
        name:
          description: >-
            Specify `sent` to update this folder as the primary sent folder.
            This feature is supported for custom IMAP accounts only.
          type: string
          example: renamed-folder
    HostedAuth-SendAuthCode:
      description: ''
      type: object
      properties:
        client_id:
          type: string
          minLength: 1
          description: Your Nylas application's client ID.
        client_secret:
          type: string
          minLength: 1
          description: Your Nylas Developer App client secret.
        grant_type:
          type: string
          minLength: 1
          description: Set to `authorization_code`.
          default: authorization_code
        code:
          type: string
          minLength: 1
          description: The authorization code returned from `/oauth/authorize`.
      required:
        - client_id
        - client_secret
        - grant_type
        - code
    HostedAuthenticationToken:
      title: HostedAuthenticationToken
      type: object
      x-tags:
        - Hosted Authentication
      properties:
        access_token:
          type: string
          minLength: 1
          example: aec7cad*************
          description: The account access token. Use this to make API requests
        account_id:
          type: string
          minLength: 1
          example: d920**********
          description: ID of the account
        email_address:
          type: string
          minLength: 1
          example: swag@nylas.com
          description: The account email address
        provider:
          type: string
          minLength: 1
          enum:
            - eas
            - exchange
            - outlook
            - hotmail
            - yahoo
            - imap
            - gmail
            - custom
          example: eas
          description: The account provider
        token_type:
          type: string
          minLength: 1
          example: bearer
          default: barer
          description: The account token type. Always bearer for Hosted Authentication.
    virtual_calendar:
      title: Virtual Calendar
      type: object
      description: Pass in an empty object
      properties:
        client_id:
          type: string
        provider:
          type: string
          default: nylas
          example: nylas
          description: Always `nylas`.
        scopes:
          type: string
        email:
          type: string
          description: Can be any string
        name:
          type: string
        settings:
          type: object
          description: Empty object
    google_native_settings:
      title: Gmail Native Authentication Settings
      type: object
      description: ''
      properties:
        google_client_id:
          type: string
        google_client_secret:
          type: string
        google_refresh_token:
          type: string
      required:
        - google_client_id
        - google_client_secret
        - google_refresh_token
    ms_native_auth_activesync:
      title: Microsoft Exchange ActiveSync
      type: object
      description: ''
      properties:
        password:
          type: string
        eas_server_host:
          type: string
          description: 'Optional. If omitted, Autodiscovery is run. '
        username:
          type: string
          description: The username which is usually different from the email address.
      required:
        - password
        - username
    known_imap_native:
      title: Known Providers
      type: object
      properties:
        password:
          type: string
          description: >-
            Known providers. AOL, Yahoo, and iCloud. You might to provide an
            [app password](/docs/the-basics/provider-guides/app-passwords/).
      required:
        - password
    unknown_imap_native:
      title: Unknown IMAP Provider
      type: object
      properties:
        imap_host:
          type: string
        imap_port:
          type: integer
        imap_username:
          type: string
        imap_password:
          type: string
        smtp_host:
          type: string
        smtp_port:
          type: integer
        smtp_username:
          type: string
        smtp_password:
          type: string
        ssl_required:
          type: boolean
          default: true
    microsoft_ews_native_auth:
      title: Microsoft EWS Authentication with OAuth
      type: object
      description: ''
      properties:
        microsoft_client_id:
          type: string
        microsoft_client_secret:
          type: string
        microsoft_refresh_token:
          type: string
        redirect_uri:
          type: string
          description: Redirect URI that the was originally used to get the refresh token.
        service_account:
          type: boolean
      required:
        - microsoft_client_id
        - microsoft_client_secret
        - microsoft_refresh_token
        - redirect_uri
    eas_server_native_auth:
      title: EAS Server
      type: object
      description: ''
      properties:
        eas_server_host:
          type: string
        username:
          type: string
        password:
          type: string
      required:
        - eas_server_host
        - username
        - password
    gmail_service_account_native:
      title: Gmail Service Accounts
      type: object
      properties:
        service_account_json:
          type: object
          required:
            - type
            - client_id
            - private_key_id
            - project_id
            - private_key
            - client_email
            - auth_uri
            - token_uri
            - auth_provider_x509_cert_url
            - client_x509_cert_url
          properties:
            type:
              type: string
              default: service_account
              example: service_account
            client_id:
              type: string
            private_key_id:
              type: string
            project_id:
              type: string
            private_key:
              type: string
            client_email:
              type: string
            auth_uri:
              type: string
            token_uri:
              type: string
            auth_provider_x509_cert_url:
              type: string
            client_x509_cert_url:
              type: string
      required:
        - service_account_json
    microsoft_exchange_password_native:
      title: Exchange Accounts with Password
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        service_account:
          type: boolean
          default: true
      required:
        - username
        - password
        - service_account
    microsoft_exchange_native:
      title: Microsoft Exchange
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        exchange_server_host:
          type: string
          example: eas.outlook.com
    native_auth_providers:
      title: Native Authentication Providers
      type: object
      properties:
        client_id:
          description: Your client ID from the Nylas Developer console.
          type: string
        name:
          description: The full name of the user (e.g. “John Snow”).
          type: string
        email_address:
          description: The user’s email address.
          type: string
        provider:
          description: >-
            The format of the settings objec is dependent upon this field. If
            your provider isn't listed, use the generic settings.
          enum:
            - gmail
            - yahoo
            - exchange
            - outlook
            - imap
            - icloud
            - hotmail
            - aol
            - office365
          type: string
        settings:
          oneOf:
            - $ref: '#/components/schemas/google_native_settings'
            - $ref: '#/components/schemas/ms_native_auth_activesync'
            - $ref: '#/components/schemas/known_imap_native'
            - $ref: '#/components/schemas/unknown_imap_native'
            - $ref: '#/components/schemas/microsoft_ews_native_auth'
            - $ref: '#/components/schemas/eas_server_native_auth'
            - $ref: '#/components/schemas/gmail_service_account_native'
            - $ref: '#/components/schemas/microsoft_exchange_password_native'
            - $ref: '#/components/schemas/microsoft_exchange_native'
        scopes:
          type: string
          description: >-
            Any combination of supported [authentication
            scopes](docs/the-basics/authentication/authentication-scopes/).
            Service accounts only support calendar scopes.
          enum:
            - email.modify
            - email.read_only
            - email.send
            - email.folders_and_labels
            - email.metadata
            - email.drafts
            - calendar
            - calendar.read_only
            - room_resources.read_only
            - contacts
            - contacts.read_only
      description: ''
    NativeAuthPost:
      title: Native Authentication POST Request
      oneOf:
        - $ref: '#/components/schemas/virtual_calendar'
        - $ref: '#/components/schemas/native_auth_providers'
      description: ''
    AccountGet:
      title: Account-Get
      type: object
      description: '`/account`'
      properties:
        id:
          description: A globally unique object identifier.
          type: string
          example: awa6ltos76vz5hvphkp8k17nt
        object:
          description: A string describing the type of object.
          default: account
          type: string
          example: account
        account_id:
          description: ID of the account.
          type: string
          example: awa6ltos76vz5hvphkp8k17nt
        name:
          description: >-
            The full name of the user, used as the default from name when
            sending mail.
          type: string
          example: Dorothy Vaughan
        provider:
          type: string
          description: 'Specifies the provider that backs the account. '
          example: gmail
          enum:
            - gmail
            - eas
            - outlook
            - yahoo
            - icloud
            - custom
            - aol
            - fastmail
            - gandi
            - gmx
            - mail.ru
            - yandex
            - godaddy
            - hover
            - namecheap
            - bluehost
            - soverin
            - zimbra
            - 123_reg
            - '126'
            - qq
            - foxmail
            - qq_enterprise
            - aliyun
            - '163'
            - 163_ym
            - 163_qiye
            - yeah.net
            - '139'
            - ews
        organization_unit:
          description: >-
            Specify either label or folder, depending on the provider
            capabilities. See [Label vs. Folder](#link) for more.
          type: string
          example: label
        sync_state:
          type: string
          description: >-
            The syncing status of the account. See the [Sync Status](#link)
            documentation for possible values.
          example: running
          enum:
            - running
            - stopped
            - invalid
        linked_at:
          format: int32
          description: >-
            A Unix timestamp indicating when this account was originally
            connected to Nylas.
          type: integer
          example: 1470231381
        email_address:
          description: >-
            The canonical email address of the account. For Gmail accounts, this
            removes periods and plus suffixes.
          type: string
          example: dorothy@spacetech.com
    NativeAuthToken:
      title: NativeAuthToken
      type: object
      properties:
        access_token:
          type: string
        account_id:
          type: string
        billing_state:
          type: string
        email_address:
          type: string
        id:
          type: string
        linked_at:
          type: integer
        name:
          type: string
        object:
          type: string
        organization_unit:
          type: string
        provider:
          type: string
        sync_state:
          type: string
    AccountReturnAll:
      title: Return All Accounts
      type: object
      description: ''
      properties:
        account_id:
          type: string
          description: >-
            A reference to the parent account object (self-referential in this
            case.
          example: 622x1k5v1ujh55t6ucel7av4
        billing_state:
          type: string
          description: >-
            The billing state for the account. Values are `paid`, `cancelled`,
            or `deleted`.
          enum:
            - paid
            - cancelled
            - deleted
        email:
          type: string
          description: The email address of the account.
          example: al@particletech.com
        id:
          type: string
          description: A globally unique object identifier.
          example: 622x1k5v1ujh55t6ucel7av4
        provider:
          type: string
          description: Specifies the provider that backs the account.
          example: yahoo
        sync_state:
          type: string
          description: The current sync state for the account.
          example: running
          enum:
            - downloading
            - running
            - invalid_credentials
            - exception
            - sync_error
            - stopped
            - initializing
        trial:
          type: boolean
          description: The trial state for the application.
    ApplicationDetailsGet:
      title: ApplicationDetailsGet
      description: ''
      type: object
      properties:
        application_name:
          type: string
          minLength: 1
          description: The name of the Nylas application.
        icon_url:
          type: string
          minLength: 1
          example: >-
            https://inbox-developer-resources.s3.amazonaws.com/icons/da5b3a1c-448c-11e7-872b-0625ca014fd6
          description: Icon URL of the Nylas application.
        redirect_uris:
          type: array
          description: >-
            Array of strings. Each string is a single redirect_uri for the
            application.
          items:
            type: string
      required:
        - application_name
        - icon_url
        - redirect_uris
    Threads:
      title: Threads
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to parent account object
          example: '{account_id}'
        draft_ids:
          type: array
          description: Array of IDs for unsent drafts in the thread. May be null or absent
          items:
            type: string
        first_message_timestamp:
          type: number
          description: Timestamp when the thread began. UNIX
          example: 1557950729
        folders:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            The folder location(s) of a thread, present only if the parent
            account's organization_unit is folder. Note that threads can span
            folders, depending on the location of the thread's messages. See the
            folders docs for more info.
          items:
            type: object
            properties:
              display_name:
                type: string
                minLength: 1
                example: Inbox
              id:
                type: string
                minLength: 1
                example: '{folder_id}'
              name:
                type: string
                minLength: 1
                example: inbox
        has_attachments:
          type: boolean
          description: Indicates if the thread has files attached to it.
        id:
          type: string
          minLength: 1
          description: Globally unique object identifier
          example: '{thread_id}'
        last_message_received_timestamp:
          type: number
          description: |-
            Timestamp of the most recently received message.
            (Excludes messages sent by the account.) UNIX
          example: 1557950729
        last_message_sent_timestamp:
          type: number
          nullable: true
          description: Timestamp of the most recently sent message in the thread. UNIX
          example: 0
        last_message_timestamp:
          type: number
          description: Timestamp of the most recent message. UNIX
          example: 1557950729
        message_ids:
          type: array
          description: >-
            Array of IDs for messages within the thread, sorted by their
            timestamps
          items:
            type: string
        object:
          type: string
          minLength: 1
          description: A string describing the type of object (value is "thread")
          default: thread
          example: thread
        participants:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            List of participant objects computed from all messages in the
            thread.
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
        snippet:
          type: string
          minLength: 1
          description: >-
            A shortened plain-text preview of the most recent message in the
            thread
          example: 'Hi James, welcome.'
        starred:
          type: boolean
          description: 'Indicates one or more messages are starred, aka flagged (mutable)'
        subject:
          type: string
          minLength: 1
          description: Subject of the first message in the thread
          example: Security settings changed on your Yahoo account
        unread:
          type: boolean
          description: Indicates whether the thread contains unread messages (mutable)
        version:
          type: integer
          description: >-
            Incrementing value related to thread updates.

            You can use this to compare revisions, or invalidate your local
            cache.
          example: 1
        labels:
          type: array
          description: >-
            A list of label objects, present only if the parent account's
            organization_unit is label. These have Gmail-style semantics and can
            be arbitrarily added and removed from threads.
          items:
            type: string
    ThreadCreateUpdate:
      title: ThreadCreateUpdate
      type: object
      properties:
        unread:
          type: boolean
          description: Set to `true` to mark as unread; `false` to mark as read.
        starred:
          type: boolean
          description: Set to `true` to star a thread; `false` to un-star a thread.
        folder_id:
          type: string
          description: The ID of the folder to which to move this thread.
        label_ids:
          type: array
          description: >-
            The IDs of the labels to apply, overwriting all previous labels on
            the thread.
          items:
            type: string
    bcc:
      description: ''
      type: object
      properties:
        email:
          type: string
          minLength: 1
          example: Albert Einstein
        name:
          type: string
          minLength: 1
          example: al@particletech.com
    cc:
      description: ''
      type: object
      properties:
        email:
          type: string
          minLength: 1
          example: George Washington Carver
        name:
          type: string
          minLength: 1
          example: carver@agritech.com
    files:
      title: Files
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          example: 43jf3n4es3***
        content_type:
          type: string
          minLength: 1
          example: image/jpeg
          description: >-
            [Content
            Types](https://developer.nylas.com/docs/connectivity/email/file_attachment_media_types/)
        filename:
          type: string
          minLength: 1
          example: image.jpg
        id:
          type: string
          minLength: 1
          example: 9etjh6talp***
        object:
          type: string
          minLength: 1
          example: file
        size:
          type: number
          example: 72379
    from:
      title: from
      type: object
      properties:
        name:
          type: string
          example: Marie Curie
        email:
          type: string
          example: marie@radioactivity.com
    reply_to:
      title: reply_to
      type: object
      properties:
        email:
          type: string
          example: skwolek@fibers.com
        name:
          type: string
          example: Stephanie Kwolek
    to:
      title: to
      type: object
      properties:
        email:
          type: string
          example: dorothy@spacetech.com
        name:
          type: string
          example: Dorothy Vaughan
    labels:
      title: Labels
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          example: '{account_id}'
          description: Reference to parent account object.
        display_name:
          type: string
          minLength: 1
          example: keep
          description: >-
            Localized name of label, matching what is presented in their other
            mail apps. If you are displaying labels, use this instead of name.
          default: label
        id:
          type: string
          minLength: 1
          description: Globally unique object identifier.
          example: '{label_id}'
        name:
          type: string
          minLength: 1
          example: inbox
          description: >-
            Standard categories type, based on
            [RFC-6154](http://tools.ietf.org/html/rfc6154). If null, then a
            user-created label.
          enum:
            - inbox
            - all
            - trash
            - archive
            - drafts
            - sent
            - spam
            - important
            - keep
        object:
          type: string
          minLength: 1
          example: label
          description: A string describing the type of object
          default: label
    Messages:
      title: Messages
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to a parent account object.
          example: '{account_id}'
        bcc:
          type: array
          description: >
            An array of name+email pairs the message was bcc'd to. For received
            mail this is nearly always empty.
          items:
            $ref: '#/components/schemas/bcc'
        body:
          type: string
          minLength: 1
          description: >-
            The full HTML message body. Messages with only plain-text
            representations are up-converted to HTML.
          example: >-
            <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
            type=\"text/css\">\n html {\n -webkit-text-size-adjust:none;\n }\n
            body {\n width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
            width:280px;\n line-height: 16px;\n letter-spacing: 0.5px;\n }\n
            </style>\n <title>Welcome  ...  </html>
        cc:
          type: array
          description: An array of name+email pairs the message was cc'd to.
          items:
            $ref: '#/components/schemas/cc'
        date:
          type: number
          description: >-
            A timestamp of the date the message was received by the mail server.
            This may be different from the unverified Date header in raw message
            object. UNIX
          example: 1557950729
        events:
          type: array
          description: 'An array Event objects, if message includes calendar invites.'
          items:
            type: object
        files:
          type: array
          description: 'An array of File objects, if the message includes attachments.'
          items:
            $ref: '#/components/schemas/files'
        folder:
          type: object
          description: >-
            A single folder object indicating the location of the message. This
            is present only if the parent account's organization_unit is folder.
            This property can be changed to move the message to a different
            folder.
          properties:
            display_name:
              type: string
              minLength: 1
            id:
              type: string
              minLength: 1
            name:
              type: string
              minLength: 1
        from:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            A list of name+email pairs the message was sent from. This is
            usually one object, but can be many.
          items:
            $ref: '#/components/schemas/from'
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
        object:
          type: string
          minLength: 1
          description: A string describing the type of object (value is "message").
          default: message
        reply_to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name+email pairs replies should be sent to.
          items:
            $ref: '#/components/schemas/reply_to'
        snippet:
          type: string
          minLength: 1
          description: A shortened plain-text preview of the message body.
        starred:
          type: boolean
          description: Indicates the message is in a starred or flagged state (mutable).
        subject:
          type: string
          minLength: 1
          description: The subject line of the message.
        thread_id:
          type: string
          minLength: 1
          description: Reference to a parent thread object (all messages have a thread).
        to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name+email pairs the message was sent to.
          items:
            $ref: '#/components/schemas/to'
        unread:
          type: boolean
          description: >-
            Indicates the message is unread. This is the default for new
            incoming mail (mutable).
        labels:
          type: array
          description: >-
            A list of Label objects. This is present only if the parent
            account's organization_unit is label. These are Gmail-style and can
            be arbitrarily added and removed from messages.
          items:
            $ref: '#/components/schemas/labels'
        model_version:
          type: string
          example: d6d33291
          description: >-
            Model version of the Categorizer. Only returns as part of
            [Categorize Message Response](/docs/api/#put-/neural/categorize).
        categorized_at:
          type: number
          example: 1615904978.01382
          description: >-
            Unix timestamp of when the message was categorized. Only returns as
            part of Categorize Message Response.Only returns as part of
            [Categorize Message Response](/docs/api/#put-/neural/categorize).
        category:
          type: string
          description: >-
            Category of the message. Only returns as part of [Categorize Message
            Response](/docs/api/#put-/neural/categorize.
          enum:
            - feed
            - conversation
        subcategories:
          type: array
          description: Only returns as part of Categorize response
          items:
            type: string
            enum:
              - ooo
            example: ooo
    MessagesCreateUpdate:
      title: MessagesCreateUpdate
      type: object
      properties:
        unread:
          type: boolean
          description: Set to `true` to mark as unread; `false` to mark as read.
        starred:
          type: boolean
          description: Set to `true` to star a thread; `false` to un-star a thread.
        folder_id:
          type: string
          description: The ID of the folder to which to move this thread.
        label_ids:
          type: array
          description: >-
            The IDs of the labels to apply, overwriting all previous labels on
            the thread.
          items:
            type: string
    Labels:
      title: Labels
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          example: '{account_id}'
          description: Reference to parent account object.
        display_name:
          type: string
          minLength: 1
          example: keep
          description: >-
            Localized name of label, matching what is presented in their other
            mail apps. If you are displaying labels, use this instead of name.
          default: label
        id:
          type: string
          minLength: 1
          description: Globally unique object identifier.
          example: '{label_id}'
        name:
          type: string
          minLength: 1
          example: inbox
          description: >-
            Standard categories type, based on
            [RFC-6154](http://tools.ietf.org/html/rfc6154). If null, then a
            user-created label.
          enum:
            - inbox
            - all
            - trash
            - archive
            - drafts
            - sent
            - spam
            - important
            - keep
        object:
          type: string
          minLength: 1
          example: label
          description: A string describing the type of object
          default: label
    filesSub:
      title: files
      type: object
      properties:
        content_disposition:
          type: string
          description: File type. Will be attachment.
          default: attachment
        content_type:
          type: string
          description: >-
            Type of attachment. [Content
            Types](https://developer.nylas.com/docs/connectivity/email/file_attachment_media_types/)
        filename:
          type: string
          description: Name of the file
        id:
          type: string
          description: ID of the file
        size:
          type: integer
          description: File size
    labelsSub:
      title: labels
      type: object
      properties:
        id:
          type: string
          description: Label ID
        display_name:
          type: string
          description: Labels display name
        name:
          type: string
          description: Label name
    folder:
      title: folder
      type: object
      properties:
        id:
          type: string
          description: 'Folder id. '
        display_name:
          type: string
          description: Folder display name
        name:
          type: string
          description: Folder name
    Drafts:
      title: Drafts
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: A reference to the parent account object.
          example: '{account_id}'
        bcc:
          type: array
          description: An array of name-email pairs of recipients to be bcc'd.
          items:
            $ref: '#/components/schemas/bcc'
        body:
          type: string
          minLength: 1
          description: The full HTML draft body text.
        cc:
          type: array
          description: An array of name-email pairs of recipients to be cc'd.
          items:
            $ref: '#/components/schemas/cc'
        date:
          type: number
          description: 'The UNIX timestamp of the last modification of the draft. '
        events:
          type: array
          description: 'An array of event objects, if the draft includes calendar invites.'
          items:
            type: object
        files:
          type: array
          description: 'An array of file objects, if the draft includes attachments.'
          items:
            $ref: '#/components/schemas/filesSub'
        from:
          type: array
          uniqueItems: true
          minItems: 1
          description: Array containing a single name+email pair to set as the from header.
          items:
            $ref: '#/components/schemas/from'
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
        labels:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            A list of label objects, present only if the parent account's
            organization_unit is label. These have Gmail-style semantics and can
            be arbitrarily added and removed from messages.
          items:
            $ref: '#/components/schemas/labelsSub'
        object:
          type: string
          minLength: 1
          description: A string describing the type of object.
          default: draft
        reply_to:
          type: array
          description: >-
            An array of name-email pairs to set an alternative Reply-To header
            in the final sent message.
          items:
            $ref: '#/components/schemas/reply_to'
        reply_to_message_id:
          description: >-
            The ID of a message to which this draft is a reply, allowing the
            sending API to include threading-specific headers for other mail
            clients. Can also return as `null` if no message_id is specified.
          type: string
        snippet:
          type: string
          minLength: 1
          description: A shortened plain-text preview of the draft body.
        starred:
          type: boolean
          description: Starred or flagged state (mutable).
        subject:
          type: string
          minLength: 1
          description: The subject line of the draft.
        thread_id:
          type: string
          minLength: 1
          description: >-
            A reference to the parent thread object. If this is a new draft, the
            thread will be empty.
        to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name-email pairs of recipients.
          items:
            $ref: '#/components/schemas/to'
        unread:
          type: boolean
          description: Indicates an unread state for the draft.
        version:
          type: number
          description: >-
            Incrementing value related to draft updates.

            You can use this to compare revisions or to invalidate your local
            cache.
        folder:
          $ref: '#/components/schemas/folder'
    DraftCreate:
      title: Create or Send a Message
      type: object
      properties:
        subject:
          type: string
          description: The subject line of the draft.
          example: From Nylas
        to:
          type: array
          description: The name-email pairs of the recipients.
          items:
            $ref: '#/components/schemas/to'
        cc:
          type: array
          description: The name-email pairs of the recipients to be cc’d.
          items:
            $ref: '#/components/schemas/cc'
        bcc:
          type: array
          description: The name-email pairs of the recipients to be bcc’d.
          items:
            $ref: '#/components/schemas/bcc'
        from:
          type: array
          description: >-
            An array containing a single name and email pair, to set as the from
            header.
          items:
            $ref: '#/components/schemas/from'
        reply_to:
          type: array
          description: >-
            An array of name and email pairs, to set an alternative Reply-To
            header in the final sent message. Note that not all providers
            support setting this in a draft.
          items:
            $ref: '#/components/schemas/reply_to'
        reply_to_message_id:
          type: string
          description: The ID of the message that this draft is a reply to.
        body:
          type: string
          description: The full HTML draft body text.
          example: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
        file_ids:
          type: array
          description: >-
            An array of IDs for the files to attach, if the draft includes
            attachments. Note that creating a draft will fail, if these files
            have not yet been uploaded.
          items:
            type: string
      description: Create a draft or send a message directly.
    JobStatus:
      title: JobStatus
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to parent account object.
          example: eof2wrhqkl7kdwhy9hylpv9o9
        action:
          type: string
          minLength: 1
          description: Action performed on a given object
          enum:
            - create_calendar
            - update_calendar
            - delete_calendar
            - create_contact
            - update_contact
            - delete_contact
            - create_folder
            - update_folder
            - delete_folder
            - create_label
            - update_label
            - create_event
            - update_event
            - delete_event
            - update_message
            - save_draft
          example: update_message
        created_at:
          type: number
          description: >-
            Timestamp indicating when the job status was created. UNIX
            timestamp 
          example: 1592374298
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
          example: 8e570s302fdazx9zqwiuk9jqn
        job_status_id:
          type: string
          minLength: 1
          description: Globally unique id representing the job.
          example: 48pp6ijzrxpw9jors9ylnsxnf
        object:
          type: string
          minLength: 1
          description: A string describing the type of object this job status refers to.
          enum:
            - message
            - calendar
            - folder
            - event
            - contact
            - label
            - drafts
          example: message
        status:
          type: string
          minLength: 1
          description: >-
            A string indicating the job status. Can be successful, pending, or
            failed.
          enum:
            - pending
            - failed
            - successful
          example: successful
    ReturnSingleDraft:
      title: ReturnSingleDraft
      allOf:
        - type: object
          properties:
            job_status_id:
              $ref: '#/components/schemas/JobStatus'
        - $ref: '#/components/schemas/Drafts'
    version:
      title: version
      type: object
      properties:
        version:
          type: integer
          description: Version of the draft you want to update
      required:
        - version
    DraftUpdate:
      title: Update a Draft
      allOf:
        - $ref: '#/components/schemas/DraftCreate'
        - $ref: '#/components/schemas/version'
      description: ''
    DraftSend:
      title: DraftSend
      type: object
      x-examples: {}
      description: ''
      properties:
        draft_id:
          type: string
          minLength: 1
          example: '{draft_id}'
        version:
          type: number
        tracking:
          type: object
          properties:
            links:
              type: boolean
            opens:
              type: boolean
            thread_replies:
              type: boolean
            payload:
              type: string
              minLength: 1
      required:
        - draft_id
        - version
    Files:
      title: Files
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          example: 43jf3n4es3***
        content_type:
          type: string
          minLength: 1
          example: image/jpeg
          description: >-
            [Content
            Types](https://developer.nylas.com/docs/connectivity/email/file_attachment_media_types/)
        filename:
          type: string
          minLength: 1
          example: image.jpg
        id:
          type: string
          minLength: 1
          example: 9etjh6talp***
        object:
          type: string
          minLength: 1
          example: file
        size:
          type: number
          example: 72379
    Calendar:
      title: Calendar
      description: ''
      type: object
      properties:
        description:
          type: string
          description: Description of the Calendar
          example: Emailed events
        id:
          type: string
          minLength: 1
          example: '{calendar_id}'
          description: Globally unique object identifier
        name:
          type: string
          minLength: 1
          example: Calendar
          description: Name of the Calendar
        account_id:
          type: string
          minLength: 1
          example: '{account_id}'
          description: Reference to parent account object
        object:
          type: string
          minLength: 1
          example: calendar
          description: A string describing the type of object.
          default: calendar
        read_only:
          type: boolean
          description: True if the Calendar is read only
        location:
          type: string
          nullable: true
        timezone:
          type: string
          nullable: true
          description: >-
            Calendar timezone. Will return the UTC timezone for example
            America/Chicago. If unknown returns UTC.
          example: America/Chicago
        is_primary:
          type: boolean
          nullable: true
          description: If the calendar is primary. If unknown returns null.
    CalendarCreate:
      title: CalendarCreate
      description: ''
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: >-
            Name of the Calendar. Required to create a calendar. **iCloud
            accounts can only change the calendar name for PUT requests.**
          example: My New Calendar
        description:
          type: string
          minLength: 1
          description: Description of the Calendar
          example: Description of my new calendar
        location:
          type: string
          minLength: 1
          description: Geographic location of the calendar as free-form text
          example: Location description
        timezone:
          type: string
          minLength: 1
          description: >-
            [IANA time zone database](https://en.wikipedia.org/wiki/Tz_database)
            formatted string (e.g. America/New_York). Not supported for iCloud.
          example: America/Los_Angeles
    CalendarResponse:
      title: CalendarResponse
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to parent account object
          example: eof2wrhqkl7kdwhy9hylpv9o9
        description:
          type: string
          minLength: 1
          description: Description of the Calendar
          example: Description of my new calendar
        id:
          type: string
          minLength: 1
          description: Globally unique object identifier
          example: 8e570s302fdazx9zqwiuk9jqn
        is_primary:
          type: boolean
          description: >-
            A boolean denoting whether this is the primary calendar associated
            with a account
        job_status_id:
          type: string
          minLength: 1
          description: Job status ID for the calendar modification.
          example: 48pp6ijzrxpw9jors9ylnsxnf
        location:
          type: string
          minLength: 1
          description: Geographic location of the calendar as free-form text
          example: Location description
        name:
          type: string
          minLength: 1
          description: Name of the Calendar
          example: My New Calendar
        object:
          type: string
          minLength: 1
          description: A string describing the type of object
          default: calendar
          example: calendar
        read_only:
          type: boolean
          description: True if the Calendar is read only
        timezone:
          type: string
          minLength: 1
          description: >-
            [IANA time zone database](https://en.wikipedia.org/wiki/Tz_database)
            formatted string (e.g. America/New_York).
          example: America/Los_Angeles
    time_slots:
      description: ''
      type: object
      title: ''
      properties:
        object:
          type: string
          minLength: 1
          example: time_slot
          default: time_slot
          description: 'A string describing the type of object '
        status:
          type: string
          minLength: 1
          example: busy
          description: Value is busy which indicates this time_slot is busy.
        start_time:
          type: number
          example: 1409594400
          description: Unix timestamp of the start time of the `time_slot`.
        end_time:
          type: number
          example: 1409598000
          description: Unix timestamp of the end time of the `time_slot`.
    FreeBusy:
      description: ''
      type: object
      properties:
        object:
          type: string
          minLength: 1
          default: free_busy
          example: free_busy
          description: A string describing the type of object
        email:
          type: string
          minLength: 1
          description: Which email this free_busy information applies to.
        time_slots:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/time_slots'
      x-examples: {}
    participants:
      title: participants
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The participant's full name (optional)
          example: Dorothy Vaughan
        email:
          type: string
          description: The participant's email address.
          example: dorothy@spacetech.com
        status:
          type: string
          description: >-
            Attendance status. Allowed values are yes, maybe, no and noreply.
            Defaults is noreply
          default: noreply
          enum:
            - 'yes'
            - 'no'
            - maybe
            - noreply
        comment:
          type: string
          nullable: true
          description: A comment by the participant (optional)
      required:
        - email
    timespan:
      description: >-
        A span of time with a specific beginning and end time. An hour lunch
        meeting would be represented as timespan subobjects.
      type: object
      properties:
        start_time:
          type: number
          description: The start time of the event.
          example: 1409594400
        end_time:
          type: number
          example: 1409598000
          description: The end time of the event.
        start_timezone:
          type: string
          minLength: 1
          example: America/New_York
          description: >-
            `start_timezone` and `end_timezon`e must be submitted together.
            Timezone using [IANA
            formatted](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
            string.
        end_timezone:
          type: string
          minLength: 1
          example: America/New_York
          description: >-
            `start_timezone` and `end_timezon`e must be submitted together.
            Timezone using [IANA
            formatted](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
            string.
    date:
      title: date
      type: object
      description: >-
        A specific date for an event, without a clock-based start or end time.
        Your birthday and holidays would be represented as date subobjects.
      properties:
        date:
          type: string
          example: '1912-06-23'
          description: >-
            Date of occurance in [ISO 8601
            format](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates).
    datespan:
      description: >-
        A span of entire days without specific times. A business quarter or
        academic semester would be represented as datespan subobjects.
      type: object
      properties:
        start_date:
          type: string
          minLength: 1
          description: >-
            The start date in [ISO 8601
            format](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates).
          example: '1815-12-10'
        end_date:
          type: string
          description: >-
            The start date in [ISO 8601
            format](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates).
          example: '1852-11-27'
    conference:
      description: ''
      type: object
      title: ''
      properties:
        provider:
          type: string
          minLength: 1
          enum:
            - WebEx
            - Zoom Meeting
            - GoToMeeting
            - Google Meet
        details:
          oneOf:
            - properties:
                password:
                  type: string
                pin:
                  type: string
                url:
                  type: string
              description: WebEx
            - properties:
                meeting_code:
                  type: string
                password:
                  type: string
                url:
                  type: string
              description: Zoom Meeting
            - properties:
                meeting_code:
                  type: string
                phone:
                  type: array
                  items:
                    type: string
                url:
                  type: string
              description: GoToMeeting
            - properties:
                phone:
                  type: array
                  items:
                    type: string
                pin:
                  type: string
                url:
                  type: string
              description: Google Meet
          type: object
      required:
        - provider
        - details
      examples: []
    recurrence:
      description: >-
        For iCloud accounts, changing an event from recurring to non-recurring
        is not supported. You can create, update or delete recurring events
        information.
      type: object
      properties:
        rrule:
          type: array
          description: >-
            n array of RRULE and EXDATE strings. See
            [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.8.5) for
            more details. Please note that EXRULE and RDATE strings are not
            supported for POST or PUT requests at this time. [This
            tool](http://jakubroztocil.github.io/rrule/) is helpful in
            understanding the RRULE spec.
          items:
            type: string
            example: 'RRULE:FREQ=WEEKLY;BYDAY=MO'
        timezone:
          type: string
          minLength: 1
          example: America/New_York
          description: >-
            [IANA time zone
            database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
            formatted string (e.g. America/New_York).
      required:
        - rrule
        - timezone
    eventMetadata:
      title: eventMetadata
      type: object
      properties:
        your-key:
          type: string
          description: >-
            Enter your key and value pair as strings. In beta. See [Event
            Metadata](/docs/connectivity/calendar/event-metadata/).
    Events:
      title: Events
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: A reference to the parent account object.
          example: '{account_id}'
        busy:
          type: boolean
          description: >-
            On shared or public calendars, indicates whether to show this
            event's time block as available. (Also called transparency in some
            systems.)
        calendar_id:
          type: string
          minLength: 1
          description: A reference to the parent calendar object.
          example: '{calendar_id}'
        description:
          type: string
          description: >-
            The description of the event, which may contain more details or an
            agenda.
          maxLength: 8192
          example: Coffee meeting
          minLength: 0
        ical_uid:
          type: string
          nullable: true
          minLength: 1
          description: >-
            Unique identifier as defined in
            [RFC5545](https://tools.ietf.org/html/rfc5545#section-3.8.4.7). It
            is used to uniquely identify events across calendaring systems. 
          example: '{ical_uid}'
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
          example: '{event_id}'
        location:
          type: string
          nullable: true
          description: 'A location, such as a physical address or meeting room name.'
        message_id:
          type: string
          nullable: true
          description: Value is null unless referencing iCalendar file event sync.
        object:
          type: string
          minLength: 1
          description: A string describing the type of object.
          default: event
          example: event
        owner:
          type: string
          minLength: 1
          description: >-
            The owner of the event, usually specified with their email or name
            and email.
          example: <some_email@email.com>
        participants:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            An array of other participants invited to the event. Keys are
            `email`, `name`, `status`. Participants may also be rooms or
            resources.
          items:
            $ref: '#/components/schemas/participants'
        read_only:
          type: boolean
          description: Indicates whether the event can be modified.
        title:
          type: string
          minLength: 1
          description: The title of the event.
          maxLength: 1024
          example: 'Remote Event: Group Yoga Class'
        when:
          description: >-
            One of four sub-objects corresponding to the time and duration of an
            event: time, timespan, date, or datespan.
          anyOf:
            - $ref: '#/components/schemas/timespan'
            - $ref: '#/components/schemas/date'
            - $ref: '#/components/schemas/datespan'
            - $ref: '#/components/schemas/datespan'
        status:
          type: string
          description: 'One of the following values: confirmed, tentative, or cancelled.'
          enum:
            - confirmed
            - tentative
            - cancelled
          example: confirmed
        conferencing:
          $ref: '#/components/schemas/conference'
        job_status_id:
          type: string
          description: Job status ID is used to check on the status of the request.
        recurrence:
          $ref: '#/components/schemas/recurrence'
        metadata:
          $ref: '#/components/schemas/eventMetadata'
    time:
      description: >-
        The time subobject corresponds a single moment in time, which has no
        duration. Reminders or alarms are represented as time subobjects.
      type: object
      properties:
        time:
          type: number
          description: A UNIX timestamp (UTC).
          example: 1408875644
        timezone:
          type: string
          minLength: 1
          description: >-
            If `timezone` is present, then the value for `time` will be read
            with timezone. Timezone using [IANA formatted
            string](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
          example: America/New_York
    EventCreateUpdate:
      title: EventCreateUpdate
      type: object
      properties:
        title:
          type: string
          minLength: 1
          description: >-
            Creates an event with the specified title. This value is usually
            short.
          example: Birthday Party
        calendar_id:
          type: string
          minLength: 1
          description: >-
            Creates an event in the specified calendar ID. See Calendar for more
            info.
          example: 947kpa7ih22bfkeujpkfqn5bu
        busy:
          type: boolean
          description: >-
            Creates an event with the specified busy state. This value
            determines whether to show this event’s time block as available on
            shared or public calendars. This is also called transparency in some
            systems.
        read_only:
          type: boolean
        participants:
          type: array
          uniqueItems: true
          minItems: 1
          description: 'Creates an event with the specified participants. '
          items:
            $ref: '#/components/schemas/participants'
        description:
          type: string
          minLength: 1
          description: >-
            Creates an event with the specified description. This value may
            contain more details about an event or an agenda.
          example: Come ready to skate
        when:
          description: >-
            One of four sub-objects corresponding to the time and duration of an
            event: time, timespan, date, or datespan.
          oneOf:
            - $ref: '#/components/schemas/time'
            - $ref: '#/components/schemas/timespan'
            - $ref: '#/components/schemas/date'
            - $ref: '#/components/schemas/datespan'
        location:
          type: string
          description: >-
            Creates an event with the specified location. For example a physical
            address or meeting room name.
          example: Roller Rink
        recurrence:
          $ref: '#/components/schemas/recurrence'
        conferencing:
          $ref: '#/components/schemas/conference'
        reminder_minutes:
          type: string
          description: >-
            Available for POST only. <br>The number of minutes before the event
            start time when a user wants a reminder for this event. Available
            for Microsoft,Google, and iCloud. <br>Reminder minutes need to be
            entered in the following format: `"[]"`. <br>If left blank `"[]"`or
            not included, Microsoft events default to 15 minutes, Google events
            will default to calendar settings. <br>`"[-1]"` - No reminder
            sent.<br> `"[0]"` - Reminder at the start of the event. <br>`"[20]"`
            If set to more than 0, send a reminder that many minutes before the
            start of the event. In this example, a reminder is sent 20 minutes
            before the start of the event.
          example: '[20]'
        reminder_method:
          type: string
          description: >-
            Available for POST only. Method to reminder user of event. Available
            for Google only. `email` and `popup` are the available options.
            Default is `popup`. iCloud account support `display` and `sound`.
          enum:
            - email
            - popup
            - display
            - sound
          default: popup
          example: popup
        metadata:
          $ref: '#/components/schemas/eventMetadata'
      required:
        - calendar_id
    RoomResources:
      title: RoomResources
      type: object
      properties:
        object:
          type: string
          minLength: 1
          example: room_resource
          default: room_resource
          description: A string describing the type of object
        email:
          type: string
          minLength: 1
          example: training-room-1A@google.com
          description: The email address of the resource.
        name:
          type: string
          minLength: 1
          example: Training Room 1A
          description: The name of the resource.
        capacity:
          type: string
          minLength: 1
          example: '8'
          description: The capacity of the room set the organization admin.
        building:
          type: string
          minLength: 1
          description: The building identifier set by the organization admin.
        floor_name:
          type: string
          nullable: true
          minLength: 1
          example: '7'
          description: >-
            Microsoft uses two fields to identify floors, floor name, and floor
            label. We use floor label to populate this field. GSuite will return
            the floor name.
        floor_number:
          type: string
          description: >-
            Microsoft uses floor number to popular this field. GSuite will
            always return null.
          example: '7'
      description: ''
    emails-type:
      title: emails
      type: object
      properties:
        email:
          type: string
          description: The email address. This is a free-form string.
          example: kat@spacetech.com
        type:
          type: string
          description: The type of the email address.
          enum:
            - work
            - personal
          example: work
    im_addresses:
      title: im_addresses
      type: object
      properties:
        type:
          type: string
          description: The type of the IM address.
          enum:
            - gtalk
            - aim
            - yahoo
            - lync
            - skype
            - qq
            - msn
            - icc
            - jabber
          example: aim
        im_address:
          type: string
          minLength: 1
          description: The IM address. This is a free-form string.
          example: myaimaddress
    phone_numbers_type:
      title: phone_numbers_type
      type: object
      properties:
        number:
          type: string
          minLength: 1
          example: 1 800 123 4567
        type:
          type: string
          minLength: 1
          description: The type of phone number.
          enum:
            - business
            - home
            - mobile
            - page
            - business_fax
            - home_fax
            - organization_main
            - assistant
            - radio
            - other
          example: business
    physical_addresses:
      title: physical_addresses
      type: object
      properties:
        format:
          type: string
          description: >-
            The format of the address. The value can be structured or
            unstructured. Currently only structured addresses are supported in
            PUT or POST calls to /contacts.
        type:
          type: string
          description: 'The type of the address. The value can be work, home or other.'
          enum:
            - work
            - home
            - other
        street_address:
          type: string
          description: 'The street address, which includes a house number and street name.'
        city:
          type: string
          description: The city of the address.
        postal_code:
          type: string
          description: The postal code of the address.
        state:
          type: string
          description: >-
            The state of the address. This can be a full name or the state
            abbreviation.
        country:
          type: string
          description: >-
            The country of the address. This can be a full name or the country
            abbreviation.
    webpages_type:
      title: webpages_type
      type: object
      properties:
        type:
          type: string
          description: >-
            Type of Web Page. The default values are profile, blog, homepage or
            work.

            You can add in a custom type when creating a type and Nylas will
            read custom types from incoming contact data.
          enum:
            - profile
            - blog
            - homepage
            - work
        url:
          type: string
          description: The web page url. This is a free-form string.
    groups:
      title: groups
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
        object:
          type: string
          minLength: 1
          description: A string describing the type of object.
          default: contact_group
        account_id:
          type: string
          minLength: 1
          description: A reference to the parent account object.
        name:
          type: string
          minLength: 1
          description: The name of the Contact Group.
        path:
          type: string
          minLength: 1
          description: >-
            A fully qualified path of the Contact Group, if nesting is permitted
            by the account's provider.
    Contact:
      title: Contact
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: A reference to the parent account object.
          example: x2x2x2x2x2x2x2x2x2x2x2
        birthday:
          type: string
          minLength: 1
          description: The birthday of contact in the format `YYYY-MM-DD`.
          example: '1960-12-31'
        company_name:
          type: string
          minLength: 1
          description: The name of the company
          example: Nylas
        emails:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/emails-type'
        given_name:
          type: string
          minLength: 1
          description: The given name of the contact.
          example: John
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
          example: z3z3z3z3z3z3z3z3z3z3z3
        im_addresses:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/im_addresses'
        job_title:
          type: string
          minLength: 1
          description: The job title of the contact.
          example: Software Engineer
        manager_name:
          type: string
          minLength: 1
          description: The name of the manager for the contact.
          example: Bill the manager
        middle_name:
          type: string
          minLength: 1
          description: The middle name of the contact.
          example: Jacob
        nickname:
          type: string
          minLength: 1
          description: The nickname of the contact.
          example: JD
        notes:
          type: string
          minLength: 1
          description: >-
            Notes about the contact. Accepts any string information. Supported
            by Google, iCloud, and Microsoft.


            Some IMAP providers might not support notes. Check your IMAP
            provider.
          example: Loves ramen
        object:
          type: string
          minLength: 1
          description: 'A string describing the type of object '
          default: contact
          example: contact
        office_location:
          type: string
          minLength: 1
          description: >-
            The location of the office for the contact. This is a free-form
            field.
          example: 123 Main Street
        phone_numbers:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/phone_numbers_type'
        physical_addresses:
          type: array
          items:
            $ref: '#/components/schemas/physical_addresses'
        picture_url:
          type: string
          minLength: 1
          description: >-
            The URL of endpoint for the contact's picture. See
            /contacts/{id}/picture for more.
          example: 'https://api.nylas.com/contacts/427abc427abc427abc/picture'
        suffix:
          type: string
          minLength: 1
          description: 'The suffix of the contact. (e.g. Jr., Sr., III).'
        surname:
          type: string
          minLength: 1
          description: The surname of the contact.
        web_pages:
          type: array
          items:
            $ref: '#/components/schemas/webpages_type'
        groups:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/groups'
        source:
          type: string
          description: Where the contact was created from.
          enum:
            - address_book
            - inbox
    CreateUpdateContact:
      title: CreateUpdateContact
      type: object
      properties:
        birthday:
          type: string
          minLength: 1
          description: The birthday of contact in the format `YYYY-MM-DD`.
          example: '1960-12-31'
        company_name:
          type: string
          minLength: 1
          description: The name of the company
          example: Nylas
        emails:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/emails-type'
        given_name:
          type: string
          minLength: 1
          description: The given name of the contact.
          example: John
        im_addresses:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/im_addresses'
        job_title:
          type: string
          minLength: 1
          description: The job title of the contact.
          example: Software Engineer
        manager_name:
          type: string
          minLength: 1
          description: The name of the manager for the contact.
          example: Bill the manager
        middle_name:
          type: string
          minLength: 1
          description: The middle name of the contact.
          example: Jacob
        nickname:
          type: string
          minLength: 1
          description: The nickname of the contact.
          example: JD
        notes:
          type: string
          minLength: 1
          description: >-
            Notes about the contact. Accepts any string information.  Supported
            by Google, iCloud, and Microsoft.


            Some IMAP providers might not support notes. Check your IMAP
            provider.
          example: Loves ramen
        office_location:
          type: string
          minLength: 1
          description: >-
            The location of the office for the contact. This is a free-form
            field.
          example: 123 Main Street
        phone_numbers:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/phone_numbers_type'
        physical_addresses:
          type: array
          items:
            $ref: '#/components/schemas/physical_addresses'
        suffix:
          type: string
          minLength: 1
          description: 'The suffix of the contact. (e.g. Jr., Sr., III).'
        surname:
          type: string
          minLength: 1
          description: The surname of the contact.
        web_pages:
          type: array
          items:
            $ref: '#/components/schemas/webpages_type'
        group:
          type: string
          description: Creates a new contact associated to the specified contact group id.
    ContactCreateUpdate:
      title: ContactCreateUpdate
      type: object
      properties:
        birthday:
          type: string
          minLength: 1
          description: The birthday of contact in the format `YYYY-MM-DD`.
          example: '1960-12-31'
        company_name:
          type: string
          minLength: 1
          description: The name of the company
          example: Nylas
        emails:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/emails-type'
        given_name:
          type: string
          minLength: 1
          description: The given name of the contact.
          example: John
        im_addresses:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/im_addresses'
        job_title:
          type: string
          minLength: 1
          description: The job title of the contact.
          example: Software Engineer
        manager_name:
          type: string
          minLength: 1
          description: The name of the manager for the contact.
          example: Bill the manager
        middle_name:
          type: string
          minLength: 1
          description: The middle name of the contact.
          example: Jacob
        nickname:
          type: string
          minLength: 1
          description: The nickname of the contact.
          example: JD
        notes:
          type: string
          minLength: 1
          description: >-
            Notes about the contact. Accepts any string information.  Supported
            by Google, iCloud, and Microsoft.


            Some IMAP providers might not support notes. Check your IMAP
            provider.
          example: Loves ramen
        office_location:
          type: string
          minLength: 1
          description: >-
            The location of the office for the contact. This is a free-form
            field.
          example: 123 Main Street
        phone_numbers:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/phone_numbers_type'
        physical_addresses:
          type: array
          items:
            $ref: '#/components/schemas/physical_addresses'
        suffix:
          type: string
          minLength: 1
          description: 'The suffix of the contact. (e.g. Jr., Sr., III).'
        surname:
          type: string
          minLength: 1
          description: The surname of the contact.
        web_pages:
          type: array
          items:
            $ref: '#/components/schemas/webpages_type'
        group:
          type: string
          description: Creates a new contact associated to the specified contact group id.
    SearchMessages:
      description: ''
      type: object
      x-examples: {}
      properties:
        account_id:
          type: string
          minLength: 1
          example: '{account_id}'
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/bcc'
        body:
          type: string
          minLength: 1
        cc:
          type: array
          items:
            $ref: '#/components/schemas/cc'
        date:
          type: number
        events:
          type: array
          items:
            $ref: '#/components/schemas/SearchMessages'
        files:
          type: array
          items:
            $ref: '#/components/schemas/files'
        folder:
          type: object
          properties:
            display_name:
              type: string
              minLength: 1
            id:
              type: string
              minLength: 1
            name:
              type: string
              minLength: 1
        from:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/from'
        id:
          type: string
          minLength: 1
          example: '{message_id}'
        object:
          type: string
          minLength: 1
        reply_to:
          type: array
          items:
            $ref: '#/components/schemas/reply_to'
        reply_to_message_id:
          type: string
          nullable: true
          example: '{reply_to_message_id}'
        snippet:
          type: string
          minLength: 1
        starred:
          type: boolean
        subject:
          type: string
          minLength: 1
        thread_id:
          type: string
          minLength: 1
        to:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/reply_to'
        unread:
          type: boolean
        version:
          type: number
      required:
        - snippet
        - starred
        - subject
        - thread_id
        - to
        - unread
        - version
    SearchThreads:
      title: SearchThreads
      type: array
      items:
        type: object
        properties:
          account_id:
            type: string
            minLength: 1
          draft_ids:
            type: array
            items:
              type: string
          first_message_timestamp:
            type: number
          folders:
            type: array
            uniqueItems: true
            minItems: 1
            items:
              type: object
              properties:
                display_name:
                  type: string
                  minLength: 1
                id:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
          has_attachments:
            type: boolean
          id:
            type: string
            minLength: 1
          last_message_received_timestamp:
            type: integer
            nullable: true
          last_message_sent_timestamp:
            type: integer
            nullable: true
          last_message_timestamp:
            type: number
          message_ids:
            type: array
            items:
              type: object
          object:
            type: string
            minLength: 1
          participants:
            type: array
            items:
              type: object
          snippet:
            type: string
          starred:
            type: boolean
          subject:
            type: string
            minLength: 1
          unread:
            type: boolean
          version:
            type: number
    Webhooks:
      title: Webhooks
      type: object
      description: ''
      properties:
        application_id:
          type: string
          minLength: 1
          description: A reference to the parent application object.
          example: 8eejdhpc5dv04w6ea8lzlxtkt
        callback_url:
          type: string
          minLength: 1
          description: The URL where notifications are posted.
          example: 'https://97a5db5e7c59.ngrok.io/webhook'
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
          example: 7b5y8f25p344jy8yem6v5jir
        state:
          type: string
          minLength: 1
          description: The state of the webhook.
          enum:
            - active
            - inactive
            - failing
            - failed
          example: active
        triggers:
          type: array
          description: >-
            An array containing a set of triggers, describing the notifications
            this webhook should receive.
          items:
            type: string
            example: message.created
            enum:
              - account.connected
              - account.running
              - account.stopped
              - account.invalid
              - account.sync_error
              - message.created
              - message.opened
              - message.link_clicked
              - thread.replied
              - contact.created
              - contact.updated
              - contact.deleted
              - calendar.created
              - calendar.updated
              - calendar.deleted
              - event.created
              - event.updated
              - event.deleted
              - job.succesful
              - job.failed
              - message.updated
        version:
          type: string
          minLength: 1
          example: '2.0'
          description: A string describing the the webhook version.
    DeltaCursorMessage:
      description: ''
      type: object
      properties:
        cursor_end:
          type: string
          minLength: 1
        cursor_start:
          type: string
          minLength: 1
        deltas:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              attributes:
                type: object
                properties:
                  account_id:
                    type: string
                    minLength: 1
                  bcc:
                    type: array
                    items:
                      $ref: '#/components/schemas/bcc'
                  body:
                    type: string
                    minLength: 1
                  cc:
                    type: array
                    items:
                      $ref: '#/components/schemas/cc'
                  date:
                    type: number
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeltaCursorMessage'
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/files'
                  from:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/from'
                  id:
                    type: string
                    minLength: 1
                  labels:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/labels'
                  object:
                    type: string
                    minLength: 1
                  reply_to:
                    type: array
                    items:
                      $ref: '#/components/schemas/reply_to'
                  snippet:
                    type: string
                    minLength: 1
                  starred:
                    type: boolean
                  subject:
                    type: string
                    minLength: 1
                  thread_id:
                    type: string
                    minLength: 1
                  to:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/to'
                  unread:
                    type: boolean
              cursor:
                type: string
                minLength: 1
              event:
                type: string
                minLength: 1
              id:
                type: string
                minLength: 1
              object:
                type: string
                minLength: 1
    emails:
      title: emails
      type: object
      properties:
        email:
          type: string
          example: kat@spacetech.com
        name:
          type: string
          example: Katherine Johnson
    DeltaCursorContact:
      description: ''
      type: object
      properties:
        cursor_end:
          type: string
          minLength: 1
        cursor_start:
          type: string
          minLength: 1
        deltas:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              attributes:
                type: object
                properties:
                  account_id:
                    type: string
                    minLength: 1
                  birthday:
                    type: string
                    nullable: true
                  company_name:
                    type: string
                    nullable: true
                  emails:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/emails'
                  given_name:
                    type: string
                    nullable: true
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/groups'
                  id:
                    type: string
                    minLength: 1
                  im_addresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeltaCursorContact'
                  job_title:
                    type: string
                    nullable: true
                  manager_name:
                    type: string
                    nullable: true
                  middle_name:
                    type: string
                    nullable: true
                  nickname:
                    type: string
                    nullable: true
                  notes:
                    type: string
                    nullable: true
                  object:
                    type: string
                    minLength: 1
                    default: contact
                    example: contact
                  office_location:
                    type: string
                    nullable: true
                  phone_numbers:
                    type: array
                    items:
                      $ref: '#/components/schemas/phone_numbers_type'
                  physical_addresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/physical_addresses'
                  picture_url:
                    type: string
                    nullable: true
                  source:
                    type: string
                    minLength: 1
                  suffix:
                    type: string
                    nullable: true
                  surname:
                    type: string
                    nullable: true
                  web_pages:
                    type: array
                    items:
                      type: object
              cursor:
                type: string
                minLength: 1
              event:
                type: string
                minLength: 1
              id:
                type: string
                minLength: 1
              object:
                type: string
                minLength: 1
    DeltaCursorEvent:
      description: ''
      type: object
      properties:
        cursor_end:
          type: string
          minLength: 1
        cursor_start:
          type: string
          minLength: 1
        deltas:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              attributes:
                type: object
                properties:
                  account_id:
                    type: string
                    minLength: 1
                  busy:
                    type: boolean
                  calendar_id:
                    type: string
                    minLength: 1
                  description:
                    type: string
                    nullable: true
                  ical_uid:
                    type: string
                    minLength: 1
                  id:
                    type: string
                    minLength: 1
                  location:
                    type: string
                    nullable: true
                  message_id:
                    type: string
                    nullable: true
                  object:
                    type: string
                    minLength: 1
                  owner:
                    type: string
                    minLength: 1
                  participants:
                    type: array
                    items:
                      $ref: '#/components/schemas/participants'
                  read_only:
                    type: boolean
                  status:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  when:
                    oneOf:
                      - $ref: '#/components/schemas/timespan'
                      - $ref: '#/components/schemas/datespan'
              cursor:
                type: string
                minLength: 1
              event:
                type: string
                minLength: 1
              id:
                type: string
                minLength: 1
              object:
                type: string
                minLength: 1
    DeltaCursor:
      oneOf:
        - $ref: '#/components/schemas/DeltaCursorMessage'
        - $ref: '#/components/schemas/DeltaCursorContact'
        - $ref: '#/components/schemas/DeltaCursorEvent'
    open_hours:
      description: ''
      type: object
      properties:
        emails:
          type: array
          description: >-
            Emails on the same domain to check. If you are using
            /calendar/availability it accepts an array of emails. If you are
            using calendar/consecutive/availability, it accepts a 2D array of
            emails.
          items:
            type: string
            example: swag@nylas.com
        days:
          type: array
          description: >-
            The days the participants are not available entered as an integer.
            Monday corresponds to 0 and Sunday corresponds to 6.
          items:
            type: string
            example: '0,1,2'
        timezone:
          type: string
          minLength: 1
          description: >-
            [IANA time zone database](https://en.wikipedia.org/wiki/Tz_database)
            formatted string (e.g. America/New_York)
          example: America/Chicago
        start:
          type: string
          minLength: 1
          description: >-
            Start time in 24 time clock. Leading 0’s are left off. The minimum
            start time is 0:00 and the maximum start time is 23:49.
          example: '10:00'
        end:
          type: string
          minLength: 1
          description: End time in a 24 hour time clock. Leading 0’s are left off.
          example: '14:00'
        object_type:
          type: string
          minLength: 1
          description: Always `open_hours`
          default: open_hours
          example: open_hours
    Calendar-Availability-Post:
      description: ''
      type: object
      x-examples: {}
      properties:
        duration_minutes:
          type: integer
          description: The total number of minutes the event should last.
          example: 30
        start_time:
          type: integer
          description: Unix timestamp for the beginning meeting.
          example: 1605794400
        end_time:
          type: integer
          description: Unix timestamp for the end of the meeting.
          example: 1605826800
        interval_minutes:
          type: integer
          description: >-
            How many minutes it should check for availability. For example, if
            you need to schedule a 30 minute meeting (duration_minutes) and want
            to check for availability every 10 minutes (interval_minutes).
          example: 10
        emails:
          type: array
          description: >-
            Emails on the same domain to check. If you are using
            /calendar/availability it accepts an array of emails. If you are
            using calendar/consecutive/availability, it accepts a 2D array of
            emails.
          items:
            type: string
            example: swag@nylas.com
        free_busy:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            A dictionary of free/busy data for users not in your organization.
            Pass in the emails and times they are busy. Required as an empty
            array when checking meeting times in the same organization.
          items:
            $ref: '#/components/schemas/FreeBusy'
        open_hours:
          type: array
          uniqueItems: true
          description: Additional times email accounts are available.
          items:
            $ref: '#/components/schemas/open_hours'
      required:
        - duration_minutes
        - start_time
        - end_time
        - interval_minutes
        - emails
        - free_busy
    CalendarAvailabilityResponse:
      description: ''
      type: object
      x-examples: {}
      properties:
        object:
          type: string
          minLength: 1
          description: Always availability.
          default: availability
        time_slots:
          type: array
          uniqueItems: true
          minItems: 1
          description: Array containing the start and end times.
          items:
            $ref: '#/components/schemas/time_slots'
    Consecutive-Availability:
      description: ''
      type: object
      title: ''
      x-examples: {}
      properties:
        duration_minutes:
          type: integer
          description: The total number of minutes the event should last.
          example: 30
        start_time:
          type: integer
          description: Unix timestamp for the beginning meeting.
          example: 1605794400
        end_time:
          type: integer
          description: Unix timestamp for the end of the meeting.
          example: 1605826800
        interval_minutes:
          type: integer
          description: >-
            How many minutes it should check for availability. For example, if
            you need to schedule a 30 minute meeting (duration_minutes) and want
            to check for availability every 10 minutes (interval_minutes).
          example: 10
        emails:
          type: array
          description: >-
            Emails on the same domain to check. If you are using
            /calendar/availability it accepts an array of emails. If you are
            using calendar/consecutive/availability, it accepts a 2D array of
            emails.
          items:
            $ref: '#/components/schemas/emails'
        free_busy:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            A dictionary of free/busy data for users not in your organization.
            Pass in the emails and times they are busy. Required as an empty
            array when checking meeting times in the same organization.
          items:
            $ref: '#/components/schemas/FreeBusy'
        open_hours:
          type: array
          uniqueItems: true
          minItems: 1
          description: Additional times email accounts are available.
          items:
            $ref: '#/components/schemas/open_hours'
      required:
        - duration_minutes
        - start_time
        - end_time
        - interval_minutes
        - free_busy
    ConsecutiveAvailabilityResponse:
      type: array
      description: ''
      minItems: 1
      uniqueItems: true
      x-examples:
        example-1:
          - - emails:
                - kat@spacetech.com
                - dorothy@spacetech.com
              end_time: 1605794400
              start_time: 1605792600
      items:
        type: object
        properties:
          '0':
            type: array
            uniqueItems: true
            minItems: 1
            items:
              type: object
              properties:
                emails:
                  type: array
                  description: A list of emails available during that time
                  items:
                    type: string
                end_time:
                  type: number
                  description: UNIX timestamp end time of meeting
                start_time:
                  type: number
                  description: UNIX timestamp of start time of event
    Outbox:
      description: ''
      type: object
      x-examples:
        example-1:
          account_id: 5tgncdmczat02216u7d6uypyi
          action: outbox
          bcc: []
          body: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          cc: []
          created_at: 1608064663
          date: 1608064663
          events: []
          files: []
          from:
            - email: Tatiana Work
              name: tatiana.p@nylas.com
          id: 2r1s54gyqodvkkdzhfv43b22
          job_status_id: 1aoyusvupm738p7wpp7g5b3cv
          labels: []
          object: draft
          reply_to: []
          reply_to_message_id: null
          send_at: 1608151200
          snippet: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          starred: false
          status: failed
          subject: 'Sent at 2:40'
          thread_id: 6fbyd50xl91lgbqpdtleff0ts
          to:
            - email: tjperry07@gmail.com
              name: Tatiana
          unread: false
          version: 0
      properties:
        account_id:
          type: string
          minLength: 1
        bcc:
          type: array
          items:
            type: object
        body:
          type: string
          minLength: 1
        cc:
          type: array
          items:
            type: object
        created_at:
          type: number
        date:
          type: number
        events:
          type: array
          items:
            type: object
        files:
          type: array
          items:
            type: object
        from:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        id:
          type: string
          minLength: 1
        job_status_id:
          type: string
          minLength: 1
        labels:
          type: array
          items:
            type: object
        object:
          type: string
          minLength: 1
        reply_to:
          type: array
          items:
            type: object
        reply_to_message_id:
          type: string
          description: >-
            ID of the message to reply to. Can return `null` if no message is
            specified.
        snippet:
          type: string
          minLength: 1
        starred:
          type: boolean
        status:
          type: string
          minLength: 1
        subject:
          type: string
          minLength: 1
        thread_id:
          type: string
          minLength: 1
        to:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              email:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
        unread:
          type: boolean
        version:
          type: number
      required:
        - unread
    outbox_send_at_request:
      title: outbox_send_at_request
      type: object
      properties:
        send_at:
          type: integer
          example: 1608064663
    outbox_action:
      title: outbox_action
      type: object
      properties:
        action:
          type: string
    CreateOutboxMessage:
      description: ''
      type: object
      properties:
        subject:
          type: string
          minLength: 1
        send_at:
          type: integer
        to:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/to'
        from:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/from'
        body:
          type: string
          minLength: 1
      required:
        - to
    send_at_post_outbox_response:
      title: send_at_post_outbox_response
      type: object
      properties:
        send_at:
          type: string
          example: 'Tue, 15 Dec 2020 20:52:21 GMT'
    OutboxPut:
      description: ''
      type: object
      x-examples:
        example-1:
          account_id: 5tgncdmczat02216u7d6uypyi
          action: outbox
          created_at: 1608065541
          id: 8bup1y1szsybrj91e86l9l07o
          job_status_id: 996mfx5bg5yzay4bpedug7of2
          object: message
          send_at: 1608155100
          status: pending
      properties:
        account_id:
          type: string
          minLength: 1
          description: ID of the account
        action:
          type: string
          minLength: 1
          default: outbox
        created_at:
          type: number
          description: UNIX timestamp of when outbox request was sent.
        id:
          type: string
          minLength: 1
        job_status_id:
          type: string
          minLength: 1
          description: 'ID of the job. '
        object:
          type: string
          minLength: 1
          default: message
        send_at:
          type: number
          description: Time message is scheduled to be sent.
        status:
          type: string
          minLength: 1
          description: Status of message.
    Outbox-Response:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/bcc'
        body:
          type: string
          minLength: 1
        cc:
          type: array
          items:
            $ref: '#/components/schemas/cc'
        date:
          type: integer
        events:
          type: array
          items:
            type: object
        files:
          type: array
          items:
            $ref: '#/components/schemas/filesSub'
        from:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/from'
        id:
          type: string
          minLength: 1
        job_status_id:
          type: string
          minLength: 1
          description: Use the job status ID to update or delete the outgoing message
        labels:
          type: array
          items:
            $ref: '#/components/schemas/labelsSub'
        object:
          type: string
          minLength: 1
        reply_to:
          type: array
          items:
            $ref: '#/components/schemas/reply_to'
        reply_to_message_id:
          type: string
        snippet:
          type: string
          minLength: 1
        starred:
          type: boolean
        subject:
          type: string
          minLength: 1
        thread_id:
          type: string
          minLength: 1
        to:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/to'
        unread:
          type: boolean
        version:
          type: number
        action:
          type: string
          default: outbox
          description: The action that triggeres the job status
        status:
          type: string
          description: 'Status of the outgoing message. '
        send_at:
          type: integer
          description: Time message is scheduled to be sent.
        created_at:
          type: integer
      title: Get All Outbox Messages
    CategorizeMessagePUT:
      title: CategorizeMessagePUT
      type: object
      properties:
        message_id:
          type: array
          description: IDs of the message to categorize. Up to 5 at a time.
          items:
            type: string
        only_category:
          type: boolean
          description: >-
            Instead of returning the entire message body, return the account_id,
            categorized_at, category, id, and model_version. Default false.
          default: false
    CategorizeMessageFeedbackRequest:
      description: ''
      type: object
      properties:
        message_id:
          type: string
          minLength: 1
          example: '{message_id}'
          description: ID of the message to send feedback about
        category:
          type: string
          minLength: 1
          description: Category message should be in
          enum:
            - feed
            - conversation
          example: feed
      required:
        - message_id
        - category
    CategorizeMessageFeedbackResponse:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: ID of the account the message was attached to
        category:
          type: string
          minLength: 1
          description: New message category. Either conversation or feed.
          example: conversation
          enum:
            - conversation
            - feed
        is_primary_label:
          type: boolean
        message_id:
          type: string
          minLength: 1
          description: ID of the message
        recategorized_at:
          type: number
        recategorized_from:
          type: object
          properties:
            category:
              type: string
              minLength: 1
              enum:
                - conversation
                - feed
              example: feed
            model_version:
              type: string
              description: |
                Version of the model categorizing the conversation.
    CleanConversationCreate:
      description: ''
      type: object
      properties:
        message_id:
          type: array
          description: The IDs of the messages to parse.
          items:
            type: string
            example: '{message_ids}'
        ignore_links:
          type: boolean
          description: >-
            Remove links in the conversation or signature. Default true. To
            return images, this must be set to false.
          default: true
        ignore_images:
          type: boolean
          description: Remove images in the conversation or signature. Default true
          default: true
        ignore_tables:
          type: boolean
          description: Remove tables in the conversation or signature. Default true
          default: true
        remove_conclusion_phrases:
          type: boolean
          description: >-
            Remove phrases such as best and regards in the signature. Default
            true
          default: true
        images_as_markdown:
          type: boolean
          description: >-
            If set to false, returns images as HTML. Default is true. This only
            works if ignore_images is set to false
          default: true
      required:
        - message_id
    CleanConversationsResponse:
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to a parent account object.
          example: '{account_id}'
        bcc:
          type: array
          description: >
            An array of name+email pairs the message was bcc'd to. For received
            mail this is nearly always empty.
          items:
            $ref: '#/components/schemas/bcc'
        body:
          type: string
          minLength: 1
          description: >-
            The full HTML message body. Messages with only plain-text
            representations are up-converted to HTML.
          example: >-
            <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
            type=\"text/css\">\n html {\n -webkit-text-size-adjust:none;\n }\n
            body {\n width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
            width:280px;\n line-height: 16px;\n letter-spacing: 0.5px;\n }\n
            </style>\n <title>Welcome  ...  </html>
        cc:
          type: array
          description: An array of name+email pairs the message was cc'd to.
          items:
            $ref: '#/components/schemas/cc'
        date:
          type: number
          description: >-
            A timestamp of the date the message was received by the mail server.
            This may be different from the unverified Date header in raw message
            object. UNIX
          example: 1557950729
        events:
          type: array
          description: 'An array Event objects, if message includes calendar invites.'
          items:
            type: object
        files:
          type: array
          description: 'An array of File objects, if the message includes attachments.'
          items:
            $ref: '#/components/schemas/files'
        folder:
          type: object
          description: >-
            A single folder object indicating the location of the message. This
            is present only if the parent account's organization_unit is folder.
            This property can be changed to move the message to a different
            folder.
          properties:
            display_name:
              type: string
              minLength: 1
            id:
              type: string
              minLength: 1
            name:
              type: string
              minLength: 1
        from:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            A list of name+email pairs the message was sent from. This is
            usually one object, but can be many.
          items:
            $ref: '#/components/schemas/from'
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
        object:
          type: string
          minLength: 1
          description: A string describing the type of object (value is "message").
          default: message
        reply_to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name+email pairs replies should be sent to.
          items:
            $ref: '#/components/schemas/reply_to'
        snippet:
          type: string
          minLength: 1
          description: A shortened plain-text preview of the message body.
        starred:
          type: boolean
          description: Indicates the message is in a starred or flagged state (mutable).
        subject:
          type: string
          minLength: 1
          description: The subject line of the message.
        thread_id:
          type: string
          minLength: 1
          description: Reference to a parent thread object (all messages have a thread).
        to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name+email pairs the message was sent to.
          items:
            $ref: '#/components/schemas/to'
        unread:
          type: boolean
          description: >-
            Indicates the message is unread. This is the default for new
            incoming mail (mutable).
        labels:
          type: array
          description: >-
            A list of Label objects. This is present only if the parent
            account's organization_unit is label. These are Gmail-style and can
            be arbitrarily added and removed from messages.
          items:
            $ref: '#/components/schemas/labels'
        model_version:
          type: string
          example: d6d33291
          description: >-
            Model version of the Categorizer. Only returns as part of
            [Categorize Message Response](/docs/api/#put-/neural/categorize).
        conversation:
          type: string
          example: >-
            __\n\nVirtual calendars are now included with Nylas Platform and
            Calendar\nsubscriptions.\n\n[
            ![Logo](https://12qf1516hja245v1v537ieww-wpengine.netdna-ssl.com/wp-\ncontent/uploads/2019/08/group-14@3x.png)\n](https://email.nylas.com/CSQ00K0mV0NL03BE3O02W06) 
            \n\n--- 
            \n\n[\n![Virtual_Calendar_NewsletterHero@2x.png](https://info.nylas.com/rs/857-LSW-455/images/Virtual_Calendar_NewsletterHero%402x.png)\n](https://email.nylas.com/x0L0000N3n20V3S0LB6QEWO) 
            \n\n---  \n|  \n---  \n\nBuild flexible, secure scheduling features
            with just a few lines of code.\nVirtual Calendars eliminate the need
            for your users to authenticate with their\npersonal calendars and
            provide all the seamless scheduling features your users\nlove. 
            \n\n  \n|  | [READ
            MORE](https://email.nylas.com/x0L0000N3n20V3S0LB6QEWO)  \n--- 
            \n|\n![Inbox_Zero_SQ@2x.png](https://info.nylas.com/rs/857-LSW-455/images/Inbox_Zero_SQ%402x.png)\n\nInstantly
            connect 100% of email accounts with Hosted Auth.\n\n[READ
            MORE](https://email.nylas.com/K00O6LS00VNo3MBEQ0230W0)\n\n|\n![Privacy_Shield_Ruling_SQ@2x.png](https://info.nylas.com/rs/857-LSW-455/images/Privacy_Shield_Ruling_SQ%402x.png)\n\nLearn
            what the recent Privacy Shield Ruling means for your users'
            data.\n\n[READ
            MORE](https://email.nylas.com/wSEW36BLV0000Q2N00O3p0N)
          description: The cleaned-up email message.
    CleanConversationFeedbackResponse:
      description: ''
      type: object
      properties:
        model_version:
          type: string
          minLength: 1
          description: Version of the model parsing out the conversation.
          example: av45hcbkka
        message_id:
          type: string
          minLength: 1
          description: ID of the message
          example: '{message_id}'
        feedback_at:
          type: string
          minLength: 1
          description: UNIX timestamp message feedback was given
          example: '1607537180'
    SignatureExtractionPUT:
      description: ''
      type: object
      properties:
        message_id:
          type: array
          description: IDs of the messages you want to return the signature from.
          items:
            type: string
            example: '{message_id}'
        ignore_links:
          type: boolean
          default: true
          description: Remove links in the conversation or signature. Default `true`.
        ignore_images:
          type: boolean
          description: Remove images in the conversation or signature. Default true
          default: true
        ignore_tables:
          type: boolean
          default: true
          description: Remove tables in the conversation or signature. Default true
        remove_conclusion_phrases:
          type: boolean
          description: >-
            Remove phrases such as best and regards in the signature. Default
            true
          default: true
        images_as_markdown:
          type: boolean
          default: true
          description: >-
            If set to false, returns images as HTML. Default is true. This only
            works if ignore_images is set to false.
        parse_contacts:
          type: boolean
          description: >-
            A contact object is returned that includes phone number, email,
            job_title, and url. Default true.
          default: true
      required:
        - message_id
    signaturecontacts:
      description: >-
        An object containing any contact details. Only returns if
        `parse_contacts` is `true`.
      type: object
      properties:
        job_titles:
          type: array
          items:
            type: string
            example: Director of Engineering
        links:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              description:
                type: string
                minLength: 1
                description: Albert Einstein
              url:
                type: string
                minLength: 1
                example: 'https://www.example.com/'
        phone_numbers:
          type: array
          items:
            type: string
            example: 123-456-8901
        emails:
          type: array
          items:
            type: string
            example: al.einstein@physics.com
        names:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              first_name:
                type: string
                minLength: 1
                example: Albert
              last_name:
                type: string
                minLength: 1
                example: Einstein
    SignatureExtraction:
      title: Messages
      type: object
      properties:
        account_id:
          type: string
          minLength: 1
          description: Reference to a parent account object.
          example: '{account_id}'
        bcc:
          type: array
          description: >
            An array of name+email pairs the message was bcc'd to. For received
            mail this is nearly always empty.
          items:
            $ref: '#/components/schemas/bcc'
        body:
          type: string
          minLength: 1
          description: >-
            The full HTML message body. Messages with only plain-text
            representations are up-converted to HTML.
          example: >-
            <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
            type=\"text/css\">\n html {\n -webkit-text-size-adjust:none;\n }\n
            body {\n width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
            width:280px;\n line-height: 16px;\n letter-spacing: 0.5px;\n }\n
            </style>\n <title>Welcome  ...  </html>
        cc:
          type: array
          description: An array of name+email pairs the message was cc'd to.
          items:
            $ref: '#/components/schemas/cc'
        date:
          type: number
          description: >-
            A timestamp of the date the message was received by the mail server.
            This may be different from the unverified Date header in raw message
            object. UNIX
          example: 1557950729
        events:
          type: array
          description: 'An array Event objects, if message includes calendar invites.'
          items:
            type: object
        files:
          type: array
          description: 'An array of File objects, if the message includes attachments.'
          items:
            $ref: '#/components/schemas/files'
        folder:
          type: object
          description: >-
            A single folder object indicating the location of the message. This
            is present only if the parent account's organization_unit is folder.
            This property can be changed to move the message to a different
            folder.
          properties:
            display_name:
              type: string
              minLength: 1
            id:
              type: string
              minLength: 1
            name:
              type: string
              minLength: 1
        from:
          type: array
          uniqueItems: true
          minItems: 1
          description: >-
            A list of name+email pairs the message was sent from. This is
            usually one object, but can be many.
          items:
            $ref: '#/components/schemas/from'
        id:
          type: string
          minLength: 1
          description: A globally unique object identifier.
        object:
          type: string
          minLength: 1
          description: A string describing the type of object (value is "message").
          default: message
        reply_to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name+email pairs replies should be sent to.
          items:
            $ref: '#/components/schemas/reply_to'
        snippet:
          type: string
          minLength: 1
          description: A shortened plain-text preview of the message body.
        starred:
          type: boolean
          description: Indicates the message is in a starred or flagged state (mutable).
        subject:
          type: string
          minLength: 1
          description: The subject line of the message.
        thread_id:
          type: string
          minLength: 1
          description: Reference to a parent thread object (all messages have a thread).
        to:
          type: array
          uniqueItems: true
          minItems: 1
          description: An array of name+email pairs the message was sent to.
          items:
            $ref: '#/components/schemas/to'
        unread:
          type: boolean
          description: >-
            Indicates the message is unread. This is the default for new
            incoming mail (mutable).
        labels:
          type: array
          description: >-
            A list of Label objects. This is present only if the parent
            account's organization_unit is label. These are Gmail-style and can
            be arbitrarily added and removed from messages.
          items:
            $ref: '#/components/schemas/labels'
        model_version:
          type: string
          example: d6d33291
          description: >-
            Model version of the Categorizer. Only returns as part of
            [Categorize Message Response](/docs/api/#put-/neural/categorize)).
        signature:
          type: string
          example: >-
            \\-- 
            \n\n[![](https://lh6.googleusercontent.com/zJp7cuIKWhNYHc6KsuHUsfrhyCp9DKxg243bjSLP9JKi9SEX-\nuMtTAr5qy54Kdlr3RNkTwAEvIDHKBCjodqu8uVLLbReY47_-KtRilUatWsZRRfO2LH9ZTCykLEVBOj8iJ7XmNeX)](https://www.nylas.com/)\n\n|\n\nNylas
            Product Team\n\nNylas Team,
            [Nylas](https://www.nylas.com/)\n\n[swag@nylas.com](mailto:swag@nylas.com) 
          description: The parsed signature information. Extra HTML and images are removed.
        ' contact':
          $ref: '#/components/schemas/signaturecontacts'
    OCR:
      description: ''
      type: object
      title: ''
      properties:
        account_id:
          type: string
          minLength: 1
          example: '{account_id}'
          description: ID of the account the message came from.
        content_id:
          type: string
          minLength: 1
          example: <f_kiubrkoa0>
          description: ''
        content_type:
          type: string
          minLength: 1
          example: application/pdf
          description: >-
            Content-type of the file. Currently available [content
            types](/docs/intelligence/optical-charecter-recognition/#content-types).
        filename:
          type: string
          minLength: 1
          example: intelligent-workflow-automations-coming-to-the-nylas-platform.pdf
          description: Name of the file attachment.
        id:
          type: string
          minLength: 1
          example: '{id}'
          description: ID of the messages the file is attached to.
        message_ids:
          type: array
          description: ''
          items:
            type: string
            example: '{message_ids}'
        object:
          type: string
          minLength: 1
          example: file
          default: file
          description: Always file
        ocr:
          type: array
          description: The parsed file attachment returned as text.
          items:
            type: string
            example: >-
              "Nylas\nINTELLIGENT WORKFLOW AUTOMATIONS COMING TO THE\nNYLAS
              PLATFORM\nPosted on December 7, 2020 by Matt Harper\nOutbox
              Endpoint\nCategorier\nEmail Parse\nOCR\nEntity
              Recognition\nSignature Detection\nPlatform updates help developers
              quickly and securely build new productivity features for their
              end-users.\nToday, we are proud to announce several updates to the
              Nylas platform. These additions further our mission of\nproviding
              Productivity Infrastructure solutions to help developers across
              industries boost their end-users'\nproductivity.\nAs part of our
              Early Access program, Nylas customers can begin integrating new,
              Al-powered workflow\nautomations triggered by the communications
              data contained in users' inboxes, calendars, and contacts,
              and\nextracted by the core Nylas' APIs.\nHere is just a handful of
              the new capabilities you can expect to be building with in the
              coming weeks:\nPage: 1\n",       "Nylas\nOutbox\nEnable your users
              to schedule and send large numbers of emails with near-perfect
              deliverability rates and full\nCRUD (Create, Read, Update, Delete)
              capabilities. With the Outbox endpoint, you can now eliminate
              error\nmessages and navigate deliverability issues that plague
              many sales and marketing automation
              platforms.\nCategorizer\nCategorizer declutters your users'
              overcrowded inboxes so they can read and respond to the most
              important\nmessages first. Categorizer automatically
              differentiates human communications from
              machine-to-human\ncommunications to channel spam emails,
              newsletters, and more to a separate folder. You can also set
              up\ncustom categories for your users' specific needs, like
              categories for internal group projects, external
              candidate\nemails, prospect emails, and more.\nEmail Parse\nEmail
              contains essential business communications, but it can be
              challenging for your users to navigate\nconversations as email
              threads grow. Company logos, nested responses, legal language, and
              other elements\nclutter emails and create significant problems for
              developers looking to integrate important email data into\ntheir
              applications. Email Parse allows you to quickly clean up emails
              and provide critical communications to\nyour users within your
              application without the standard inbox clutter.\nOCR\nOptical
              Character Recognition automatically reads and extracts key
              information from unstructured data\nsources like PDFs, images, and
              attachments so that you can enter it directly into your
              application (and sync\nwith other third-party systems).\nPage:
              2\n",       "Nylas\nEntity Recognition\nEntity Recognition detects
              specific words within emails and subject lines — such as times,
              dates, and SKU\nnumbers – so that you can trigger powerful
              workflows in your application.\nSignature Detection\nSignature
              detection finds key information in email signatures so you can
              automatically enrich your users'\ncontact database. Automatically
              keep email addresses, phone numbers, job titles, and profile
              photos up to date\nfor your users – no manual work
              required.\nWorkflow Templates\nNylas can help you automate entire
              business processes with a single endpoint. For instance, a user in
              recruiting\ncan now send a templated email response to a candidate
              and schedule an interview with all the correct\nparticipants with
              just one-click in an Applicant Tracking System.\nToday, there are
              over 50,000 developers around the world using the Nylas platform
              to build productivity\nfeatures in their applications. Our focus
              is to help you quickly compose entirely new solutions that
              leverage the\npower of your users' communications data while
              avoiding the cost and complexity of building your
              own\nintegrations, workflows, and security features.\nIf you'd
              like to learn more about what you can build with these new
              capabilities, I invite you to please set up a\ntime with a Nylas
              platform specialist who can help you get started.\nPage:
              3\n",       "Nylas\nAbout the Author\nPage: 4\n
        size:
          type: number
          description: 'Size of the file, in bytes.'
        processed_pages:
          type: number
          description: The number of pages processed by OCR.
    SentimentAnalysis:
      description: ''
      type: object
      properties:
        account_id:
          type: string
          description: ID of the account
        model:
          type: string
          minLength: 1
          description: Model used to analyze the text
        sentiment:
          type: string
          minLength: 1
          description: >-
            The emotional opinion of the text. Can be positive, negative,
            neutral.
          enum:
            - POSTITIVE
            - NEGATIVE
            - NEUTRAL
        sentiment_score:
          type: number
          description: >-
            The score is on a scale of -1 to 1. If the score is below -0.5, it
            is negative. If the score is between -0.5 to 0.5 is neutral. If the
            score is above 0.5, it is positive.
          minimum: -1
          maximum: 1
        text:
          type: string
          minLength: 1
          description: Text that was analyzed
        processed_length:
          type: number
          description: Number of charecters processed
    SentimentAnalysisFeedbackRequest:
      oneOf:
        - properties:
            sentiment:
              type: string
              description: 'It can be `positive`, `negative` or `neutral`.'
              enum:
                - positive
                - negative
                - neutral
            overwrite:
              type: boolean
              description: >-
                If sentiment feedback has already been sent for the text or
                message and you are correcting what you previously provided, use
                true. If this is new feedback for the text or message, use
                false.  If you try to send feedback for a message that was
                already adjusted without setting `"overwrite": "true"`. The API
                will return an error message. Optional If left blank, defaults
                to false.
            message_id:
              type: string
              description: ID of the message. You can send feedback for messages or text.
          required:
            - message_id
        - properties:
            text:
              type: string
              description: >-
                Text to send feedback on. You can send feedback for messages or
                text.
            sentiment:
              type: string
              description: 'It can be `positive`, `negative` or `neutral`.'
              enum:
                - positive
                - negative
                - neutral
            overwrite:
              type: boolean
              description: >-
                If sentiment feedback has already been sent for the text or
                message and you are correcting what you previously provided, use
                true. If this is new feedback for the text or message, use
                false.  If you try to send feedback for a message that was
                already adjusted without setting `"overwrite": "true"`. The API
                will return an error message. Optional If left blank, defaults
                to false.
          required:
            - text
      description: ''
      type: object
    SentimentAnalysisFeedback:
      description: ''
      type: object
      properties:
        code_version:
          type: string
          minLength: 1
        feedback_at:
          type: number
        id:
          type: string
          minLength: 1
        model_version:
          type: string
        status:
          type: string
          minLength: 1
    409-Sentiment-Analysis:
      description: ''
      type: object
      properties:
        error_message:
          type: object
          properties:
            detail:
              type: object
              properties:
                code_version:
                  type: string
                  minLength: 1
                created_at:
                  type: number
                id:
                  type: string
                  minLength: 1
                model_version:
                  type: string
                sentiment:
                  type: string
                  minLength: 1
                text:
                  type: string
                  minLength: 1
              required:
                - code_version
                - created_at
                - id
                - model_version
                - sentiment
                - text
            error:
              type: string
              minLength: 1
          required:
            - detail
            - error
      required:
        - error_message
  securitySchemes:
    BASIC_AUTH:
      scheme: basic
      type: http
    ACCESS_TOKEN:
      scheme: bearer
      type: http
  responses:
    Error-400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error-400'
    Error-401:
      description: Unauthorized
      content:
        application/json:
          schema:
            title: Error-401
            type: object
            properties:
              message:
                description: Error Message
                type: string
                example: Could not verify access credential.
              type:
                description: Error Type
                type: string
                example: invalid_request_error
            x-examples: {}
  examples:
    Google_Service_Accounts:
      value:
        client_id: string
        name: string
        email_address: string
        provider: gmail
        settings:
          google_client_id: string
          google_client_secret: string
          google_refresh_token: string
        scopes: string
    Office_365:
      value:
        client_id: nylas_client_id
        name: Nyla the Cheetah
        email_address: nyla@nylas.com
        provider: office365
        settings:
          microsoft_client_id: '{microsoft_client_id}'
          microsoft_client_secret: '{microsoft_client_secret}'
          microsoft_refresh_token: '{microsoft_refresh_token}'
          redirect_uri: 'https://example.com/redirect'
        scopes: 'email.read_only,calendar.read_only,contacts.read_only'
    Exchange:
      value:
        client_id: nylas_client_id
        name: Nyla the Cheetah
        email_address: nyla@nylas.com
        provider: exchange
        settings:
          username: nyla@nylas.com
          password: MakeEmailSuckLess
          exchange_server_host: exchange.nylas.com
        scopes: 'email.read_only,calendar.read_only,contacts.read_only'
    Virtual_Calendar:
      value:
        client_id: 9df4ff17888f4729ad4e1463d2547d
        provider: nylas
        scopes: calendar
        email: virtual_account_unique_id
        name: Virtual Calendar
        settings: {}
    Gmail:
      value:
        client_id: nylas_client_id
        name: Nyla the Cheetah
        email_address: nyla@nylas.com
        provider: gmail
        settings:
          google_client_id: '{google_api_client_id}'
          google_client_secret: '{geoogle_api_client_secret}'
          google_refresh_token: '{google_api_refresh_token}'
        scopes: 'email.read_only,calendar.read_only,contacts.read_only'
    GenericImap:
      value:
        client_id: nylas_client_id
        name: Nyla the Cheetah
        email_address: nyla@nylas.com
        provider: imap
        settings:
          imap_host: imap.nylas.com
          imap_port: 993
          imap_username: nyla
          imap_password: MakeEmailSuckLess
          smtp_host: smtp.nylas.net
          smtp_port: 587
          smtp_username: nyla
          smtp_password: MakeEmailSuckLess
          ssl_required: true
        scopes: 'email.read_only,calendar.read_only,contacts.read_only'
    KnownImap:
      value:
        client_id: nylas_client_id
        name: Nyla the Cheetah
        email_address: nyla@aol.com
        provider: aol
        settings:
          password: MakeEmailSuckLess
        scopes: 'email.read_only,calendar.read_only,contacts.read_only'
    Outlook:
      value:
        client_id: nylas_client_id
        name: Nyla the Cheetah
        email_address: nyla@outlook.com
        provider: outlook
        settings:
          username: nyla@outlook.com
          password: MakeEmailSuckLess
          exchange_server_host: eas.outlook.com
        scopes: 'email.read_only,calendar.read_only,contacts.read_only'
    Exchange_Service_Account_OAuth:
      value:
        client_id: nylas_client_id
        name: Nyla the Cheetah
        email_address: nyla@nylas.com
        provider: exchange
        settings:
          microsoft_client_id: '{microsoft_client_id}'
          microsoft_client_secret: '{microsoft_client_secret}'
          microsoft_refresh_token: '{microsoft_refresh_token}'
          redirect_uri: 'https://example.com/redirect'
          service_account: true
        scopes: calendar
    Exchange_Service_Accounts_Password:
      value:
        client_id: nylas_client_id
        name: Nyla the Cheetah
        email_address: nyla@nylas.com
        provider: exchange
        settings:
          username: username
          password: password
          service_account: true
        scopes: calendar.read_only
    NativeAuthCode:
      value:
        code: string
    Return_All_Accounts:
      value:
        - account_id: 622x1k5v1ujh55t6ucel7av4
          billing_state: paid
          email: example@example.com
          id: 622x1k5v1ujh55t6ucel7av4
          provider: yahoo
          sync_state: running
          trial: false
        - account_id: 123rvgm1iccsgnjj7nn6jwu1
          billing_state: paid
          email: example@example.com
          id: 123rvgm1iccsgnjj7nn6jwu1
          provider: gmail
          sync_state: running
          trial: false
    CancelAnAccount:
      value:
        success: 'true'
    Return_Message_Object:
      value:
        account_id: '{account_id}'
        bcc:
          - email: Albert Einstein
            name: al@particletech.com
        body: >-
          <html>\n<head>\n <meta charset=\"UTF-8\">\n <style
          type=\"text/css\">\n html {\n -webkit-text-size-adjust:none;\n }\n
          body {\n width:100%;\n margin:0 auto;\n padding:0;\n}\n  p {\n
          width:280px;\n line-height: 16px;\n letter-spacing: 0.5px;\n }\n
          </style>\n <title>Welcome  ...  </html>
        cc:
          - email: George Washington Carver
            name: carver@agritech.com
        date: 1557950729
        events:
          - {}
        files:
          - content_disposition: attachment
            content_type: image/jpeg
            filename: image.jpeg
            id: '{image_id}'
            size: 2648890
        folder:
          display_name: string
          id: string
          name: string
        from:
          - name: Marie Curie
            email: marie@radioactivity.com
        id: string
        object: message
        reply_to:
          - email: skwolek@fibers.com
            name: Stephanie Kwolek
        snippet: string
        starred: true
        subject: string
        thread_id: string
        to:
          - email: dorothy@spacetech.com
            name: Dorothy Vaughan
        unread: true
        labels:
          - display_name: Important
            id: '{label_id}'
            name: important
    Return_Messages_Array:
      value:
        - account_id: 43jf3****
          bcc: []
          body: |-
            <html>
            <head>
              <meta charset="UTF-8">
              <style type="text/css">
              html {
              -webkit-text-size-adjust:none;
              }
              body {
              width:100%;
              margin:0 auto;
              padding:0;
              }
              p {
                    width:280px;
                    line-height: 16px;
              letter-spacing: 0.5px;
              }
              </style>
              <title>Welcome</title>
              ... </html>
          cc: []
          date: 1557950729
          events: []
          files: []
          folder:
            display_name: Inbox
            id: 7hcg****
            name: inbox
          from:
            - email: no-reply@cc.yahoo-inc.com
              name: Yahoo
          id: 7a8939****
          object: message
          reply_to:
            - email: no-reply@cc.yahoo-inc.com
              name: Yahoo
          snippet: 'Hi James, james****@yahoo.com Welcome.'
          starred: false
          subject: Welcome to...
          thread_id: cvsppk****
          to:
            - email: james****@yahoo.com
              name: ''
          unread: true
        - account_id: 43jf3****
          bcc: []
          body: |-
            <html>
            <head>
              <meta charset="UTF-8">
              <style type="text/css">
              html {
              -webkit-text-size-adjust:none;
              }
              body {
              width:100%;
              margin:0 auto;
              padding:0;
              }
              p {
                    width:280px;
                    line-height: 16px;
              letter-spacing: 0.5px;
              }
              </style>
              <title>Welcome</title>
              ... </html>
          cc: []
          date: 1557950729
          events: []
          files: []
          folder:
            display_name: Inbox
            id: 7hcg****
            name: inbox
          from:
            - email: no-reply@cc.yahoo-inc.com
              name: Yahoo
          id: 7a8939****
          object: message
          reply_to:
            - email: no-reply@cc.yahoo-inc.com
              name: Yahoo
          snippet: 'Hi James, james****@yahoo.com Welcome.'
          starred: false
          subject: Welcome to...
          thread_id: cvsppk****
          to:
            - email: james****@yahoo.com
              name: ''
          unread: true
    Return_All_Drafts:
      value:
        - account_id: '{{account_id}}'
          bcc:
            - email: string
              name: string
          body: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          cc:
            - email: string
              name: string
          date: 1623080724
          events: []
          files:
            - content_disposition: attachment
              content_type: image/png
              filename: Nylas.png
              id: '{{file_id}}'
              size: 82186
          folder:
            display_name: Drafts
            id: 5i4pj87birnlrno7s9xu9f5cl
            name: drafts
          from:
            - email: Your Name
              name: you@example.com
          id: 2vgnewhaclx4iog2140bva9y8
          object: draft
          reply_to:
            - email: swag@nylas.com
              name: Nylas
          reply_to_message_id: null
          snippet: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          starred: false
          subject: From Nylas
          thread_id: 43va79g3vpq2z0ojwq09jg5el
          to:
            - email: swag@nylas.com
              name: Nylas
          unread: false
          version: 0
        - account_id: '{{account_id}}'
          bcc:
            - email: string
              name: string
          body: >-
            <html>

            <head>

            <meta http-equiv="Content-Type" content="text/html;
            charset=us-ascii">

            </head>

            <body>

            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.

            </body>

            </html>
          cc:
            - email: string
              name: string
          date: 1623080335
          events: []
          files: []
          folder:
            display_name: Drafts
            id: 5i4pj87birnlrno7s9xu9f5cl
            name: drafts
          from:
            - email: swag@nylas.com
              name: Swag
          id: cqns09kt07oe4pevc9jnnhgnm
          object: draft
          reply_to: []
          reply_to_message_id: null
          snippet: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          starred: false
          subject: From Nylas
          thread_id: b4qxfby2chspp9uy9cri4i2mk
          to:
            - email: swag@nylas.com
              name: Nylas
          unread: false
          version: 0
    Create_A_Draft_Request:
      value:
        subject: From Nylas
        to:
          - email: dorothy@spacetech.com
            name: Dorothy Vaughan
        cc:
          - email: George Washington Carver
            name: carver@agritech.com
        bcc:
          - email: Albert Einstein
            name: al@particletech.com
        from:
          - name: Marie Curie
            email: marie@radioactivity.com
        reply_to:
          - email: skwolek@fibers.com
            name: Stephanie Kwolek
        reply_to_message_id: 5ko445dyrr4s5pqc6n0klxhg0
        body: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        file_ids:
          - string
    Create_A_Draft_Response:
      value:
        account_id: '{{account_id}}'
        bcc:
          - email: string
            name: string
        body: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        cc:
          - email: string
            name: string
        date: 1623080724
        events: []
        files:
          - content_disposition: attachment
            content_type: image/png
            filename: Screen Shot 2021-06-01 at 5.06.47 PM.png
            id: '{{file_id}}'
            size: 82186
        folder:
          display_name: Drafts
          id: 5i4pj87birnlrno7s9xu9f5cl
          name: drafts
        from:
          - email: Your Name
            name: you@example.com
        id: 2vgnewhaclx4iog2140bva9y8
        job_status_id:
          account_id: 88q8rglxj7jaeneiykhll23e2
          action: save_draft
          created_at: 1623080724
          id: 2vgnewhaclx4iog2140bva9y8
          job_status_id: ar22f9bwfboc4afyhnmfnuxc8
          object: message
          status: pending
        object: draft
        reply_to:
          - email: swag@nylas.com
            name: Nylas
        reply_to_message_id: 5ko445dyrr4s5pqc6n0klxhg0
        snippet: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        starred: false
        subject: From Nylas
        thread_id: 43va79g3vpq2z0ojwq09jg5el
        to:
          - email: swag@nylas.com
            name: Nylas
        unread: false
        version: 0
    Return_A_Draft_Response:
      value:
        account_id: '{{account_id}}'
        bcc:
          - email: string
            name: string
        body: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        cc:
          - email: string
            name: string
        date: 1623080724
        events: []
        files:
          - content_disposition: attachment
            content_type: image/png
            filename: Screen Shot 2021-06-01 at 5.06.47 PM.png
            id: '{{file_id}}'
            size: 82186
        folder:
          display_name: Drafts
          id: 5i4pj87birnlrno7s9xu9f5cl
          name: drafts
        from:
          - email: Your Name
            name: you@example.com
        id: 2vgnewhaclx4iog2140bva9y8
        job_status_id:
          account_id: 88q8rglxj7jaeneiykhll23e2
          action: save_draft
          created_at: 1623080724
          id: 2vgnewhaclx4iog2140bva9y8
          job_status_id: ar22f9bwfboc4afyhnmfnuxc8
          object: message
          status: pending
        object: draft
        reply_to:
          - email: swag@nylas.com
            name: Nylas
        reply_to_message_id: 6q7cgheomjestjm34dy18n9ld
        snippet: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        starred: false
        subject: From Nylas
        thread_id: 43va79g3vpq2z0ojwq09jg5el
        to:
          - email: swag@nylas.com
            name: Nylas
        unread: false
        version: 0
    Update_A_Draft_Request:
      value:
        subject: From Nylas
        to:
          - email: dorothy@spacetech.com
            name: Dorothy Vaughan
        cc:
          - email: George Washington Carver
            name: carver@agritech.com
        bcc:
          - email: Albert Einstein
            name: al@particletech.com
        from:
          - name: Marie Curie
            email: marie@radioactivity.com
        reply_to:
          - email: skwolek@fibers.com
            name: Stephanie Kwolek
        reply_to_message_id: string
        body: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        file_ids:
          - string
        version: 2
    Update_A_Draft_Response:
      value:
        account_id: '{{account_id}}'
        bcc:
          - email: string
            name: string
        body: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        cc:
          - email: string
            name: string
        date: 1623080724
        events: []
        files:
          - content_disposition: attachment
            content_type: image/png
            filename: Screen Shot 2021-06-01 at 5.06.47 PM.png
            id: '{{file_id}}'
            size: 82186
        folder:
          display_name: Drafts
          id: 5i4pj87birnlrno7s9xu9f5cl
          name: drafts
        from:
          - email: Your Name
            name: you@example.com
        id: 2vgnewhaclx4iog2140bva9y8
        job_status_id:
          account_id: 88q8rglxj7jaeneiykhll23e2
          action: save_draft
          created_at: 1623080724
          id: 2vgnewhaclx4iog2140bva9y8
          job_status_id: ar22f9bwfboc4afyhnmfnuxc8
          object: message
          status: pending
        object: draft
        reply_to:
          - email: swag@nylas.com
            name: Nylas
        reply_to_message_id: 5ko445dyrr4s5pqc6n0klxhg0
        snippet: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        starred: false
        subject: From Nylas
        thread_id: 43va79g3vpq2z0ojwq09jg5el
        to:
          - email: swag@nylas.com
            name: Nylas
        unread: false
        version: 0
    send-directly:
      value:
        subject: From Nylas
        to:
          - email: swag@nylas.com
            name: Nylas
        cc:
          - name: string
            email: string
        bcc:
          - name: string
            email: string
        from:
          - name: you@example.com
            email: Your Name
        reply_to:
          - name: Nylas
            email: swag@nylas.com
        reply_to_message_id: string
        body: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        file_ids:
          - string
    send_a_draft:
      value:
        draft_id: '{draft_id}'
        version: 0
        tracking:
          links: true
          opens: true
          thread_replies: true
          payload: string
    Return_All_Messages:
      value:
        - account_id: 5tgncdmczat02216u7d6uypyi
          action: outbox
          bcc: []
          body: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          cc: []
          created_at: 1608064069
          date: 1608064068
          events: []
          files: []
          from:
            - email: Katherine
              name: kat@spacetech.com
          id: afc7gknkgig2dfeu0d7w2llly
          job_status_id: endc1r0qttsrq2et5jkp5unut
          labels: []
          object: draft
          reply_to: []
          reply_to_message_id: afc7gknkgig2dfeu0d7w2llly
          send_at: 1608062400
          snippet: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          starred: false
          status: pending
          subject: From Nylas
          thread_id: clmeoxat1457kfau28ifp5n8b
          to:
            - email: dorothy@spacetech.com
              name: Dorothy
          unread: false
          version: 0
        - account_id: 5tgncdmczat02216u7d6uypyi
          action: outbox
          bcc: []
          body: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          cc: []
          created_at: 1608064663
          date: 1608064663
          events: []
          files: []
          from:
            - email: Katherine
              name: kat@spacetech.com
          id: 2r1s54gyqodvkkdzhfv43b22
          job_status_id: 1aoyusvupm738p7wpp7g5b3cv
          labels: []
          object: draft
          reply_to: []
          reply_to_message_id: 5ko445dyrr4s5pqc6n0klxhg0
          send_at: 1608151200
          snippet: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          starred: false
          status: pending
          subject: 'Sent at 2:40'
          thread_id: 6fbyd50xl91lgbqpdtleff0ts
          to:
            - email: dorothy@spacetech.com
              name: Dorothy
          unread: false
          version: 0
        - account_id: 5tgncdmczat02216u7d6uypyi
          action: outbox
          bcc: []
          body: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          cc: []
          created_at: 1608064900
          date: 1608064899
          events: []
          files: []
          from:
            - email: Katherine
              name: kat@spacetech.com
          id: f3sp74ocr764ksevpa9wkgl2j
          job_status_id: 5oqakcos3qqhp0sti1pasfsvd
          labels: []
          object: draft
          reply_to: []
          reply_to_message_id: afc7gknkgig2dfeu0d7w2llly
          send_at: 1608064899
          snippet: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          starred: false
          status: pending
          subject: 'Sent at 2:40'
          thread_id: c0udqhht0v9hev9ayigu9bcv0
          to:
            - email: dorothy@spacetech.com
              name: Dorothy
          unread: false
          version: 0
        - account_id: 5tgncdmczat02216u7d6uypyi
          action: outbox
          bcc: []
          body: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          cc: []
          created_at: 1608065002
          date: 1608065001
          events: []
          files: []
          from:
            - email: Katherine
              name: kat@spacetech.com
          id: 4ob23iv76gj8dv85pnivh6kra
          job_status_id: 2dqclipba6flkvo6y0a42tgjh
          labels: []
          object: draft
          reply_to: []
          reply_to_message_id: afc7gknkgig2dfeu0d7w2llly
          send_at: 1608151500
          snippet: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          starred: false
          status: pending
          subject: 'Sent at 2:45'
          thread_id: 5fail6l2b474jdx72qczolj16
          to:
            - email: dorothy@spacetech.com
              name: Dorothy
          unread: false
          version: 0
        - account_id: 5tgncdmczat02216u7d6uypyi
          action: outbox
          bcc: []
          body: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          cc: []
          created_at: 1608065541
          date: 1608065541
          events: []
          files: []
          from:
            - email: Katherine
              name: kat@spacetech.com
          id: 8bup1y1szsybrj91e86l9l07o
          job_status_id: 996mfx5bg5yzay4bpedug7of2
          labels: []
          object: draft
          reply_to: []
          reply_to_message_id: afc7gknkgig2dfeu0d7w2llly
          send_at: 1608155100
          snippet: >-
            This email was sent using the Nylas email API. Visit
            https://nylas.com for details.
          starred: false
          status: pending
          subject: 'Sent at 4:00'
          thread_id: abnnykhlipvgknbvubgfrqknx
          to:
            - email: dorothy@spacetech.com
              name: Dorothy
          unread: false
          version: 0
    Create_Outbox_Message:
      value:
        subject: Welcome to Nylas!
        send_at: 1608156000
        to:
          - email: dorothy@spacetech.com
            name: Dorothy
        from:
          - name: kat@spacetech.com
            email: Katherine
        body: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
    Create_Outbox_Message_Response:
      value:
        account_id: 5tgncdmczat02216u7d6uypyi
        bcc: []
        body: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        cc: []
        date: 1628784490
        events: []
        files: []
        from:
          - email: kat@spacetech.com
            name: Katherine
        id: afah874h94pb8wto05hlqsibt
        job_status_id: 1i35txkx1h5kjm5j9v3r5ybe4
        labels: []
        object: draft
        outbox_info:
          id: 1pew3fuaib0dy4z4hrre3s3hn
          message_id: afah874h94pb8wto05hlqsibt
          send_at: 'Thu, 12 Aug 2021 19:54:37 GMT'
          sent_at: null
        reply_to: []
        reply_to_message_id: 2xdrblsrx1x3fw3g9r778lkhe
        snippet: >-
          This email was sent using the Nylas email API. Visit https://nylas.com
          for details.
        starred: false
        subject: Welcome to Nylas!
        thread_id: 2xdrblsrx1x3fw3g9r778lkhe
        to:
          - email: dorothy@spacetech.com
            name: Dorothy
        unread: false
        version: 0
    Update_Outbox_Request:
      value:
        account_id: 5tgncdmczat02216u7d6uypyi
        action: outbox
        created_at: 1608065541
        id: 8bup1y1szsybrj91e86l9l07o
        job_status_id: 996mfx5bg5yzay4bpedug7of2
        object: message
        send_at: 1608155100
        status: pending
  parameters:
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
      description: >-
        Zero-based offset from default object sorting. See
        [pagination](/docs/api/#overview--pagintaion) for more information.
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 100
      description: >-
        The number of objects to return. Defaults to 100. If set too high,
        requests may fail to prevent excessively large response bodies.
    Accept:
      name: Accept
      in: header
      required: true
      schema:
        type: string
        default: application/json
    client_id:
      name: client_id
      in: query
      required: true
      schema:
        type: string
      description: Your Nylas application's client ID.
    redirect_uri:
      name: redirect_uri
      in: query
      required: true
      schema:
        type: string
        example: 'http://example.com/nylas_callback'
        description: >-
          The URI to which the user will be redirected once authentication
          completes. This must match a URI registered in the developer
          dashboard.
    response_type:
      name: response_type
      in: query
      required: true
      schema:
        type: string
        enum:
          - code
          - token
        example: code
      description: 'code for server side, token for client side.'
    scopes:
      name: scopes
      in: query
      required: true
      schema:
        type: string
      description: >-
        Learn more about
        [scopes](/docs/the-basics/authentication/authentication-scopes/)
    login_hint:
      name: login_hint
      in: query
      required: false
      schema:
        type: string
        example: my_email@example.com
      description: >-
        The user’s email address, if known. If you don't supply a login_hint,
        the Nylas OAuth flow will prompt the user for an email address to
        authenticate.
    state:
      name: state
      in: query
      required: false
      schema:
        type: string
      description: >-
        An optional arbitrary string that is returned as a URL parameter in your
        redirect URI. You can pass a value here to keep track of a specific
        user’s authentication flow. This may also be used to protect against
        [CSRF
        attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The
        maximum length of this string is 255 characters.
    view:
      name: view
      in: query
      schema:
        type: string
        enum:
          - ids
          - count
          - expanded
      description: 'See [Views](/docs/api/#overview--views) for more information.'
    subject:
      name: subject
      in: query
      required: false
      schema:
        type: string
      description: Return threads with a matching literal subject.
    any_email:
      name: any_email
      in: query
      required: false
      schema:
        type: string
      description: >-
        Return emails that have been sent or received from this comma-separated
        list of email addresses. For example: mail1@mail.com,mail2@mail.com. A
        maximum of 25 emails may be specified.
    to:
      name: to
      in: query
      required: false
      schema:
        type: string
      description: Return threads containing messages sent to this email address.
    from:
      name: from
      in: query
      required: false
      schema:
        type: string
      description: Return threads containing messages sent from this email address.
    cc:
      name: cc
      in: query
      required: false
      schema:
        type: string
      description: Return threads containing messages that were CC'd to this email address.
    bcc:
      name: bcc
      in: query
      required: false
      schema:
        type: string
      description: >-
        Return threads containing messages that were BCC'd to this email
        address, likely sent from the parent account. (Most SMTP gateways remove
        BCC information.)
    in:
      name: in
      in: query
      required: false
      schema:
        type: string
        enum:
          - name
          - display_name
          - id
      description: >-
        This parameter supports the name, display_name, or id of a folder or
        label. To return drafts, pass in `drafts`.
    unread:
      name: unread
      in: query
      required: false
      schema:
        type: boolean
      description: Return threads with one or more unread messages.
    starred:
      name: starred
      in: query
      required: false
      schema:
        type: boolean
      description: Return threads with one or more starred messages.
    filename:
      name: filename
      in: query
      required: false
      schema:
        type: string
      description: Return object with the filename.
    last_message_before:
      name: last_message_before
      in: query
      required: false
      schema:
        type: string
      description: >-
        Return threads whose most recent message was received before this
        Unix-based timestamp.
    last_message_after:
      name: last_message_after
      in: query
      required: false
      schema:
        type: string
      description: >-
        Return threads whose most recent message was received after this
        Unix-based timestamp.
    started_before:
      name: started_before
      in: query
      required: false
      schema:
        type: string
      description: >-
        Return threads whose first message was received before this Unix-based
        timestamp.
    started_after:
      name: started_after
      in: query
      required: false
      schema:
        type: string
      description: >-
        Return threads whose first message was received after this Unix-based
        timestamp.
    not_in:
      name: not_in
      in: query
      required: false
      schema:
        type: string
      description: >-
        Filter messages not in a given folder or label. The filter supports the
        name, display, or ID of a folder or label.
    thread_id:
      name: thread_id
      in: query
      required: false
      schema:
        type: string
      description: Return messages belonging to a specific thread.
    recieved_before:
      name: received_before
      in: query
      required: false
      schema:
        type: integer
      description: Return messages received before this unix timestamp.
    recieved_after:
      name: received_after
      in: query
      required: false
      schema:
        type: integer
      description: Return messages received after this unix timestamp.
    has_attachment:
      name: has_attachment
      in: query
      required: false
      schema:
        type: boolean
      description: Return only messages that have attachments (only true is supported).
    message_id:
      name: message_id
      in: query
      required: false
      schema:
        type: string
      description: Return objects matching the specified message ID.
    content_type:
      name: content_type
      in: query
      schema:
        type: string
        enum:
          - text/plain
          - text/html
          - multipart/alternative
          - multipart/mixed
          - image/jpeg
          - multipart/related
          - application/pdf
          - image/png
          - image/gif
          - application/octet-stream
          - multipart/signed
          - application/msword
          - application/pkcs7-signature
          - message/rfc822
          - image/jpg
      description: Return objects matching the specified content type.
    show_cancelled:
      name: show_cancelled
      in: query
      required: false
      schema:
        type: string
        default: 'false'
      description: >-
        Return events that have a status of `cancelled`. If an event is
        recurring, then it returns no matter the value of show_cancelled.
        Default false.
    event_id:
      name: event_id
      in: query
      required: false
      schema:
        type: string
      description: Return the event matching the specified event ID.
    calendar_id:
      name: calendar_id
      in: query
      required: false
      schema:
        type: string
      description: Return events belonging to the specified calendar ID.
    title:
      name: title
      in: query
      required: false
      schema:
        type: string
      description: Return events matching the specified title.
    description:
      name: description
      in: query
      required: false
      schema:
        type: string
      description: Return events matching the specified description.
    location:
      name: location
      in: query
      required: false
      schema:
        type: string
      description: Return events matching the specified location.
    starts_before:
      name: starts_before
      in: query
      required: false
      schema:
        type: string
      description: Return events starting before the specified unix timestamp.
    starts_after:
      name: starts_after
      in: query
      required: false
      schema:
        type: string
      description: Return events starting after the specified unix timestamp.
    ends_before:
      name: ends_before
      in: query
      required: false
      schema:
        type: string
      description: Return events ending before the specified unix timestamp.
    ends_after:
      name: ends_after
      in: query
      required: false
      schema:
        type: string
      description: Return events ending after the specified unix timestamp.
    metadata_key:
      name: metadata_key
      in: query
      required: false
      schema:
        type: string
      description: >-
        Pass in your keys to search for metadata.
        `https://api.nylas.com/events?metadata_key=goodmorning`.  You can also
        combine this with `metadata_value`,
        `https://api.nylas.com/events?metdata_key=goodmorning&metadata_value=goodbye`.
        In beta see [Event
        Metadata](/docs/connectivity/calendar/event-metadata/).
    metadata_value:
      name: metadata_value
      in: query
      required: false
      schema:
        type: string
      description: >-
        Pass in your value to search for metadata.
        `https://api.nylas.com/events?metadata_vale=goodnight`. You can also
        combine this with metadata_key`,
        `https://api.nylas.com/events?metdata_key=goodmorning&metadata_value=goodbye`.
        In beta, see [Event
        Metadata](/docs/connectivity/calendar/event-metadata/)
    expand_recurring:
      name: expand_recurring
      in: query
      required: false
      schema:
        type: boolean
      description: >-
        Return events matching the specified recurrence. If the recurrence is
        true, the results will expand single recurring events into individual
        event instances that fall within the requested time range.
    metadata_pair:
      name: metadata_pair
      in: query
      required: false
      schema:
        type: string
      description: >-
        Pass in your metadata key and value pair to search for metadata.
        `https://api.nylas.com/events?metadata_pair=goodmorning:goodnight`. In
        beta, see [Event Metadata](/docs/connectivity/calendar/event-metadata/)
    busy:
      name: busy
      in: query
      required: false
      schema:
        type: boolean
      description: Returns events with a busy status of true.
    notify_participants:
      schema:
        type: boolean
      in: query
      name: notify_participants
      description: >-
        If set to true, email notifications containing the calendar event will
        be sent to all event participants. When using to delete an event with
        the specified notification preference. If the value is set to true,
        email notifications containing the calendar event will be sent to all
        event participants. iCloud accounts setting notify_participants to false
        is not supported. A notification is always sent. iCloud accounts using
        [/send-rsvp] notify participants is not supported. 
    email:
      name: email
      in: query
      required: false
      example: email=fred%40nylas.com
      schema:
        type: string
      description: Returns the contacts matching the exact contact's email.
    phone_number:
      schema:
        type: string
        example: phone_number=4158889990
      in: query
      name: phone_number
      description: Returns the contacts matching the contact's exact phone number.
    street_address:
      schema:
        type: string
        example: street_address=1600%20Pennsylvania%20Ave
      in: query
      name: street_address
      description: >-
        Returns the contacts matching the one of the contact's exact street
        address.
    postal_code:
      schema:
        type: string
        example: postal_code=20500
      in: query
      name: postal_code
      description: >-
        Returns the contacts matching the contact's exact postal code of one of
        the contact's addresses.
    state_contacts:
      schema:
        type: string
      in: query
      name: state
      description: >-
        Returns the contacts matching the contact's exact state for one of the
        contact's physical addresses
    country:
      schema:
        type: string
      in: query
      name: country
      description: Returns the contacts matching the contact's exact physical addresses
    source:
      schema:
        type: string
        example: source=inbox
      in: query
      name: source
      description: >-
        Returns the contacts matching from the address book or auto-generated
        contacts from emails. For example of contacts only from the address
        book: `/`contacts?source=address_book` or for only autogenerated
        contacts: `/contacts?source=inbox`.
    group:
      schema:
        type: string
      in: query
      name: group
      description: Returns the contacts belonging to the Contact Group matching this ID.
    recurse:
      schema:
        type: boolean
      in: query
      name: recurse
      description: >-
        When set to true, returns the contacts also within the specified Contact
        Group subgroups, if the group parameter is set.
    cursor:
      schema:
        type: string
      in: query
      name: cursor
      required: true
      description: The data cursor from `/delta/latest_cursor`.
    delta_view:
      schema:
        type: string
        default: expanded
      in: query
      name: view
      description: >-
        This value indicates if the data expands thread and message objects in
        the response to include additional information, when the value is set to
        expanded.
    excluded_types:
      schema:
        type: string
        enum:
          - contact
          - file
          - message
          - event
          - draft
          - thread
          - folder
          - label
        example: contact
      in: query
      name: excluded_types
      description: >-
        A comma-separated list of object types to exclude from the returned
        deltas. You can not use `included_types` and `excluded_types` together.
    include_types:
      schema:
        type: string
        enum:
          - contact
          - event
          - file
          - message
          - draft
          - thread
          - folder
          - label
      in: query
      name: include_types
      description: >-
        A comma-separated list of the object types that will only be included in
        the returned deltas. You can not use `included_types` and
        `excluded_types` together.
tags:
  - name: Hosted Authentication
    description: >-
      Nylas hosted authentication is the quickest and easiest way to set up user
      authentication for your app. Use hosted authentication when:


      - You don’t care about white-labeling your application and are okay with
      Nylas showing on the authentication page. 

      - Need to create a test application with only a few users.

      - Want to decrease development time by letting Nylas handle the
      authentication.


      **Related Guides**


      - [Hosted
      Authentication](/docs/the-basics/authentication/hosted-authentication/)

      - [Authentication
      Scopes](/docs/the-basics/authentication/authentication-scopes/)
  - name: Native Authentication
    description: >-
      Native authentication is for developers who want to completely whitelabel
      the login experience through Nylas to match their application. If you are
      looking for the quickest way to setup authentication, review the [Hosted
      Authentication](/docs/the-basics/authentication/hosted-authentication/)
      documentation.


      **Related Guides**


      - [Native
      Authentication](/docs/the-basics/authentication/native-authentication/)

      - [Authentication
      Scopes](/docs/the-basics/authentication/authentication-scopes/s)
  - name: Accounts
    description: >
      An account corresponds to an email address, mailbox, and optionally a
      calendar. When connecting to the Nylas API, a specific access token gives
      you access to a specific account’s data.



      # Accounts Object


      | Attribute | Type  | Description  |

      |----|----|----|

      | id | string | A globally unique object identifier. |

      | object | string | Value is `accounts`. The type of object.|

      | account_id | string | A reference to the parent account object. Refers
      to self. |

      | name | string | The full name of the user, used as the default `from`
      name when sending mail. |

      |email_address| string | The canonical email address of the account. For
      Gmail accounts, this removes periods and plus suffixes. |

      | provider | string | Specifies the provider that backs the account. See
      [Supported Providers](/docs/developer-tools/api/supported-providers/) for
      a full list.|

      | organization_unit | string | Specify either `label` or `folder`
      depending on the provider. |

      | sync_state | string | The syncing status of the account. See the [Sync
      status](/docs/the-basics/manage-accounts/account-sync-status/)
      documentation for possible values. |

      | linked_at | int32 | A Unix timestamp indicating when this account was
      originally connected to Nylas.|
  - name: Account Management
    description: >+
      These endpoints allow for account management outside the developer console
      interface. You can list, cancel, reactivate, and delete accounts
      associated with your application.


      # Authentication for Account Management


      This endpoint uses the management API domain with different authentication
      from the rest of the Nylas API.


      * Prepended with `/a`

      * Uses the [client ID and
      secret](/docs/the-basics/authentication/authorizing-api-requests/) passed
      to it.


      # Account Management Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |account_id|string|A reference to the parent account object
      (self-referential in this case).|

      |billing_state|string|The billing state for the account. Values are paid,
      cancelled, or deleted.|

      |email|string|The email address of the account.|

      |id|string|A globally unique object identifier.|

      |provider|string|Specifies the provider that backs the account. See
      [Supported Providers](/docs/developer-tools/api/supported-providers/) for
      a full list.|

      |sync_state|string|The current sync state for the account. See [sync
      states](/docs/the-basics/manage-accounts/account-sync-status/).|

      |trial|boolean|The trial state for the application.|

  - name: Application Management
    description: >
      Manage your Nylas applications.



      # Application Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |application_name|string|The name of the Nylas application.|

      |icon_url|string|Icon URL of the Nylas application.|

      |redirect_uris|array|Array of strings. Each string is a single
      `redirect_uri` for the application.|
  - name: Threads
    description: >
      <!-- markdownlint-disable -->


      Threads are `first-class` objects allowing you to build beautiful mail
      applications, that behave the way users have come to expect. Actions like
      archiving or deleting can be performed on threads or individual messages.


      Nylas threads messages together using a variety of heuristics. On Gmail
      and Microsoft Exchange accounts, messages will be threaded together as
      close as possible to the representation in those environments. For all
      other providers (including generic IMAP), messages are threaded using a
      custom JWZ-inspired algorithm. 


      To load all messages for a given thread, you should instead use the
      [messages](/docs/api#tag--Messages) endpoint with a `thread_id` filter
      parameter.


      # Thread Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |id|string|Globally unique object identifier|

      |object|string|A string describing the type of object value is "thread")|

      |account_id|string|Reference to parent account object|

      |subject|string|Subject of the first message in the thread|

      |unread|boolean|Indicates whether the thread contains unread messages
      (mutable)|

      |starred|boolean|Indicates one or more messages are starred, aka flagged
      (mutable)|

      |last_message_timestamp|unix timestamp|Timestamp of the most recent
      message|

      |last_message_received_timestamp|unix timestamp|Timestamp of the most
      recently received message.(Excludes messages sent by the account.)|

      |last_message_sent_timestamp|unix timestamp|Timestamp of the most recently
      sent message in the thread|

      |first_message_timestamp|unix timestamp|Timestamp when the thread began|

      |participants|array|List of participant objects computed from all messages
      in the thread.|

      |snippet|string|A shortened plain-text preview of the most recent message
      in the thread|

      |message_ids|array|Array of IDs for messages within the thread, sorted by
      their timestamps|

      |draft_ids|array|Array of IDs for unsent drafts in the thread. May be null
      or absent|

      |version|integer|Incrementing value related to thread updates.You can use
      this to compare revisions, or invalidate your local cache.|

      |folders|array|The folder location(s) of a thread,  present only if the
      parent account's organization_unit is folder. Note that threads can span
      folders, depending on the location of the thread's messages. See the
      folders  docs for more info.|

      |labels|array|A list of label objects, present only if the parent
      account's organization_unit is label. These have Gmail-style semantics and
      can be arbitrarily added and removed from threads.|

      |has_attachments|boolean|Indicates if the thread has files attached to
      it.|


      # Thread Modifications


      An operation on a thread is performed on all the messages in the thread.
      It is a convenient shortcut to perform bulk operations on messages, which
      is what users have come to expect with modern mail applications.


      # Forwarded Emails


      Emails forwarded to other people in a thread remain in the thread on the
      provider and Nylas.
  - name: Messages
    description: >+
      Messages are the fundamental object of the Nylas platform, and the core
      building block for most email applications. They contain several pieces of
      information, such as when a message was sent, the sender's address, to
      whom it was sent, and the message body. They can also contain files
      (attachments), calendar event invitations, and more.



      #  Message Object



      | Attribute  | Type | Description  |

      |----|---|----|

      | `id` | string | A globally unique object identifier. |

      | `object` | string | A string describing the type of object(value is
      "message").|

      | `account_id` | string | Reference to a parent account object. |

      | `thread_id` | string | Reference to a parent thread object (all messages
      have a thread). |

      | `subject` | string | The subject line of the message. |

      | `from` | array | A list of name+email pairs the message was sent from.
      This is usually one object, but can be many. |

      | `to` | array | An array of name+email pairs the message was sent to. |

      | `cc` | array | An array of name+email pairs the message was cc'd to. |

      | `bcc` | array | An array of name+email pairs the message was bcc'd to.
      For received mail this is nearly always empty (for obvious reasons). |

      | `reply_to` | array | An array of name+email pairs replies should be sent
      to. |

      | `date` | unix timestamp | A timestamp of the date the message was
      received by the mail server. **Note:** This may be different from the
      unverified `Date` header in raw message object.

      | `unread` | boolean | Indicates the message is unread. This is the
      default for new incoming mail (mutable). |

      | `starred`  | boolean | Indicates the message is in a starred or flagged
      state (mutable). |

      | `snippet` | string | A shortened plain-text preview of the messagebody.
       | `body` |  string | The full HTML message body. Messages with only plain-text representations are up-converted to HTML.
      | `files`  | array | An array of [File]/docs/api/#tag--Files) objects, if
      the message includes attachments.

      | `events`  | array | An array [Event]/docs/api/#tag--Events) objects, if
      message includes calendar invites.

      | `folder` | folder object | A single folder object indicating the
      location of the message. This is present only if the parent account's
      `organization_unit` is `folder`. This property can be changed to move the
      message to a different folder.

      | `labels` | array | A list of [Label](/docs/api/#tag--Labels) objects.
      This is present only if the parent account's `organization_unit` is
      `label`. These have Gmail-style semantics and can be arbitrarily added and
      removed from messages. |


      # Message Response


      The Nylas APIs expose a parsed and sanitized version of the original
      RFC-2822 email object, combined with the state from the mail server, such
      as unread status and folder location.


      We still provide access to the RFC-2822 raw message object by passing in
      `Accept: message/rfc822` as the header.


      ## Message Response Security


      Although message bodies are represented in HTML, they are generally not
      safe to directly inject into a web app. This could result in global styles
      being applied to your app, or the execution of arbitrary JavaScript.



      # Message Views


      Messages support the use of [Views](/docs/api#overview--views) by
      including the `view` query parameter in your request.


      The expanded message view exposes several additional RFC2822 headers,
      useful for implementing custom threading or cross-mailbox identification.
      Pass the `view=expanded` query parameter when making requests to
      `/messages` and `/messages/{id}`.


      The following block is an example of what is added to the message object
      when using the expanded view.


      **Message View Example**



      ```json

      {
        "headers": {
          "In-Reply-To": "<evh5uy0shhpm5d0le89goor17-0@mailer.nylas.com>",
          "Message-Id": "<84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>",
          "References": ["<evh5uy0shhpm5d0le89goor17-0@mailer.nylas.com>"],
        }
      }

      ```



      | Header | Requirement | Description |

      | ----------|-------|-------| 

      | `Message-Id` | optional | Generated by clients while sending messages.
      It is different from a message's ID returned by the Nylas API (the message
      object's `id`). Unlike the `id`, the `Message-Id` header is *not*
      guaranteed to be unique since it is generated by clients. This field may
      be null. |

      | `In-Reply-To` | optional | The parent `Message-Id` to which this message
      replied. Expected `null` for messages that are not replies. |

      | `References` | optional | A list of `Message-Id`s related to a given
      message. Expected empty for messages which are not replies or related to
      existing messages. |


      ## Message View Object


      These values are unrelated to Nylas object IDs. Since they are provided by
      clients without validation, there is no guarantee for their accuracy,
      uniqueness, or consistency.

  - name: Folders
    description: >
      Folders behave like normal IMAP or filesystem folders. A Message can only
      exist within one folder at a time, but a Thread with many messages may
      span several folders.


      Folders are only supported on accounts for which `organization_unit` is
      folder. You can check if an account supports labels by looking at the
      `organization_unit` property on the Account object.



      # The Folders Object


      | Attribute  | Type | Description  |

      |----|---|----|

      | `id` | string | Globally unique object identifier. |

      | `object` | string | A string describing the type of object (value is
      "folder").

      | `account_id` | string | Reference to parent account object. |

      | `name` | string | Standard categories type, based on
      [RFC-6154](http://tools.ietf.org/html/rfc6154). <br>Can be one of the
      following:
      <ul><li>inbox</li><li>all</li><li>trash</li><li>archive</li><li>drafts</li><li>sent</li><li>spam</li><li>important</li><li>null
      (regular user-created folder)</li></ul>|

      | `display_name`| string | Localized name of folder, matching what is
      presented in their other mail apps. If you are displaying folders, use
      this instead of `name`. |


      # Nested Folders


      IMAP has very limited support for nested folders. It encodes a folder's
      path in its name. For example, the folder `Accounting/Taxes` will actually
      be named `Accounting.Taxes` or even `INBOX.Accounting.Taxes` depending on
      your IMAP server. To complicate things, different IMAP servers use
      different path separators. For example, `Taxes.Accounting` on server A may
      be `Taxes\Accounting` on server B.


      The Nylas API handles nested IMAP folders transparently. Creating a
      `Taxes/Invoices` folder using the API will create a folder with the right
      path separators. e.g: Depending on your server: `INBOX.Taxes.Invoices` or
      `Taxes/Invoices`.
  - name: Labels
    description: >-
      Labels are equivalent to Gmail labels. Messages can have more than one
      label, which is popular for users who set up mail filters.



      Labels are only supported on accounts for which `organization_unit` is
      label. You can check if an account supports labels by the
      `organization_unit` property on the [Account](/docs/api#get-/account)
      object.



      # Labels Object


      | Attribute  | Type | Description  |

      |----:|---|:----|

      | `id` |  string | Globally unique object identifier |

      | `object`  | string | A string describing the type of object (value is
      "label")|

      | `account_id` | string | Reference to parent account object |

      | `name`  | string | Standard categories type, based on
      [RFC-6154](http://tools.ietf.org/html/rfc6154). <br>Can be one of the
      following:<br>
      inbox<br>all<br>trash<br>archive<br>drafts<br>sent<br>spam<br>important<br>null
      (regular user-created label)

      | `display_name`  | string | Localized name of label, matching what is
      presented in their other mail apps. If you are displaying labels, use this
      instead of `name`. |
  - name: Drafts
    description: >
      A draft is a special kind of message which has not been sent, and
      therefore its body contents and recipients are still mutable. The drafts
      endpoints let you read and modify existing drafts, create new drafts, send
      drafts, and delete drafts.


      **Related Guides**

      -[Sending Emails With
      Nylas](/docs/connectivity/email/send-emails-with-nylas/)


      # Draft Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |id|string|A globally unique object identifier.|

      |object|string|A string describing the type of object (value is "draft").|

      |account_id|string|A reference to the parent account object.|

      |thread_id|string|A reference to the parent thread object. If this is a
      new draft, the thread will be empty.|

      |subject|string|The subject line of the draft.|

      |reply_to_message_id|string|The ID of a message to which this draft is a
      reply, allowing the sending API to include threading-specific headers for
      other mail clients.|

      |from|array|Array containing a single name+email pair to set as the "from"
      header. (See Aliases.)|

      |reply_to|array|An array of name-email pairs to set an alternative
      Reply-To header in the final sent message.|

      |to|array|An array of name-email pairs of recipients.|

      |cc|array|An array of name-email pairs of recipients to be cc'd.|

      |bcc|array|An array of name-email pairs of recipients to be bcc'd.|

      |date|unix timestamp|The timestamp of the last modification of the draft.|

      |unread|boolean|Indicates an unread state for the draft.|

      |starred|boolean|Starred or flagged state (mutable).|

      |snippet|string|A shortened plain-text preview of the draft body.|

      |body|string|The full HTML draft body text.|

      |files|array|An array of file objects, if the draft includes attachments.|

      |events|array|An array of event objects, if the draft includes calendar
      invites.|

      |folder|folder object|A single folder object indicating the location of
      the draft, present only if the parent account's `organization_unit` is
      folder. Customarily this is a folder where name is drafts, but not
      always.|

      |labels|array|A list of label objects, present only if the parent
      account's organization_unit is "label". These have Gmail-style semantics
      and can be arbitrarily added and removed from messages.|

      |version|integer|Incrementing value related to draft updates. You can use
      this to compare revisions or to invalidate your local cache.|


      # Creating Drafts


      **Empty Messages**


      All body params optional though if omitted, an empty draft will still be
      created. A successful response will contain the newly created draft
      object. At least one recipient in to, cc, or bcc must be specified before
      sending.


      **Attachments**


      Creating a draft will fail if the files with the referenced `file_ids`
      have not been uploaded. See [Files](/docs/api#tag--Files) for more details
      on how to upload and reference attachments.


      **Replies**


      If the draft is a response to an existing message, you should provide the
      message's ID as a `reply_to_message_id` attribute and omit the `subject`
      parameter. You must explicitly specify the message's recipients in the
      `to`, `cc` or `bcc` fields of the post body. 


      **Aliases**


      If you would like to use an alias for sending and/or receiving emails, you
      can optionally set the `from` or `reply_to` fields. If the given address
      is actually not an alias, most SMTP servers will either reject the message
      or silently replace it with the primary sending address.


      If the `from` and `reply_to` fields are omitted, the account's default
      sending name and address will be used.
  - name: Outbox
    description: >-
      <div style="margin-top: 8px; padding:14px; background-color: #FFFEE6;
      border: 1px solid #9E9600; color: #161717"><p><strong> In
      Beta</strong></p> <p>Outbox API is currently in beta. We can't guarantee
      functionality or availability.</p></div>


      **Related Guides**

      - [Outbox Endpoint Guide](/docs/connectivity/email/outbox-endpoint-guide/)
  - name: Sending
    description: >-
      <!-- markdownlint-disable -->


      The Send endpoint can send messages in 3 ways:


      # Send a Draft


      ```json

      {
        "draft_id": "8p8vg2elbbo98kkqyd4zwoi7p",
        "version": 0,
        "tracking": {
          "links": true,
          "opens": true,
          "thread_replies": true,
          "payload": "Any string"
        }
      }

      ```


      # Send Directly


      Send a message without saving it as a draft.


      ```json

      {
        "subject": "From Nylas",
        "to": [
          {
            "email": "swag@nylas.com",
            "name": "Nylas"
          }
        ],
        "cc": [
          {
            "name": "string",
            "email": "string"
          }
        ],
        "bcc": [
          {
            "name": "string",
            "email": "string"
          }
        ],
        "from": [
          {
            "name": "you@example.com",
            "email": "Your Name"
          }
        ],
        "reply_to": [
          {
            "name": "Nylas",
            "email": "swag@nylas.com"
          }
        ],
        "reply_to_message_id": "string",
        "body": "This email was sent using the Nylas email API. Visit https://nylas.com for details.",
        "file_ids": [
          "string"
        ]
      }

      ```


      # Send Raw MIME


      ```

      curl -X POST 'https://api.nylas.com/send' \

      -H 'Content-Type: message/rfc822' \

      -H 'Authorization: Bearer ACCESS_TOKEN' \

      -d 'MIME-Version: 1.0

      Content-Type: text/plain; charset=UTF-8

      In-Reply-To: <84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>

      References: <84umizq7c4jtrew491brpa6iu-0@mailer.nylas.com>

      Subject: With Love, From Nylas

      From: You <you@example.com>

      To: My Nylas Friend <swag@nylas.com>


      This email was sent via raw MIME using the Nylas email API. Visit
      https://nylas.com for details.'

      ```
  - name: Files
    description: >+
      The files endpoint manages data attached to messages. It allows you to
      download existing attachments from messages and threads, as well as upload
      new files to be sent. Before creating or modifying a draft to include an
      attachment, you must upload it via this API and use the returned file ID.


      **Related Guides**

      - [File Attachment Media
      Type](/docs/connectivity/email/file_attachment_media_types/)


      # The File Object



      | Attribute  | Type | Description  |

      |----|----|----|

      | `id` | string | Globally unique object identifier |

      | `object` | string | A string describing the type of object (value is
      "file")|

      | `account_id` | string | Reference to parent account object |

      | `filename` |  string | Name of the file, if available

      | `size` |  integer | Size of the file, in bytes

      | `content_type`  | string | Content-Type of the file, sometimes also
      called [Internet media
      type](https://en.wikipedia.org/wiki/Internet_media_type) or MIME type.

      | `message_ids` |  array | Array of identifiers for messages that contain
      this attachment. (Not guaranteed to be a complete set)

      | `content_id` |  string | The Content-Id of the file. Sometimes this
      value will be empty. Using this value, your app can locate the associated
      [`cid` URL](https://tools.ietf.org/html/rfc2111) in the message body and
      embed the resource inline.|


      ## Attachments


      Actual attached files may be relatively large (upwards of 25MB), so this
      API has separate endpoints for requesting file
      [information](/docs/api#get-/files) and
      [downloading](/docs/api#get-/files/-id-/download) the actual file.


      ### Including File Attachments
       
      Before creating or modifying a draft to include an attachment, you must
      upload it using the files API and use the returned file ID.


      ## Downloading


      Files can be downloaded by appending `/download` to the file metadata URI.
      If available, the response will include the filename in the
      `Content-Disposition` header.


      ## Uploading


      The [Upload](/docs/api#post-/files) endpoint is used to transfer files to
      Nylas, which must be done before adding them to a draft message. Data
      should be sent as multipart-form data with a single field named file.



      ## Content Types


      View a [full list of
      content-types](/docs/connectivity/email/file_attachment_media_types/) that
      correspond to file extensions.



      ## Temporary File Storage 


      Please note that we only store files uploaded to the Nylas API, and those
      parsed from messages, for 7 days. After the file is removed from our
      cache, we will attempt to re-fetch it from the original mail provider if
      applicable.

  - name: Calendar
    description: >
      The Nylas Calendar API powers your application with a secure, reliable
      connection to your user’s calendars. Sync historic and live events into
      your application in real-time.


      **Related Guides**


      - [Calendar Overview](/docs/connectivity/calendar/)

      - [Calendar
      Availability](/docs/connectivity/calendar/calendar-availability/)

      - [Virtual Calendars](/docs/connectivity/calendar/virtual-calendar/)


      # Calendar Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |account_id|string|Reference to parent account object|

      |description|string|Description of the Calendar|

      |id|string|Globally unique object identifier|

      |is_primary|boolean|A boolean denoting whether this is the primary
      calendar associated with a account|

      |job_status_id|string|[Job status](/docs/api#tag--Job-Statuses) ID for the
      calendar modification.|

      |location|string|Geographic location of the calendar as free-form text|

      |name|string|Name of the Calendar|

      |object|string|A string describing the type of object (value is
      "calendar")|

      |read_only|boolean|True if the Calendar is read only|

      |timezone|string|[IANA time
      zone](https://en.wikipedia.org/wiki/Tz_database) database formatted string
      (e.g. America/New_York).|


      # Free/Busy Object


      > iCloud does not support the free/busy endpoint.


      |Attribute|Type|Description|

      |--- |--- |--- |

      |object|string|A string describing the type of object (value is
      `free_busy`)|

      |email|string|Which email this free_busy information applies to|

      |time_slots|array|An array of `time_slot` objects. See below for a
      description of the `time_slot` object.|


      The `time_slot` sub-object contains the following attributes:


      |Attribute|Type|Description|

      |--- |--- |--- |

      |object|string|A string describing the type of object (value is
      `time_slot`)|

      |status|string|Value is busy which indicates this `time_slot` is busy.|

      |start_time|integer|Unix timestamp of the start time of the `time_slot`.|

      |end_time|integer|Unix timestamp of the end time of the `time_slot`.|


      # Virtual Calendars


      The Calendar API also supports [Virtual
      Calendars](/docs/connectivity/calendar/virtual-calendar/).


      # Job Status


      When making changes to your calendar, the response includes a
      `job_status_id`, use this to query the
      [status](/docs/api#tag--Job-Statuses) of the changes.
  - name: Events
    description: >-
      Events are objects within a calendar, generally supporting all features of
      modern scheduling apps. Using the calendar APIs, your application can
      schedule events, send meeting invitations, RSVP, and more.


      **Related Guides**


      - [Using the Calendar
      API](/docs/connectivity/calendar/using-calendar-api/)

      - [Event Metadata](/docs/connectivity/calendar/event-metadata/)


      # Events Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |id|string|A globally unique object identifier.|

      |object|string|A string describing the type of object (value is "event").|

      |account_id|string|A reference to the parent account object.|

      |calendar_id|string|A reference to the parent calendar object.|

      |title|string|The title of the event, usually short (maximum string length
      of 1024 characters).|

      |description|string|The description of the event, which may contain more
      details or an agenda (maximum string length of 8192 characters).|

      |ical_uid|string|Unique identifier as defined in RFC5545. It is used to
      uniquely identify events across calendaring systems. Can be null.|

      |when|subobject|One of four sub-objects corresponding to the time and
      duration of an event: time, timespan, date, or datespan. |

      |location|string|A location, such as a physical address or meeting room
      name.|

      |owner|string|The owner of the event, usually specified with their email
      or name and email.|

      |participants|array|An array of other participants invited to the event.
      Keys are email, name, status. Participants may also be rooms or
      resources.|

      |status|string|One of the following values: confirmed, tentative, or
      cancelled.|

      |read_only|boolean|Indicates whether the event can be modified.|

      |busy|boolean|On shared or public calendars, indicates whether to show
      this event's time block as available. (Also called transparency in some
      systems.)|

      |recurrence|subobject|Included if the event is a master recurring event.|

      |master_event_id|string|Only included in exceptions (overrides) to
      recurring events, the ID of the recurring event.|

      |original_start_time|unix timestamp|Only included in exceptions
      (overrides) to recurring events, the start time of the recurring event.|

      | metadata| object | A key-value pair added to an event object to store
      data|



      # Event Subobjects


      ## Participants


      The `participants` attribute is returned as an array of dictionaries,
      corresponding to participants. These include the keys:


      | Attribute  | Type | Description  |

      |----|-|----|

      | `name`  | string | (*Optional*) The participant's full name.

      | `email`  | string | The participant's email address.

      | `status`  | string | The participant's attendance status. Allowed values
      are `yes`, `maybe`, `no` and `noreply`. The default value is `noreply`.

      | `comment` |  string | (*Optional*) A comment by the participant.|


      ## Time


      The `time` subobject corresponds a single moment in time, which has no
      duration. Reminders or alarms are represented as `time` subobjects.


      | Attribute  | Type | Description  |

      |----|-|----|

      | `time`  |unix timestamp | A UNIX timestamp (UTC).|

      | `timezone` | string | If `timezone` is present, then the value for
      `time` will be read with timezone. Timezone using [IANA formatted
      string](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). |


      ## Timespan


      A span of time with a specific beginning and end time. An hour lunch
      meeting would be represented as `timespan` subobjects.


      | Attribute  | Type | Description  |

      |----|---|----|

      | `start_time` | unix timestamp | The start time of the event. |

      | `end_time`  | unix timestamp | The end time of the event. |

      | `start_timezone` | string | `start_timezone` and `end_timezone` must be
      submitted together. Timezone using [IANA formatted
      string](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). |

      | `end_timezone` | string | `start_timezone` and `end_timezone` must be
      submitted together. Timezone using [IANA formatted
      string](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). |


      ## Date


      A specific date for an event, without a clock-based start or end time.
      Your birthday and holidays would be represented as `date` subobjects.


      | Attribute  | Type | Description  |

      |----|---|----|

      | `date`|  date | Date of occurance in [ISO 8601
      format](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates).|


      ## Datespan


      A span of entire days without specific times. A business quarter or
      academic semester would be represented as `datespan` subobjects.


      | Attribute  | Type | Description  |

      |----|---|----|

      | `start_date`   |date | The start date in [ISO 8601
      format](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates).

      | `end_date`   |date | The end date in [ISO 8601
      format](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates).



      ## Recurrence


      | Attribute  | Type | Description  |

      |----|---|----|

      | `timezone`   | string | [IANA time zone
      database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
      formatted string (e.g. America/New_York).

      | `rrule`  |  array | An array of RRULE and EXDATE strings. See
      [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.8.5) for more
      details. Please note that EXRULE and RDATE strings are not supported for
      POST or PUT requests at this time. [This
      tool](http://jakubroztocil.github.io/rrule/) is helpful in understanding
      the RRULE spec.


      ```json

      "recurrence": {
        "rrule": [
          "RRULE:FREQ=WEEKLY;BYDAY=MO"
        ],
        "timezone": "America/New_York"
      },

      ```


      ### Recurring Events


      - Updating or deleting a recurring event will impact ALL instances of the
      event. Any individual modifications (overrides), such as a one-off time
      change, will be updated or deleted as well.


      - If the recurring event has overrides, these will be returned as
      separate, individual events, regardless if `expand_recurring` is `true`.


      - If `expand_recurring` is not set, any one-off cancellations will be
      returned in addition to the base event, for apps that are expanding the
      recurrence client-side. A cancellation has the field `cancelled` set to
      `true`.


      - If requesting events without the `expand_recurring` parameter, the
      events endpoint will only return the 'master' recurring event (only if it
      falls within the requested time range). 


      - If `BYDAY` isn't included in the RRULE string for weekly events, for
      example `FREQ=WEEKLY`, Nylas will fallback to information based on the
      event's date or time values.


      ## Provider Support



      There are a few important differences between how recurring events work
      between providers. Please see the table below:


      | Description | Google Behavior | Microsoft Behavior  |

      |----|----|----|

      | Modifying the recurrence of a series, like changing an event from weekly
      to daily | Overrides will remain unchanged if they are still part of the
      recurrence | Overrides will be removed |

      | Changes to busy status on the master event for a series | Busy status
      updates for all events in the series, including overrides| Busy status
      will not update for overrides that were created through Nylas, but they
      will update for overrides created through Microsoft's native calendar
      interface. |

      | Deleting a single occurence from a series within the provider's native
      calendar UI | This delete will appear as an override event and its status
      will be set to `cancelled` via the Nylas API | This delete will appear as
      an exdate via the Nylas API |

      | Creating a recurring event in the provider's UI with an "end date" for
      the recurrence. | The end date will show up as midnight after the last
      occurrence in the account's local timezone, minus a second via the Nylas
      API. | The end date will show up as the start time of the last occurence
      in the series via the Nylas API. |


      There are a few limitations for Microsoft accounts as well: 


      - If an exdate is created for a recurring event, you won't be able to
      recover or revert the removed occurence. You can either create a new,
      separate event to represent a recovered exdate or use other event
      properties like `status` that can be changed at any time instead of using
      exdates, if you need to the ability to change them later.


      The following RRULEs are not supported for Microsoft accounts at this
      time:


      - `RRULE:FREQ=MONTHLY;BYDAY=1TH,3TH` (A Monthly recurrence with multiple
      days. You can't include different indices with Microsoft accounts. The
      index property is on the monthly recurrence object, not on each
      day-of-week object)


      # RSVP


      The `/send-rsvp` endpoint allows you to send attendance status updates to
      event organizers. This is only possible for events that appears on the
      “Emailed events”, which are calendar invitations.


      If the RSVP is successful, the event object is returned with your RSVP
      participant status updated. This endpoint is idempotent: this means that
      only one email will be sent when you issue the same request with the same
      body multiple times.


      Behind the scenes, RSVPs work by sending an email back to the event
      organizer in iMIP format. Errors when RSVPing to events follow the same
      status codes as sending errors.


      The permission scopes required to use RSVP's are `calendar`,
      `email_read,`and `email_send`.


      # Emailed Events


      All accounts also include a calendar called **Emailed Events** containing
      event invitations sent to the user's mailbox. 


      This calendar is read-only, meaning events cannot be added updated, or
      deleted. The events calendar does contain RSVP's.


      # Event Metadata


      Learn more about using [Event
      Metadata](/docs/connectivity/calendar/event-metadata/).
  - name: Room Resources
    description: >+
      With the `/resources` endpoint, you can see which rooms a user can book
      within their GSuite or Office365 organization. To book an event in a room,
      including the room resource as a participant when creating the event with
      the `/events` endpoint.



      # Room Resources Object


      | Attribute  | Type | Description  |

      |----|----|----|

      | `object` | string | A string describing the type of object (value is
      "room_resource")

      | `email` | string | The email address of the resource. |

      | `name` |  string | The name of the resource. |

      | `capacity` | string | The capacity of the room set the organization
      admin.|

      | `building` | string | The building identifier set by the organization
      admin. |

      | `floor_name` | string | Microsoft uses two fields to identify floors,
      floor name, and floor label. We use floor label to populate this field.
      GSuite will return the floor name. |

      |` floor_number` | string |Microsoft uses floor number to popular this
      field. GSuite will always return null. |



      # Availability


      Room resources are not available for accounts that are authenticated using
      the Nylas dashboard. This feature is only available for accounts that
      authenticate using hosted or native auth.


      # Scopes


      Depending on if you are using GSuite or Microsoft Office 365 you'll need
      to enable certain permissions. 


      ## Microsoft 


      For Microsoft Office 365 you need to enable `Place.Read.All` as an admin
      to use Room Resources. See [Admin
      Approval](/docs/the-basics/provider-guides/microsoft/admin-approval/)  for
      more.


      You also need to enable the `room_resources.read_only` scope. See the
      [authentication
      scopes](/docs/the-basics/authentication/authentication-scopes/#microsoft-scopes)
      guide for more info.


      ## GSuite


      You need to enable the `room_resources.read_only` scope. See the
      [authentication
      scopes](/docs/the-basics/authentication/authentication-scopes/#gmail-scopes)
      guide for more info.

  - name: Contacts
    description: >-
      The Nylas APIs provide access to the user's contacts, making it easy to
      add contact autocomplete, address book integration, and more to your
      application.



      <div style="padding:24px; background-color:  #F0F3FF; border: 1px solid
      #002DB4; color: #161717"><p><strong>API Version 2.0
      Only</strong></p><p>Our contacts support received a major upgrade in v2.0
      of the API.</p></div>



      This section pertains to the functionality in the v2.0 and beyond of the
      API. If you have not upgraded your API version yet, check out the [API
      Versioning](/docs/api#overview--versioning) section.


      **Related Guides**


      - [Contacts
      Overview](/docs/connectivity/contacts/contacts-api-guide/#contacts-api-limitations)
      - Review API limitations


      # Contact Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |id|string|A globally unique object identifier.|

      |object|string|A string describing the type of object (e.g "contact").|

      |account_id|string|A reference to the parent account object.|

      |given_name|string|The given name of the contact.|

      |middle_name|string|The middle name of the contact.|

      |surname|string|The surname of the contact.|

      |suffix|string|The suffix of the contact. (e.g. Jr., Sr., III).|

      |nickname|string|The nickname of the contact.|

      |birthday|string|The birthday of contact in the format YYYY-MM-DD.|

      |company_name|string|The name of the company, for which the contact
      works.|

      |job_title|string|The job title of the contact.|

      |manager_name|string|The name of the manager for the contact.|

      |office_location|string|The location of the office for the contact. This
      is a free-form field.|

      |notes|string|Notes about the contact. This field has limited support.|

      |picture_url|string|The URL of endpoint for the contact's picture. See GET
      `/contacts/picture` for more information.|

      |emails|List [Email](/docs/api#tag--Contacts--email)|A list of email
      address objects. See Email for more information.|

      |im_addresses|List
      [IMAddress](/docs/api#tag--Contacts--instant-messenger-im-address)|A list
      of Instant Messaging (IM)Address objects. See IM Address for more
      information.|

      |physical_addresses|List
      [PhysicalAddress](/docs/api#tag--Contacts--physical-address)|A list of
      physical address objects. See Physical Address for more information.|

      |phone_numbers|List [PhoneNumber](/docs/api#tag--Contacts--phone-number)|A
      list of phone number objects.See Phone Number for more information.|

      |web_pages|List [WebPage](/docs/api#tag--Contacts--web-page)|A list of web
      page objects. See Web Page for more information.|

      |groups|List [ContactGroup](/docs/api#tag--Contacts--contact-group)|A list
      of Contact Groups, to which the contact belongs. See Contact Group for
      more information.|

      |source|string|The source of the contact will be:
      <ul><li>address_book-Denotes a user-created contact</li><li>inbox -Denotes
      a contact parsedfrom an email</li> </ul>|


      # Contact Sub Attributes


      ## Email 


      |Attribute|Type|Description|

      |--- |--- |--- |

      |type|string|The type of the email address. The value can be work or
      personal.|

      |email|string|The email address. This is a free-form string.|


      ## Instant Messenger (IM) Address


      |Attribute|Type|Description|

      |--- |--- |--- |

      |type|string|The type of the IM address. The value can be gtalk, aim,
      yahoo, lync, skype, qq, msn, icc, or jabber.|

      |im_address|string|The IM address. This is a free-form string.|


      ## Physical Address


      |Attribute|Type|Description|

      |--- |--- |--- |

      |format|string|The format of the address. The value can be structured or
      unstructured. Currently only structured addresses are supported in PUT or
      POST calls to /contacts.|

      |type|string|The type of the address. The value can be work, home or
      other.|

      |street_address|string|The street address, which includes a house number
      and street name.|

      |city|string|The city of the address.|

      |postal_code|string|The postal code of the address.|

      |state|string|The state of the address. This can be a full name or the
      state abbreviation.|

      |country|string|The country of the address. This can be a full name or the

      country abbreviation.|


      ## Phone Number


      |Attribute|Type|Description|

      |--- |--- |--- |

      |type|string|The type of phone number. The value can be business, home,
      mobile, pager, business_fax, home_fax, organization_main, assistant, radio
      or other.|

      |number|string|The phone number. This is a free-form string.|


      ## Web Page


      |Attribute|Type|Description|

      |--- |--- |--- |

      |type|string|Type of Web Page. The default values are profile, blog,
      homepage or work.You can add in a custom type when creating a type and
      Nylas will read custom types from incoming contact data.|

      |url|string|The web page url. This is a free-form string.|


      ## Contact Group


      |Attribute|Type|Description|

      |--- |--- |--- |

      |id|string|A globally unique object identifier.|

      |object|string|A string describing the type of object. The value is
      contact_group.|

      |account_id|string|A reference to the parent account object.|

      |name|string|The name of the Contact Group.|

      |path|string|A fully qualified path of the Contact Group, if nesting is
      permitted by the account's provider.|


      # Contact Groups


      ## Gmail


      Gmail contact groups translate to labels. Any number of contacts may have
      any number of labels. Gmail contacts can belong to any number of contact
      groups. At this time, labels cannot be nested. Gmail contact groups will
      have equivalent name and path fields.


      ## Exchange


      Exchange contact groups translate to contact folders. A specific contact
      must live inside of exactly one folder. Exchange contacts belong to
      exactly one contact group. Contact folders may be nested. To avoid
      ambiguity, the path field of Exchange contact groups represents the fully
      qualified path of the corresponding contact folder (e.g.
      Contacts/Personal) and the name field represents the name of the folder
      only (e.g. Personal).
  - name: Neural
    description: >
      The Neural API abstracts complex AI techniques into functional
      capabilities that can be leveraged in minutes.



      <div style="padding:24px; background-color:  #F0F3FF; border: 1px solid
      #002DB4; color: #161717">Nylas updates the models used for our
      Categorizer, Conversation, and Signature endpoints at the beginning of
      each month. Models may get updated more frequently. Please see our <a
      href="https://changelog.nylas.com/">changelog</a> for updates.</div>



      **Related Guides**

      - [Nylas Neural API](/docs/intelligence/nylas-neural-api/)



      # Categorize Message Object


      Returns the [Message object](/docs/api/#tag--Messages--the-message-object)
      with the following fields added


      | Attribute  | Type | Description  |

      |----|---|----|

      | category | string |The category of the message. This can be conversation
      or feed. Conversations are messages sent by a human. Feeds are emails sent
      by a computer such as email confirmations and spam. |

      | categorized_at | integer | UNIX formatted time of when the message
      category was most recently updated. |

      | model_version | string | Version of the model categorizing the
      conversation. |


      ## Categorize Feedback Object


      | Attribute | Type  | Description

      |--|--|--|

      | category | string |New message category. Either conversation or feed.|

      | message_id |string | ID of the message recategorized|
       |feedback_at | integer | Time the message feedback was received in Unix timestamp. |
      | recategorized_from | object | Object with old message category.|

      | category | string |Old message category. Either conversation or feed. | 

      | model_version | string | Version of the model categorizing the
      conversation. |


      # Clean Conversation Message Object


      Returns the [Message object](/docs/api/#tag--Messages--message-object)with
      the following fields added:


      | Attribute  | Type | Description  |

      |----|---|----|

      | conversation | string | The cleaned-up email message. |

      | model_version | string | Version of the model parsing out the
      conversation. |


      ## Conversation Feedback Object


      | Attribute  | Type | Description  |

      |----|---|----|

      | model_version | string | Version of the model parsing out the
      conversation. |

      | message_id | string | ID of the message |

      | feedback_at | integer | UNIX timestamp message feedback was given |


      # Signature Extraction Object


      Returns the [Message object](/docs/api/#tag--Messages--message-objects)
      with the following fields added:


      | Attribute  | Type | Description  |

      |----|---|----|

      | body | string | The body of the email message the signature came from. |

      | signature | string | The parsed signature information. Extra HTML and
      images are removed.|

      | model_version | string |Version of the model parsing out the signature.|

      | contact | object | An object containing any contact details. Only
      returns if `parse_contacts` is true|



      ## Signature Extraction Feedback Object


      | Attribute  | Type | Description  |

      |----|---|----|

      | model_version | string | Version of the model parsing out the
      conversation. |

      | message_id | string | ID of the message |

      | feedback_at | integer | UNIX timestamp message feedback was given |


      # OCR Object


      | Attribute  | Type | Description  |

      |----|---|----|

      | account_id | string | ID of the account the message came from.|

      | content_type | string | Content-type of the file. Currently available 
      [content
      types](/docs/intelligence/optical-charecter-recognition/#content-types) |

      | filename | string |Name of the file attachment.|

      | id | string | ID of the messages the file is attached to.|

      | object | string | Always file |

      | ocr | string | The parsed file attachment returned as text.|

      | size | integer | Size of the file, in bytes. |


      ## OCR Feeback Object


      Returns a 200 OK
  - name: Workflows
    description: >-
      > Early Access

      > 

      > This product is currently in early access. Please reach out to your
      Nylas sales representative for more information on how to access this
      feature.


      Nylas Workflows help you quickly build integrations by making it easier to
      work with common scenarios. For example, instead of needing to build out a
      separate event and reminder application, use our create event reminder
      workflow to combine them into one API call.


      **Related Guides**



      **Create Event Reminder** - Create a calendar event and then send
      reminders for the event using email, SMS, or webhooks.

      **Omni Channel Reminder** - Send reminders using email, SMS, or webhooks.
  - name: Search
    description: >-
      The search sub-endpoint is used to run a full-text search that is proxied
      to the account's provider. Results are matched with objects that have been
      synced, and then returned.


      Like other API endpoints, the search endpoint returns up to 100 results by
      default. This endpoint supports
      [Pagination](/docs/api/#overview--pagination) so your application can
      request more objects, or iterate through all results.


      ## Query Syntax


      For details on the query syntax for the most commmon providers:


      * [Google](https://support.google.com/mail/answer/7190?hl=en)

      *
      [Exchange/Outlook](https://support.office.com/en-us/article/Learn-to-narrow-your-search-criteria-for-better-searches-in-Outlook-d824d1e9-a255-4c8a-8553-276fb895a8da)

      * [Yahoo](https://help.yahoo.com/kb/SLN4701.html)

      * [Generic IMAP](https://tools.ietf.org/html/rfc3501#section-6.4.4).


      ## Message Reconciliation and Pagination


      Because the results are first returned and then matched with synced data,
      it's possible for fewer results to be returned than the page size, even if
      more results exist on the provider.
  - name: Webhooks
    description: >-
      Webhooks allow your application to receive notifications when certain
      events occur. For example, when a new email is received, Nylas will make a
      `POST` request to your URI endpoint, letting you know information about
      the new message. You can specify what events you'd like to be notified
      about in the [developer dashboard](https://dashboard.nylas.com/sign-in).


      Webhooks are the recommended way to get notified of changes to the
      accounts you sync, because they are easier to integrate with your app and
      scale seamlessly with your growth.


      **Related Guides**


      - [Webhooks](/docs/developer-tools/webhooks/)

      - [Message Tracking
      docs](/docs/developer-tools/webhooks/message-tracking/)


      # Webhooks Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |id|string|A globally unique object identifier.|

      |application_id|string|A reference to the parent application object.|

      |callback_url|string|The URL where notifications are posted.|

      |state|string|The state of the webhook.|

      |triggers|array|An array containing a set of triggers, describing the
      notifications this webhook should receive. |

      |version|string|A string describing the the webhook version.|
  - name: Job Statuses
    description: >-
      Job Statuses allow you to track whether a modification through the Nylas
      API has synced back to the account's provider.


      For example, if you make an API request to create a new Calendar for a
      Google account using POST /calendars, Nylas will immediately return the
      new Calendar ID before it is synced with Google. You can use the job
      status to check whether the `create_calendar` action has synced to Google.


      # Job Status Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |account_id|string|Reference to parent account object|

      |action|string|Action performed on a given object|

      |created_at|unix timestamp|Timestamp indicating when the job status was
      created.|

      |job_status_id|string|Globally unique id representing the job|

      |id|string|A globally unique object identifier.|

      |object|string|A string describing the type of object this job status
      refers to.|

      |status|string|A string indicating the job status. Can be successful,
      pending, or failed|
  - name: Deltas
    description: >-
      Deltas let you stream changes about email accounts to build email
      applications that process new data quickly without fetching an index of
      the user's mailbox or performing a large number of API calls.



      <div style="padding:24px; background-color:  #F0F3FF; border: 1px solid
      #002DB4; color: #161717"><p><strong>Webhooks and Deltas</strong></p><p>For
      most of our customers, Webhooks are the best option to stay up to date
      with all email, contact and calendar changes. If you're interested in
      using deltas, please <a
      href="https://support.nylas.com/hc/en-us/requests/new">reach out to us</a>
      before starting your integration.<p></div>



      **Related Guides**

      - [Deltas](/docs/developer-tools/deltas/)


      #  Delta Object


      |Attribute|Type|Description|

      |--- |--- |--- |

      |cursor|string|The cursor value for this delta.|

      |object|string|The object type of the changed object. (message, thread,
      etc.)|

      |id|string|The id of the changed object|

      |event|string|The type of change. Either create, modify, or delete.|

      |attributes||The current state of the object. Note this may be different
      from the state when the delta change actually happened.|



      ## Event Deletions

      For `event` objects that have been deleted, the `event` parameter will be
      set to `modify` and the `status` attribute set to `cancelled`, matching
      the [Event](/docs/api#tag--Events) objects.


      ## Expanded Delta View


      Adding `view=expanded` to the request expands thread and message objects
      in the response to include additional information.


      Thread objects are expanded to contain `message` and `draft` sub-objects
      and will remove `message_ids` and `draft_ids`. Note the message and draft
      sub-objects do not include a `body` parameter.


      Message objects are expanded to include several additional RFC2822
      headers. For more details see the [Expanded Message
      View](/docs/api#tag--Messages).


      ## Using Filters with Deltas


      The delta endpoint supports a modified version of
      [Filters](/docs/api#overview--filters), which allows applications to
      request only changes to a specific object type by using `exclude_types`
      and `include_types`. See the query parameters in the endpoints below for
      more detail.


      Specifying both `exclude_types` and `include_types` will result in an
      error.
security:
  - ACCESS_TOKEN: []
